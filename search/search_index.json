{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Islandora is an open-source framework that provides the necessary tools to turn a Drupal website into a fully-functional Digital Assets Management System. About Islandora: Is native Drupal - With Islandora, you can create preservation-ready digital resources using Drupal nodes, media, files, and taxonomy terms. A suite of customized Drupal resource types and configurations that illustrate Islandora's capabilities are packaged as the Islandora Defaults module . Integrates with Fedora - Drupal resources can be stored in Duraspace's Fedora 5.x Repository as binary assets and RDF metadata. Uses microservices - Islandora provides an architecture for messaging and integration with any number of microservices, that provide services outside of the Drupal framework. Islandora's Crayfish suite of microservices provides functionality for synchronizing resources into Fedora and automatically generating derivative files. Can handle messages at scale - Islandora uses Alpaca , an integration middleware based on Apache Camel, to scalably handle messaging and queueing for microservices such as Crayfish. Offers digital preservation features - Using a robust storage layer for preservation (Fedora), and generating technical metadata with FITS, are digital preservation tools provided out of the box in the default implementation. Community members have created additional features for doing digital preservation using Islandora , which have not yet been contributed to \"Core Islandora\". Exposes data to harvesters - Metadata about resources is available as linked data through the JSON-LD serialization module , and can be made available through Drupal, Fedora, or a triplestore. Islandora also offers a full configuration for exposing OAI-PMH to metadata harvesters, and IIIF support for images. Offers flexibility - As Islandora content is Drupal content, migrations and batch editing can be done through Drupal's built-in migrate framework and controlled vocabularies created using Drupal taxonomies. Contributed Drupal modules such as Solr Search API enable in-site search, and Matomo Analytics provides usage metrics for site analytics. Is a community - A dedicated, active community of users and developers is working to push new features, collaborate on improvements, design custom solutions, and create extended functionality. Some of these for Islandora 8 take the form of Recipes . Try Islandora Online Sandbox To try Islandora without installing anything, visit http://future.islandora.ca/ . Anyone can log in to this sandbox as an administrator (credentials are below and on the front page) and explore the interface! However, this site is refreshed periodically so your changes will not be permanent. This site uses Islandora Defaults, a way of setting up Islandora for demonstration purposes. This is not the only way that Islandora can be made to work! This sandbox includes, on top of Islandora Defaults, some sample content and configuration (such as views and blocks, and other Drupal modules like Views Bulk Edit) to increase its usefulness as a sandbox. username: Test password: islandora Virtual Machine Image (.ova file) To try Islandora locally, you can download and run the latest community sandbox Virtual Machine image . This requires installing VirtualBox or another virtualization provider. This also uses Islandora Defaults, and similarly to the online sandbox includes sample content and other configured Views, Blocks, and Drupal modules. username: admin password: islandora Vagrant and Islandora Base Box The latest release of Islandora Defaults is uploaded as the Islandora 8 Base Box on Vagrant Cloud. If you have Vagrant and Git installed as well as VirtualBox, you can spin up the latest release of Islandora Defaults quickly by using the Islandora Playbook . On the dev branch, the Vagrantfile has the ISLANDORA_DISTRO variable default to 'islandora/8'. Like this, vagrant up will download the latest Islandora Base Box and will skip ansible provisioning. Same credentials as above, with further access to services documented in its README file. git clone https://github.com/Islandora-Devops/islandora-playbook cd islandora-playbook git checkout dev vagrant up Islandora Playbook via Ansible To use the Islandora Playbook as an Ansible Playbook, either set ISLANDORA_DISTRO to ubuntu/bionic64 or centos/7 (by editing the Vagrantfile or setting a shell variable), or, use Ansible to run it against an external linux server. Either way, be prepared to wait a while as Ansible installs Drupal via drupal-project and Composer. See Installation and Hacking on Islandora for more details. Join the Community The Islandora community is an active group of users, managers, librarians, documenters, and developers from GLAM (and beyond!) institutions worldwide. We welcome discussion and contribution through various mailing lists, channels, interest groups, and calls. The Islandora community operates under the Islandora Code Of Conduct . See our Contributing Guidelines for more information. Documentation for previous versions Documentation for Islandora 6 and 7 is on the Lyrasis documentation wiki .","title":"Overview"},{"location":"#overview","text":"Islandora is an open-source framework that provides the necessary tools to turn a Drupal website into a fully-functional Digital Assets Management System.","title":"Overview"},{"location":"#about","text":"Islandora: Is native Drupal - With Islandora, you can create preservation-ready digital resources using Drupal nodes, media, files, and taxonomy terms. A suite of customized Drupal resource types and configurations that illustrate Islandora's capabilities are packaged as the Islandora Defaults module . Integrates with Fedora - Drupal resources can be stored in Duraspace's Fedora 5.x Repository as binary assets and RDF metadata. Uses microservices - Islandora provides an architecture for messaging and integration with any number of microservices, that provide services outside of the Drupal framework. Islandora's Crayfish suite of microservices provides functionality for synchronizing resources into Fedora and automatically generating derivative files. Can handle messages at scale - Islandora uses Alpaca , an integration middleware based on Apache Camel, to scalably handle messaging and queueing for microservices such as Crayfish. Offers digital preservation features - Using a robust storage layer for preservation (Fedora), and generating technical metadata with FITS, are digital preservation tools provided out of the box in the default implementation. Community members have created additional features for doing digital preservation using Islandora , which have not yet been contributed to \"Core Islandora\". Exposes data to harvesters - Metadata about resources is available as linked data through the JSON-LD serialization module , and can be made available through Drupal, Fedora, or a triplestore. Islandora also offers a full configuration for exposing OAI-PMH to metadata harvesters, and IIIF support for images. Offers flexibility - As Islandora content is Drupal content, migrations and batch editing can be done through Drupal's built-in migrate framework and controlled vocabularies created using Drupal taxonomies. Contributed Drupal modules such as Solr Search API enable in-site search, and Matomo Analytics provides usage metrics for site analytics. Is a community - A dedicated, active community of users and developers is working to push new features, collaborate on improvements, design custom solutions, and create extended functionality. Some of these for Islandora 8 take the form of Recipes .","title":"About"},{"location":"#try-islandora","text":"","title":"Try Islandora"},{"location":"#online-sandbox","text":"To try Islandora without installing anything, visit http://future.islandora.ca/ . Anyone can log in to this sandbox as an administrator (credentials are below and on the front page) and explore the interface! However, this site is refreshed periodically so your changes will not be permanent. This site uses Islandora Defaults, a way of setting up Islandora for demonstration purposes. This is not the only way that Islandora can be made to work! This sandbox includes, on top of Islandora Defaults, some sample content and configuration (such as views and blocks, and other Drupal modules like Views Bulk Edit) to increase its usefulness as a sandbox. username: Test password: islandora","title":"Online Sandbox"},{"location":"#virtual-machine-image-ova-file","text":"To try Islandora locally, you can download and run the latest community sandbox Virtual Machine image . This requires installing VirtualBox or another virtualization provider. This also uses Islandora Defaults, and similarly to the online sandbox includes sample content and other configured Views, Blocks, and Drupal modules. username: admin password: islandora","title":"Virtual Machine Image (.ova file)"},{"location":"#vagrant-and-islandora-base-box","text":"The latest release of Islandora Defaults is uploaded as the Islandora 8 Base Box on Vagrant Cloud. If you have Vagrant and Git installed as well as VirtualBox, you can spin up the latest release of Islandora Defaults quickly by using the Islandora Playbook . On the dev branch, the Vagrantfile has the ISLANDORA_DISTRO variable default to 'islandora/8'. Like this, vagrant up will download the latest Islandora Base Box and will skip ansible provisioning. Same credentials as above, with further access to services documented in its README file. git clone https://github.com/Islandora-Devops/islandora-playbook cd islandora-playbook git checkout dev vagrant up","title":"Vagrant and Islandora Base Box"},{"location":"#islandora-playbook-via-ansible","text":"To use the Islandora Playbook as an Ansible Playbook, either set ISLANDORA_DISTRO to ubuntu/bionic64 or centos/7 (by editing the Vagrantfile or setting a shell variable), or, use Ansible to run it against an external linux server. Either way, be prepared to wait a while as Ansible installs Drupal via drupal-project and Composer. See Installation and Hacking on Islandora for more details.","title":"Islandora Playbook via Ansible"},{"location":"#join-the-community","text":"The Islandora community is an active group of users, managers, librarians, documenters, and developers from GLAM (and beyond!) institutions worldwide. We welcome discussion and contribution through various mailing lists, channels, interest groups, and calls. The Islandora community operates under the Islandora Code Of Conduct . See our Contributing Guidelines for more information. Documentation for previous versions Documentation for Islandora 6 and 7 is on the Lyrasis documentation wiki .","title":"Join the Community"},{"location":"alpaca/alpaca-technical-stack/","text":"Alpaca Technical Stack Alpaca contains several OSGI modules or bundles. They are grouped together as features and deployed to Karaf container. OSGi OSGi is a specification to develop and deploy modular Java applications. It allows for dynamic deployment (hot deployment) and dependency management. The base unit of resources is called a bundle. Bundle is similar to a jar file, with additional information to be processed as an OSGi component. Several bundles can be grouped together into a Feature and installed together. OSGi bundles can be run on containers implementing the OSGi specification. Apache Karaf is one such container Karaf Apache Karaf is a container that can be used to deploy an array of applications such servlets, Apache Camel components, jars etc. Karaf - Bundle - Hello World Download a bundle to the islandora-playbook (ex to /home/ubuntu directory). An example hello world bundle is here . In the Islandora 8 playbook, you can login to Karaf using ssh. The password is karaf. You can also use the client here: /opt/karaf/bin/client . Karaf client allows the use of Linux commands such as grep in addition to Karaf commands. ssh -p 8101 karaf@localhost Install the bundle: karaf@root()> bundle karaf@root(bundle)> install file:///home/ubuntu/helloworld-1.0.0.jar Bundle ID: 242 The installation will return a bundle id. You can issue the list command to verify that bundle is on the list. Initially it will have Installed status. As per OSGi specification, before a bundle can be started, it has to be Resolved. To resolve, issue the following command. karaf@root(bundle)> resolve 242 You can start and stop the bundle as below. karaf@root(bundle)> start 242 Hello World! karaf@root(bundle)> stop 242 Goodbye World! karaf@root(bundle)> Karaf - Features - Hello World Karaf Features allows for bundles to be grouped, managed and deployed together. Features can be nested as well. Feature files of frameworks such as Apache Camel or Apache ActiveMQ can be used to deploy those services. A simple Features file is as below. <features> <feature name='greeter_server' version='1.0'> <bundle>file:///home/ubuntu/helloworld-1.0.0.jar</bundle> <bundle>file:///home/ubuntu/helloworld2-1.0.0.jar</bundle> </feature> </features> You can add the features to Karaf as below: karaf@root()> feature:repo-add file:///home/ubuntu/features.xml You can install the feature's bundles as below. karaf@root(feature)> install greeter_server Hello World 2 ! Hello World! Uninstalling the feature. karaf@root(feature)> uninstall greeter_server Goodbye World 2 ! Goodbye World! Gradle Gradle is used by Alpaca as a build and package management tool. It is similar to Maven . Apache Camel Apache Camel is an integration framework that aids in implementing integration patterns. Alpaca - Apache Camel HelloWorld Maven has camel-archetype-blueprint which can be used to create apache-camel OSGi bundle project structure. Creating a project/bundle under Alpaca mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.9.0 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-g However, it is easier to copy the structure of an existing project such as islandora-connector-broadcast . cp -R islandora-connector-broadcast/ islandora-connector-helloworld Open the project in your IDE. In Eclipse, you can go to File | Open Projects from File System and navigate the new folder. We need to rename the configuration, java and build files to reflect the helloworld project. src/main/cfg/ca.islandora.alpaca.connector.helloworld.cfg src/main/java/ca/islandora/alpaca/connector/helloworld src/main/java/ca/islandora/alpaca/connector/helloworld/HelloworldRouter.java Also change the content of the above file to log Hello World package ca.islandora.alpaca.connector.helloworld; import static org.apache.camel.LoggingLevel.INFO; import org.apache.camel.builder.RouteBuilder; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HelloworldRouter extends RouteBuilder { private static final Logger LOGGER = LoggerFactory.getLogger(HelloworldRouter.class); /** * Configure the message route workflow. */ public void configure() throws Exception { // Hello World. from(\"timer:foo?period=5000\").log(INFO, LOGGER, \"Hello World\"); } } src/main/resource/OSGI-INF/blueprint/blueprint.xml - Change the content of this file to reflect Helloworld package. src/build.gradle apply plugin: 'osgi' description = 'Islandora 8 HelloWorld' dependencies { compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion compile group: 'org.apache.activemq', name: 'activemq-camel', version: activemqVersion compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion } jar { manifest { description project.description docURL project.docURL vendor project.vendor license project.license instruction 'Import-Package', 'org.apache.activemq.camel.component,' + \"org.apache.camel;version=\\\"${camelVersionRange}\\\",\" + defaultOsgiImports instruction 'Export-Package', 'ca.islandora.alpaca.connector.helloworld' } } artifacts { archives (file('build/cfg/main/ca.islandora.alpaca.connector.helloworld.cfg')) { classifier 'configuration' type 'cfg' } } Building the bundle To build this project, we have to update the Alpaca build settings. Include and add the project in Alpaca/settings.gradle . include ':islandora-connector-helloworld' project(':islandora-connector-helloworld').projectDir = \"$rootDir/islandora-connector-helloworld\" as File Normally, we would also have to update the karaf/src/main/resources/features.xml file to include this bundle. However, we will be deploying the bundle directly into Karaf's Hot deployment directory. Thus, not needed at this time. To build it from command line in Linux. ubuntu:~/workspace/Alpaca$ sudo gradle w build Deploying the bundle Upload the bundle to the Apache Karaf deploy directory: /opt/apache-karaf-4.0.5/deploy Login to Karaf. You can also use the Karaf client here: /opt/karaf/bin/client . ssh -p 8101 karaf@localhost Verify that bundle is deployed bundle:list See the log to confirm that the bundle is working. log:tail You should see a message like below: 2017-02-24 21:30:17,973 | INFO | 12 - timer://foo | HelloworldRouter | 186 - ca.islandora.alpaca.islandora-connector-helloworld - 0.2.1.SNAPSHOT | Hello World Apache ActiveMQ Apache ActiveMQ is a JMS compliant Messaging Queue. Messaging client can make use of JMS to send messages. Installing ActiveMQ Installing ActiveMQ is relatively easy. Download the latest stable release here . Go to the activemq_install_dir/bin . Start the ActiveMQ by using the activemq script or batch file and start command. $ cd activemq_install_dir/bin $ ./activemq start When ActiveMQ gets started, go to http://localhost:8161/admin/. You can login using admin:admin. Note that ActiveMQ in Islandora 8 playbook does not have a UI. References OSGI for Beginners Playing with Apache Karaf Console Karaf Quick Start ActiveMQ Introduction","title":"Alpaca Technical Stack"},{"location":"alpaca/alpaca-technical-stack/#alpaca-technical-stack","text":"Alpaca contains several OSGI modules or bundles. They are grouped together as features and deployed to Karaf container.","title":"Alpaca Technical Stack"},{"location":"alpaca/alpaca-technical-stack/#osgi","text":"OSGi is a specification to develop and deploy modular Java applications. It allows for dynamic deployment (hot deployment) and dependency management. The base unit of resources is called a bundle. Bundle is similar to a jar file, with additional information to be processed as an OSGi component. Several bundles can be grouped together into a Feature and installed together. OSGi bundles can be run on containers implementing the OSGi specification. Apache Karaf is one such container","title":"OSGi"},{"location":"alpaca/alpaca-technical-stack/#karaf","text":"Apache Karaf is a container that can be used to deploy an array of applications such servlets, Apache Camel components, jars etc.","title":"Karaf"},{"location":"alpaca/alpaca-technical-stack/#karaf-bundle-hello-world","text":"Download a bundle to the islandora-playbook (ex to /home/ubuntu directory). An example hello world bundle is here . In the Islandora 8 playbook, you can login to Karaf using ssh. The password is karaf. You can also use the client here: /opt/karaf/bin/client . Karaf client allows the use of Linux commands such as grep in addition to Karaf commands. ssh -p 8101 karaf@localhost Install the bundle: karaf@root()> bundle karaf@root(bundle)> install file:///home/ubuntu/helloworld-1.0.0.jar Bundle ID: 242 The installation will return a bundle id. You can issue the list command to verify that bundle is on the list. Initially it will have Installed status. As per OSGi specification, before a bundle can be started, it has to be Resolved. To resolve, issue the following command. karaf@root(bundle)> resolve 242 You can start and stop the bundle as below. karaf@root(bundle)> start 242 Hello World! karaf@root(bundle)> stop 242 Goodbye World! karaf@root(bundle)>","title":"Karaf - Bundle - Hello World"},{"location":"alpaca/alpaca-technical-stack/#karaf-features-hello-world","text":"Karaf Features allows for bundles to be grouped, managed and deployed together. Features can be nested as well. Feature files of frameworks such as Apache Camel or Apache ActiveMQ can be used to deploy those services. A simple Features file is as below. <features> <feature name='greeter_server' version='1.0'> <bundle>file:///home/ubuntu/helloworld-1.0.0.jar</bundle> <bundle>file:///home/ubuntu/helloworld2-1.0.0.jar</bundle> </feature> </features> You can add the features to Karaf as below: karaf@root()> feature:repo-add file:///home/ubuntu/features.xml You can install the feature's bundles as below. karaf@root(feature)> install greeter_server Hello World 2 ! Hello World! Uninstalling the feature. karaf@root(feature)> uninstall greeter_server Goodbye World 2 ! Goodbye World!","title":"Karaf - Features - Hello World"},{"location":"alpaca/alpaca-technical-stack/#gradle","text":"Gradle is used by Alpaca as a build and package management tool. It is similar to Maven .","title":"Gradle"},{"location":"alpaca/alpaca-technical-stack/#apache-camel","text":"Apache Camel is an integration framework that aids in implementing integration patterns.","title":"Apache Camel"},{"location":"alpaca/alpaca-technical-stack/#alpaca-apache-camel-helloworld","text":"Maven has camel-archetype-blueprint which can be used to create apache-camel OSGi bundle project structure.","title":"Alpaca - Apache Camel HelloWorld"},{"location":"alpaca/alpaca-technical-stack/#creating-a-projectbundle-under-alpaca","text":"mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.9.0 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-g However, it is easier to copy the structure of an existing project such as islandora-connector-broadcast . cp -R islandora-connector-broadcast/ islandora-connector-helloworld Open the project in your IDE. In Eclipse, you can go to File | Open Projects from File System and navigate the new folder. We need to rename the configuration, java and build files to reflect the helloworld project. src/main/cfg/ca.islandora.alpaca.connector.helloworld.cfg src/main/java/ca/islandora/alpaca/connector/helloworld src/main/java/ca/islandora/alpaca/connector/helloworld/HelloworldRouter.java Also change the content of the above file to log Hello World package ca.islandora.alpaca.connector.helloworld; import static org.apache.camel.LoggingLevel.INFO; import org.apache.camel.builder.RouteBuilder; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HelloworldRouter extends RouteBuilder { private static final Logger LOGGER = LoggerFactory.getLogger(HelloworldRouter.class); /** * Configure the message route workflow. */ public void configure() throws Exception { // Hello World. from(\"timer:foo?period=5000\").log(INFO, LOGGER, \"Hello World\"); } } src/main/resource/OSGI-INF/blueprint/blueprint.xml - Change the content of this file to reflect Helloworld package. src/build.gradle apply plugin: 'osgi' description = 'Islandora 8 HelloWorld' dependencies { compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion compile group: 'org.apache.activemq', name: 'activemq-camel', version: activemqVersion compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion } jar { manifest { description project.description docURL project.docURL vendor project.vendor license project.license instruction 'Import-Package', 'org.apache.activemq.camel.component,' + \"org.apache.camel;version=\\\"${camelVersionRange}\\\",\" + defaultOsgiImports instruction 'Export-Package', 'ca.islandora.alpaca.connector.helloworld' } } artifacts { archives (file('build/cfg/main/ca.islandora.alpaca.connector.helloworld.cfg')) { classifier 'configuration' type 'cfg' } }","title":"Creating a project/bundle under Alpaca"},{"location":"alpaca/alpaca-technical-stack/#building-the-bundle","text":"To build this project, we have to update the Alpaca build settings. Include and add the project in Alpaca/settings.gradle . include ':islandora-connector-helloworld' project(':islandora-connector-helloworld').projectDir = \"$rootDir/islandora-connector-helloworld\" as File Normally, we would also have to update the karaf/src/main/resources/features.xml file to include this bundle. However, we will be deploying the bundle directly into Karaf's Hot deployment directory. Thus, not needed at this time. To build it from command line in Linux. ubuntu:~/workspace/Alpaca$ sudo gradle w build","title":"Building the bundle"},{"location":"alpaca/alpaca-technical-stack/#deploying-the-bundle","text":"Upload the bundle to the Apache Karaf deploy directory: /opt/apache-karaf-4.0.5/deploy Login to Karaf. You can also use the Karaf client here: /opt/karaf/bin/client . ssh -p 8101 karaf@localhost Verify that bundle is deployed bundle:list See the log to confirm that the bundle is working. log:tail You should see a message like below: 2017-02-24 21:30:17,973 | INFO | 12 - timer://foo | HelloworldRouter | 186 - ca.islandora.alpaca.islandora-connector-helloworld - 0.2.1.SNAPSHOT | Hello World","title":"Deploying the bundle"},{"location":"alpaca/alpaca-technical-stack/#apache-activemq","text":"Apache ActiveMQ is a JMS compliant Messaging Queue. Messaging client can make use of JMS to send messages.","title":"Apache ActiveMQ"},{"location":"alpaca/alpaca-technical-stack/#installing-activemq","text":"Installing ActiveMQ is relatively easy. Download the latest stable release here . Go to the activemq_install_dir/bin . Start the ActiveMQ by using the activemq script or batch file and start command. $ cd activemq_install_dir/bin $ ./activemq start When ActiveMQ gets started, go to http://localhost:8161/admin/. You can login using admin:admin. Note that ActiveMQ in Islandora 8 playbook does not have a UI.","title":"Installing ActiveMQ"},{"location":"alpaca/alpaca-technical-stack/#references","text":"OSGI for Beginners Playing with Apache Karaf Console Karaf Quick Start ActiveMQ Introduction","title":"References"},{"location":"contributing/CONTRIBUTING/","text":"Welcome! If you are reading this document then you are interested in contributing to Islandora 8. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up! Workflows The Islandora 8 Tech Call meets each Wednesday at 1:00 PM Eastern, and the Islandora 8 User Call meets every second Thursday at 1:00 PM Eastern. Meeting notes and announcements are posted to the Islandora community list and the Islandora developers list . You can view meeting agendas, notes, and call-in information here . Anybody is welcome to join the calls, and add items to the agenda. Use cases If you would like to submit a use case to the Islandora 8 project, please submit an issue here using the Use Case template , prepending \"Use Case:\" to the title of the issue. Documentation You can contribute documentation in two different ways. One way is to create an issue here , prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as Contribute Code . All documentation resides in docs . Request a new feature To request a new feature you should open an issue in the Islandora 8 repository or create a use case (see the Use cases section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case. Report a bug To report a bug you should open an issue in the Islandora 8 repository that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue. In order to help us understand and fix the bug it would be great if you could provide us with: The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components. The expected behavior. The actual, incorrect behavior. Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment. If you want to provide a pull along with your bug report: That is great! In this case please send us a pull request as described in the section Create a pull request below. Contribute code Before you set out to contribute code you will need to have completed a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca If you are interested in contributing code to Islandora but do not know where to begin: In this case you should browse open issues and check out use cases . If you are contributing Drupal code, it must adhere to Drupal Coding Standards ; Travis CI will check for this on pull requests. Contributions to the Islandora codebase should be sent as GitHub pull requests. See section Create a pull request below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub. For small patches , feel free to submit pull requests directly for those patches. For larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on. Open an issue , prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue. Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together. Islandora committers will work with you on the design to make sure you are on the right track. Implement your issue, create a pull request (see below), and iterate from there. Create a pull request Take a look at Creating a pull request . In a nutshell you need to: Fork this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off main, or for Drupal modules use the most recent version branch). See Fork a repo for detailed instructions. Commit any changes to your fork. Send a pull request using the pull request template to the Islandora GitHub repository that you forked in step 1. If your pull request is related to an existing issue -- for instance, because you reported a bug/issue earlier -- prefix the title of your pull request with the corresponding issue number (e.g. issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from. You may want to read Syncing a fork for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository. License Agreements The Islandora Foundation requires that contributors complete a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.","title":"How to contribute"},{"location":"contributing/CONTRIBUTING/#welcome","text":"If you are reading this document then you are interested in contributing to Islandora 8. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!","title":"Welcome!"},{"location":"contributing/CONTRIBUTING/#workflows","text":"The Islandora 8 Tech Call meets each Wednesday at 1:00 PM Eastern, and the Islandora 8 User Call meets every second Thursday at 1:00 PM Eastern. Meeting notes and announcements are posted to the Islandora community list and the Islandora developers list . You can view meeting agendas, notes, and call-in information here . Anybody is welcome to join the calls, and add items to the agenda.","title":"Workflows"},{"location":"contributing/CONTRIBUTING/#use-cases","text":"If you would like to submit a use case to the Islandora 8 project, please submit an issue here using the Use Case template , prepending \"Use Case:\" to the title of the issue.","title":"Use cases"},{"location":"contributing/CONTRIBUTING/#documentation","text":"You can contribute documentation in two different ways. One way is to create an issue here , prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as Contribute Code . All documentation resides in docs .","title":"Documentation"},{"location":"contributing/CONTRIBUTING/#request-a-new-feature","text":"To request a new feature you should open an issue in the Islandora 8 repository or create a use case (see the Use cases section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case.","title":"Request a new feature"},{"location":"contributing/CONTRIBUTING/#report-a-bug","text":"To report a bug you should open an issue in the Islandora 8 repository that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue. In order to help us understand and fix the bug it would be great if you could provide us with: The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components. The expected behavior. The actual, incorrect behavior. Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment. If you want to provide a pull along with your bug report: That is great! In this case please send us a pull request as described in the section Create a pull request below.","title":"Report a bug"},{"location":"contributing/CONTRIBUTING/#contribute-code","text":"Before you set out to contribute code you will need to have completed a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca If you are interested in contributing code to Islandora but do not know where to begin: In this case you should browse open issues and check out use cases . If you are contributing Drupal code, it must adhere to Drupal Coding Standards ; Travis CI will check for this on pull requests. Contributions to the Islandora codebase should be sent as GitHub pull requests. See section Create a pull request below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub. For small patches , feel free to submit pull requests directly for those patches. For larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on. Open an issue , prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue. Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together. Islandora committers will work with you on the design to make sure you are on the right track. Implement your issue, create a pull request (see below), and iterate from there.","title":"Contribute code"},{"location":"contributing/CONTRIBUTING/#create-a-pull-request","text":"Take a look at Creating a pull request . In a nutshell you need to: Fork this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off main, or for Drupal modules use the most recent version branch). See Fork a repo for detailed instructions. Commit any changes to your fork. Send a pull request using the pull request template to the Islandora GitHub repository that you forked in step 1. If your pull request is related to an existing issue -- for instance, because you reported a bug/issue earlier -- prefix the title of your pull request with the corresponding issue number (e.g. issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from. You may want to read Syncing a fork for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository.","title":"Create a pull request"},{"location":"contributing/CONTRIBUTING/#license-agreements","text":"The Islandora Foundation requires that contributors complete a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.","title":"License Agreements"},{"location":"contributing/committers/","text":"Islandora 8 Committers Islandora 8 is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers. Rights Committers share the following rights: Write access to the codebase Nomination privileges of new committers Release management privileges Binding votes on procedural, code modification, and release issues Access to the private committers mailing list Responsibilities Committers share the following responsibilities: Monitor and respond to project mailing lists Attend project and technical meetings Monitor and vet bug-tracker issues Review and commit code contributions Ensure code contributions are properly licensed Guide and mentor new committers Committers The following is an alphabetized list of the current Islandora 8 committers: Name Organization Github username Melissa Anez Islandora Foundation manez Bryan Brown Florida State University bryjbrown Jordan Dukart discoverygarden jordandukart Debbie Flitner Arizona State University dflitner Jonathan Green LYRASIS jonathangreen Jonathan Hunt Catalyst.Net kayakr Mark Jordan Simon Fraser University mjordan Danny Lamb Islandora Foundation dannylamb Natkeeran Ledchumykanthan University of Toronto Scarborough natkeeran Rosie Le Faive University of Prince Edward Island rosiel Alexander O'Neill University of Prince Edward Island alxp Seth Shaw University of Nevada, Las Vegas seth-shaw-unlv Alan Stanley University of Prince Edward Islandora ajstanley Jared Whiklo University of Manitoba whikloj Eli Zoller Arizona State University elizoller Emeritus Committers The following is an alphabetized list of the prior Islandora 8 committers: Name Organization Aaron Coburn Amherst College Diego Pino METRO Nick Ruest York University Guidelines for assessing new candidates for committership When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability. Ability to work cooperatively with peers How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process. Ability to be a mentor How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them). Community How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas. Commitment How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well. Personal skill/ability How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review. New Committer Process This section describes the process for handling the voting of a new committer. Summary: Call a vote ( templates/committerVote.txt ) Close a vote ( templates/closeCommitterVote.txt ) Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt ) If they accept, then do: Add to the Islandora 8 Committer team of the Github Islandora organization. Add to Committer team of GitHub Islandora-Labs organization Add to islandora-committers google-group Add to committers wiki page: Islandora 8 Committers (this page) Announce the new committer ( template/committerAnnounce.txt )","title":"Committers"},{"location":"contributing/committers/#islandora-8-committers","text":"Islandora 8 is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers.","title":"Islandora 8 Committers"},{"location":"contributing/committers/#rights","text":"Committers share the following rights: Write access to the codebase Nomination privileges of new committers Release management privileges Binding votes on procedural, code modification, and release issues Access to the private committers mailing list","title":"Rights"},{"location":"contributing/committers/#responsibilities","text":"Committers share the following responsibilities: Monitor and respond to project mailing lists Attend project and technical meetings Monitor and vet bug-tracker issues Review and commit code contributions Ensure code contributions are properly licensed Guide and mentor new committers","title":"Responsibilities"},{"location":"contributing/committers/#committers","text":"The following is an alphabetized list of the current Islandora 8 committers: Name Organization Github username Melissa Anez Islandora Foundation manez Bryan Brown Florida State University bryjbrown Jordan Dukart discoverygarden jordandukart Debbie Flitner Arizona State University dflitner Jonathan Green LYRASIS jonathangreen Jonathan Hunt Catalyst.Net kayakr Mark Jordan Simon Fraser University mjordan Danny Lamb Islandora Foundation dannylamb Natkeeran Ledchumykanthan University of Toronto Scarborough natkeeran Rosie Le Faive University of Prince Edward Island rosiel Alexander O'Neill University of Prince Edward Island alxp Seth Shaw University of Nevada, Las Vegas seth-shaw-unlv Alan Stanley University of Prince Edward Islandora ajstanley Jared Whiklo University of Manitoba whikloj Eli Zoller Arizona State University elizoller","title":"Committers"},{"location":"contributing/committers/#emeritus-committers","text":"The following is an alphabetized list of the prior Islandora 8 committers: Name Organization Aaron Coburn Amherst College Diego Pino METRO Nick Ruest York University","title":"Emeritus Committers"},{"location":"contributing/committers/#guidelines-for-assessing-new-candidates-for-committership","text":"When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability.","title":"Guidelines for assessing new candidates for committership"},{"location":"contributing/committers/#ability-to-work-cooperatively-with-peers","text":"How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process.","title":"Ability to work cooperatively with peers"},{"location":"contributing/committers/#ability-to-be-a-mentor","text":"How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them).","title":"Ability to be a mentor"},{"location":"contributing/committers/#community","text":"How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas.","title":"Community"},{"location":"contributing/committers/#commitment","text":"How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well.","title":"Commitment"},{"location":"contributing/committers/#personal-skillability","text":"How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review.","title":"Personal skill/ability"},{"location":"contributing/committers/#new-committer-process","text":"This section describes the process for handling the voting of a new committer. Summary: Call a vote ( templates/committerVote.txt ) Close a vote ( templates/closeCommitterVote.txt ) Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt ) If they accept, then do: Add to the Islandora 8 Committer team of the Github Islandora organization. Add to Committer team of GitHub Islandora-Labs organization Add to islandora-committers google-group Add to committers wiki page: Islandora 8 Committers (this page) Announce the new committer ( template/committerAnnounce.txt )","title":"New Committer Process"},{"location":"contributing/contributing-workflow/","text":"Terms: User : Anyone who uses Islandora whether or not they participate in the community directly. Contributor : Anyone who contributes in any form to Islandora (code, documentation, posts on the lists, etc). Committer : Individuals with merging privileges, and binding votes on procedural, code modification, and release issues, etc. (further outlined here). Community : All of the above. Overview Choosing how we work together is an important privilege the Islandora community offers to its contributors. Our workflow is built around engagement and consensus to encourage high quality code that is expected to meet defined standards. All contributors are expected to follow the defined workflow. Any contributor can propose changes to the workflow at any time by initiating a conversation on the mailing list. Any proposed changes must be confirmed by the committers by way of an Apache rules vote in order to take effect. Social Dynamics We operate under the Islandora Community Code of Conduct . Some additional general observations to keep in mind when interacting with others in this workflow: We are all volunteers Time/attention of others is a limited resource. You cannot impose on others what to do. You should be motivated to do things by yourself. Common need is the driving force. Friendly cooperation is how its done Your contribution should not overstrain others. Your contribution is valuable when others appreciate it. Islandora is constantly improving You are expected to make high quality contributions You must be able to adapt to change Workflow: General Guidelines: Identify if a Github issue is needed: Minor grammar / php warning: no ticket required Feature or Fix beyond the minimal: Github Issue Unsure? Play it safe and make a Github Issue Prioritizing pull requests: If there is an urgent need for the pull request to be addressed quickly, indicate the need in the pull request template or a comment. Complexity should also be taken into account when evaluating how quickly to merge a pull request. Changes that affect core modules or make extensive changes should receive more review and testing. All interested parties should be satisfied before something is merged; no hard numbers. If you know who is likely to be interested, tag them. Tag the creator of the issue if possible. Make a reasonable effort. If a pull request languishes without response when one is needed, tag @Islandora/8-x-committers (or @Islandora-Devops/committers if you\u2019re working on install code) with a reminder and/or put the issue on the agenda for the next Islandora 8 Tech Call All contributions to GitHub must be accompanied by either an Individual Contributor License or a Corporate Contributor License covering the contributor. Development Workflow: Create a Github Issue if none exists Assign the issue to yourself or request it to be assigned in a comment on the issue. Be sure to tag @Islandora/8-x-committers to bring attention to it. Perform development on a \u2018feature\u2019 branch. Give your branch a name that describes the issue or feature. Using something like \u2018issue-xxx\u2018 and including the issue number is always a safe bet if you don\u2019t know what to name it. When the code is ready for review, issue a pull request on Github from your feature branch into the development branch (\u20188.x-1.x\u2019 for Drupal modules and \u2018dev\u2019 for everything else) Continuous integration checks need to be satisfied before the code can be merged Coding standards checks and copy/paste mess detection must be passing before code can be merged. Automated tests are also expected to pass before code can be merged, however at times there can be extenuating circumstances preventing this. For example, sometimes there is a disconnect between running tests locally versus on the continuous integration server. If tests run locally and everyone involved in the pull request is in agreement, the check for automated tests can be ignored. But this isn\u2019t a common occurrence. Code coverage checks are more of a guideline than a strict requirement. A reasonable effort to provide tests for contributed code is expected. However, demanding 100% code coverage for all contributed code is unreasonable. If tests have been provided or updated and everyone involved in the pull request is in agreement, code coverage checks can be ignored. The code is reviewed and tested by the community, with all feedback and further development performed within the pull request. Once all feedback has been addressed, all applicable status checks have passed, and all interested parties are satisfied, the code can be merged by a committer Pull requests should not be merged by committers who have provided code in the pull request. Pull requests should also not be merged by committers who are peers in the same organization as those who provided code. Always \u201cSquash and Merge\u201d , please. Close the Github issue If you add the keyword \u201cfixes\u201d or \u201cresolves\u201d on the same line when referencing the Github Issue in the PR description, it will auto-close the issue when the PR is merged. Otherwise, make a comment referencing the new commit and close the issue manually. Release Workflow During release, the same workflow holds, it is just performed against the \u2018release\u2019 branch of a repository instead of \u2018dev\u2019 or \u20188.x-1.x\u2019. After pull requests are merged into the release branch, the changes can be merged back into dev from release.","title":"Contributing Workflow"},{"location":"contributing/contributing-workflow/#terms","text":"User : Anyone who uses Islandora whether or not they participate in the community directly. Contributor : Anyone who contributes in any form to Islandora (code, documentation, posts on the lists, etc). Committer : Individuals with merging privileges, and binding votes on procedural, code modification, and release issues, etc. (further outlined here). Community : All of the above.","title":"Terms:"},{"location":"contributing/contributing-workflow/#overview","text":"Choosing how we work together is an important privilege the Islandora community offers to its contributors. Our workflow is built around engagement and consensus to encourage high quality code that is expected to meet defined standards. All contributors are expected to follow the defined workflow. Any contributor can propose changes to the workflow at any time by initiating a conversation on the mailing list. Any proposed changes must be confirmed by the committers by way of an Apache rules vote in order to take effect.","title":"Overview"},{"location":"contributing/contributing-workflow/#social-dynamics","text":"We operate under the Islandora Community Code of Conduct . Some additional general observations to keep in mind when interacting with others in this workflow: We are all volunteers Time/attention of others is a limited resource. You cannot impose on others what to do. You should be motivated to do things by yourself. Common need is the driving force. Friendly cooperation is how its done Your contribution should not overstrain others. Your contribution is valuable when others appreciate it. Islandora is constantly improving You are expected to make high quality contributions You must be able to adapt to change","title":"Social Dynamics"},{"location":"contributing/contributing-workflow/#workflow","text":"","title":"Workflow:"},{"location":"contributing/contributing-workflow/#general-guidelines","text":"Identify if a Github issue is needed: Minor grammar / php warning: no ticket required Feature or Fix beyond the minimal: Github Issue Unsure? Play it safe and make a Github Issue Prioritizing pull requests: If there is an urgent need for the pull request to be addressed quickly, indicate the need in the pull request template or a comment. Complexity should also be taken into account when evaluating how quickly to merge a pull request. Changes that affect core modules or make extensive changes should receive more review and testing. All interested parties should be satisfied before something is merged; no hard numbers. If you know who is likely to be interested, tag them. Tag the creator of the issue if possible. Make a reasonable effort. If a pull request languishes without response when one is needed, tag @Islandora/8-x-committers (or @Islandora-Devops/committers if you\u2019re working on install code) with a reminder and/or put the issue on the agenda for the next Islandora 8 Tech Call All contributions to GitHub must be accompanied by either an Individual Contributor License or a Corporate Contributor License covering the contributor.","title":"General Guidelines:"},{"location":"contributing/contributing-workflow/#development-workflow","text":"Create a Github Issue if none exists Assign the issue to yourself or request it to be assigned in a comment on the issue. Be sure to tag @Islandora/8-x-committers to bring attention to it. Perform development on a \u2018feature\u2019 branch. Give your branch a name that describes the issue or feature. Using something like \u2018issue-xxx\u2018 and including the issue number is always a safe bet if you don\u2019t know what to name it. When the code is ready for review, issue a pull request on Github from your feature branch into the development branch (\u20188.x-1.x\u2019 for Drupal modules and \u2018dev\u2019 for everything else) Continuous integration checks need to be satisfied before the code can be merged Coding standards checks and copy/paste mess detection must be passing before code can be merged. Automated tests are also expected to pass before code can be merged, however at times there can be extenuating circumstances preventing this. For example, sometimes there is a disconnect between running tests locally versus on the continuous integration server. If tests run locally and everyone involved in the pull request is in agreement, the check for automated tests can be ignored. But this isn\u2019t a common occurrence. Code coverage checks are more of a guideline than a strict requirement. A reasonable effort to provide tests for contributed code is expected. However, demanding 100% code coverage for all contributed code is unreasonable. If tests have been provided or updated and everyone involved in the pull request is in agreement, code coverage checks can be ignored. The code is reviewed and tested by the community, with all feedback and further development performed within the pull request. Once all feedback has been addressed, all applicable status checks have passed, and all interested parties are satisfied, the code can be merged by a committer Pull requests should not be merged by committers who have provided code in the pull request. Pull requests should also not be merged by committers who are peers in the same organization as those who provided code. Always \u201cSquash and Merge\u201d , please. Close the Github issue If you add the keyword \u201cfixes\u201d or \u201cresolves\u201d on the same line when referencing the Github Issue in the PR description, it will auto-close the issue when the PR is merged. Otherwise, make a comment referencing the new commit and close the issue manually.","title":"Development Workflow:"},{"location":"contributing/contributing-workflow/#release-workflow","text":"During release, the same workflow holds, it is just performed against the \u2018release\u2019 branch of a repository instead of \u2018dev\u2019 or \u20188.x-1.x\u2019. After pull requests are merged into the release branch, the changes can be merged back into dev from release.","title":"Release Workflow"},{"location":"contributing/docs_style_guide/","text":"Documentation Style Guide Do's Use a GitHub Pull Request to submit documentation. Submit documentation formatted in Markdown format. Include a top-level heading for the whole page (using # ) Please add Markdown headings ( # and ## ) to the content sections. Use the \"bold/emphasis\" style in Markdown by enclosing text in double asterisks or underscores, **bold text** or __bold text__ , for UI elements that users will interact with. For example, a button label for a button that must be pressed should be made bold in Markdown. Use the \"italics\" style in Markdown by enclosing text in single asterisks or underscores, *italic text* or _italic text_ , for UI elements that have a label or title if you need to reference them in the documentation. For example, a title of a screen or page that will visit should be made italic in Markdown. Use - instead of * for bulleted lists. Indent four (4) spaces for nested lists (Github renders nesting in markdown with 2 spaces, but mkdocs needs 4). Example: - I am a list item - And I am a sub-item. Upload images to the 'assets' folder and reference them from there. For file naming, use underscores between words and prefix all file names with the page name, e.g. context_display_hints.jpg for the image showing how to set display hints in the context menu. Use the Admonition syntax to create notes like this (four-space indent required): Example: !!! note \"Helpful Tip\" I am a helpful tip! Result: Helpful Tip I am a helpful tip! Don'ts Do not leave any \"trailing spaces\" at the end of lines of content. Do not use \"curly\" quotes and apostrophes, use only \"straight\" quotes and apostrophes. Do not upload images that are excessively large in file size (remember, these docs are part of the software!)","title":"Documentation Style Guide"},{"location":"contributing/docs_style_guide/#documentation-style-guide","text":"","title":"Documentation Style Guide"},{"location":"contributing/docs_style_guide/#dos","text":"Use a GitHub Pull Request to submit documentation. Submit documentation formatted in Markdown format. Include a top-level heading for the whole page (using # ) Please add Markdown headings ( # and ## ) to the content sections. Use the \"bold/emphasis\" style in Markdown by enclosing text in double asterisks or underscores, **bold text** or __bold text__ , for UI elements that users will interact with. For example, a button label for a button that must be pressed should be made bold in Markdown. Use the \"italics\" style in Markdown by enclosing text in single asterisks or underscores, *italic text* or _italic text_ , for UI elements that have a label or title if you need to reference them in the documentation. For example, a title of a screen or page that will visit should be made italic in Markdown. Use - instead of * for bulleted lists. Indent four (4) spaces for nested lists (Github renders nesting in markdown with 2 spaces, but mkdocs needs 4). Example: - I am a list item - And I am a sub-item. Upload images to the 'assets' folder and reference them from there. For file naming, use underscores between words and prefix all file names with the page name, e.g. context_display_hints.jpg for the image showing how to set display hints in the context menu. Use the Admonition syntax to create notes like this (four-space indent required): Example: !!! note \"Helpful Tip\" I am a helpful tip! Result: Helpful Tip I am a helpful tip!","title":"Do's"},{"location":"contributing/docs_style_guide/#donts","text":"Do not leave any \"trailing spaces\" at the end of lines of content. Do not use \"curly\" quotes and apostrophes, use only \"straight\" quotes and apostrophes. Do not upload images that are excessively large in file size (remember, these docs are part of the software!)","title":"Don'ts"},{"location":"contributing/hacking-on-islandora/","text":"Hacking on Islandora 8 One of the goals of the Islandora 8 project is to lower the barrier to entry for working on and with Islandora. A shared, consistent environment amongst developers is one of the best ways to do this. To get started hacking on Islandora 8 with your very own development environment, all you need to do follow these steps: Install VirtualBox Install Vagrant Fork Islandora CLAW and clone it onto your machine using the main branch ~ $ git clone -b main https://github.com/your_github_name/islandora.git OR If you're already a developer and have previously forked and cloned Islandora CLAW, just add the main branch from Islandora-CLAW to your existing checkout: ~ $ cd /path/to/islandora /path/to/CLAW $ git remote add claw https://github.com/Islandora-CLAW/CLAW.git /path/to/CLAW $ git fetch claw /path/to/CLAW $ git checkout main Navigate into the install directory of your main checkout ~ $ cd /path/to/CLAW/install Build your vm using vagrant up /path/to/CLAW/install $ vagrant up Sit back and relax as your development environment is created for you! In a few minutes you\u2019ll have a brand new Islandora CLAW install that you can use and abuse as much as you\u2019d like. If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time. ~ $ cd /path/to/CLAW/install /path/to/CLAW/install $ vagrant destroy /path/to/CLAW/install $ vagrant up Logging in to your development environment You can ssh into your development environment at any time by doing the following: ~ $ cd /path/to/islandora/install /path/to/islandora/install $ vagrant ssh Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64) * Documentation: https://help.ubuntu.com/ System information disabled due to load higher than 1.0 Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud Last login: Fri Jul 17 13:51:38 2015 from 10.0.2.2 vagrant@islandora:~$ You'll be logged in as the vagrant user, with your GitHub repo in your home directory. Port Forwarding Many ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded: - Apache: 80 -> 8000 - Tomcat: 8080 -> 8080 - Karaf: 8181 -> 8181 - MySQL: 3306 -> 3306 At any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in VirtualBox. You can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this: config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache Important locations Drupal: /var/www/html/drupal Apache Logs: /var/log/apache2/error.log Tomcat: /var/lib/tomcat7 Logs: /var/log/tomcat7 Fedora 4: /var/lib/tomcat7/webapps/fcrepo Solr: /var/lib/tomcat7/webapps/solr BlazeGraph: /var/lib/tomcat7/webapps/bigdata FcrepoCamelToolbox: /var/lib/tomcat7/webapps/fcrepo-camel-toolbox Karaf: /opt/karaf Logs: /opt/karaf/data/log Configuration: /opt/karaf/etc CLAW: /home/vagrant/CLAW Shared folders By default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created. This folder points to your Islandora CLAW GitHub repo on your computer and is available at ~/CLAW ( /home/vagrant/CLAW ) on the virtual machine. On top of that, in Drupal, sites/all/modules/islandora is a symlink pointing to ~/CLAW/islandora . This has a few profound consequences: You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to drush cc all on occassion) When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine Compiling Camel Bundles Despite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven. The install directive is the default, so all one has to do is navigate to the appropriate directory and issue a mvn in the command line. For example, to compile the collection service: ~ $ cd /path/to/CLAW/Alpaca/services/collection-service /path/to/CLAW/Alpaca/serices/collection-service $ mvn The only caveat here is that this is best done on the virtual machine itself. While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to mvn install . So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine. So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user. If for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository. In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again. The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing /opt/karaf/bin/client < ~/islandora/install/karaf/monitor.script .","title":"Hacking on Islandora"},{"location":"contributing/hacking-on-islandora/#hacking-on-islandora-8","text":"One of the goals of the Islandora 8 project is to lower the barrier to entry for working on and with Islandora. A shared, consistent environment amongst developers is one of the best ways to do this. To get started hacking on Islandora 8 with your very own development environment, all you need to do follow these steps: Install VirtualBox Install Vagrant Fork Islandora CLAW and clone it onto your machine using the main branch ~ $ git clone -b main https://github.com/your_github_name/islandora.git OR If you're already a developer and have previously forked and cloned Islandora CLAW, just add the main branch from Islandora-CLAW to your existing checkout: ~ $ cd /path/to/islandora /path/to/CLAW $ git remote add claw https://github.com/Islandora-CLAW/CLAW.git /path/to/CLAW $ git fetch claw /path/to/CLAW $ git checkout main Navigate into the install directory of your main checkout ~ $ cd /path/to/CLAW/install Build your vm using vagrant up /path/to/CLAW/install $ vagrant up Sit back and relax as your development environment is created for you! In a few minutes you\u2019ll have a brand new Islandora CLAW install that you can use and abuse as much as you\u2019d like. If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time. ~ $ cd /path/to/CLAW/install /path/to/CLAW/install $ vagrant destroy /path/to/CLAW/install $ vagrant up","title":"Hacking on Islandora 8"},{"location":"contributing/hacking-on-islandora/#logging-in-to-your-development-environment","text":"You can ssh into your development environment at any time by doing the following: ~ $ cd /path/to/islandora/install /path/to/islandora/install $ vagrant ssh Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64) * Documentation: https://help.ubuntu.com/ System information disabled due to load higher than 1.0 Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud Last login: Fri Jul 17 13:51:38 2015 from 10.0.2.2 vagrant@islandora:~$ You'll be logged in as the vagrant user, with your GitHub repo in your home directory.","title":"Logging in to your development environment"},{"location":"contributing/hacking-on-islandora/#port-forwarding","text":"Many ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded: - Apache: 80 -> 8000 - Tomcat: 8080 -> 8080 - Karaf: 8181 -> 8181 - MySQL: 3306 -> 3306 At any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in VirtualBox. You can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this: config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache","title":"Port Forwarding"},{"location":"contributing/hacking-on-islandora/#important-locations","text":"Drupal: /var/www/html/drupal Apache Logs: /var/log/apache2/error.log Tomcat: /var/lib/tomcat7 Logs: /var/log/tomcat7 Fedora 4: /var/lib/tomcat7/webapps/fcrepo Solr: /var/lib/tomcat7/webapps/solr BlazeGraph: /var/lib/tomcat7/webapps/bigdata FcrepoCamelToolbox: /var/lib/tomcat7/webapps/fcrepo-camel-toolbox Karaf: /opt/karaf Logs: /opt/karaf/data/log Configuration: /opt/karaf/etc CLAW: /home/vagrant/CLAW","title":"Important locations"},{"location":"contributing/hacking-on-islandora/#shared-folders","text":"By default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created. This folder points to your Islandora CLAW GitHub repo on your computer and is available at ~/CLAW ( /home/vagrant/CLAW ) on the virtual machine. On top of that, in Drupal, sites/all/modules/islandora is a symlink pointing to ~/CLAW/islandora . This has a few profound consequences: You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to drush cc all on occassion) When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine","title":"Shared folders"},{"location":"contributing/hacking-on-islandora/#compiling-camel-bundles","text":"Despite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven. The install directive is the default, so all one has to do is navigate to the appropriate directory and issue a mvn in the command line. For example, to compile the collection service: ~ $ cd /path/to/CLAW/Alpaca/services/collection-service /path/to/CLAW/Alpaca/serices/collection-service $ mvn The only caveat here is that this is best done on the virtual machine itself. While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to mvn install . So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine. So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user. If for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository. In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again. The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing /opt/karaf/bin/client < ~/islandora/install/karaf/monitor.script .","title":"Compiling Camel Bundles"},{"location":"contributing/readme_template/","text":"# ![Alt text](Mascot Image) Repository Name [![Minimum PHP Version](link)](link) [![Build Status](link)](link) [![Contribution Guidelines](http://img.shields.io/badge/CONTRIBUTING-Guidelines-blue.svg)](./CONTRIBUTING.md) [![LICENSE](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](./LICENSE) [![codecov](link)](link) ## Introduction A brief introduction and summary of the module. ## Requirements This module requires the following modules/libraries: * [Name](Link) * [Name](Link) * Any * Requirements ## Installation Installations instructions. ## Configuration Describe path to configuration. Include a screenshot of configuration page. When using your choice of screenshot software, resize your browser first to avoid wide screenshots. Here are a few browser extension examples to take screenshots. - [Fireshots](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg) - [Nimbus](https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj) To upload the image drag the image into the comment section of an existing Pull Request. This will generate the image URL link for you ![Configuration Screenshot](https://user-images.githubusercontent.com/2857697/39014759-e2ef9c1e-43e0-11e8-921c-c2a3234d65d2.jpg) Video example on [How to attach an Image in README.md file with Github](https://youtu.be/wVHJtL-y7P0) ## Other Sections As Needed Sections specific to this repo, but not found in all repos, should go here. ## Documentation Further documentation for this module is available on the [Islandora 8 documentation site](https://islandora.github.io/documentation/). ## Troubleshooting/Issues Having problems or solved a problem? Check out the Islandora google groups for a solution. - [Islandora Group](https://groups.google.com/forum/?hl=en&fromgroups#!forum/islandora) - [Islandora Dev Group](https://groups.google.com/forum/?hl=en&fromgroups#!forum/islandora-dev) ## FAQ Q. Is this normal? A. Yes. This is normal. Why ... ## Maintainers/Sponsors Current maintainers: - [Maintainer Name](https://github.com/maintainer_github) - [Another Maintainer](https://github.com/maintainer_github) This project has been sponsored by: - Some really awesome sponsor ## Development If you would like to contribute, please get involved by attending our weekly [Tech Call](https://github.com/Islandora/documentation/wiki). We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation [Contributor License Agreement](http://islandora.ca/sites/default/files/islandora_cla.pdf) or [Corporate Contributor License Agreement](http://islandora.ca/sites/default/files/islandora_ccla.pdf). Please see the [Contributors](http://islandora.ca/resources/contributors) pages on Islandora.ca for more information. We recommend using the [islandora-playbook](https://github.com/Islandora-Devops/islandora-playbook) to get started. If you want to pull down the submodules for development, don't forget to run `git submodule update --init --recursive` after cloning. Also include any Travis gotcha's here. ## License [Name](link). GPLv2 for Drupal modules. MIT for other modules.","title":"Readme template"},{"location":"installation/component_overview/","text":"Component Overview A functioning Islandora 8 Stack is made up of dozens of components working in synchronization with each other to store information in your repository, manage that information, and disseminate it intelligently to users. Whether running an installation using the provided Ansible playbook or installing the stack manually, it may be helpful to have a brief overview of all the components we're going to need, in the order we're going to install them, as well as a brief introduction to each component's installation and configuration process. This list includes four different kinds of components: Components which are hard-required (such as Drupal and the Islandora module) Components for which defaults are provided but which can be swapped out (such as the software managing databases, or the repository's storage system) Components that can't easily be swapped out but are not necessarily required (such as using Solr as the site's internal search engine) Components which do not have official alternatives and are not necessarily required, but will likely exist on the vast majority of Islandora 8 installations (such as Alpaca and Crayfish) The Webserver Stack - Apache, PHP, and MySQL/PostgreSQL Combined together, Apache, PHP, and MySQL/PostgreSQL comprise a LAMP or LAPP server used to provide end-user-facing components - namely, the website. Apache is the webserver that will serve up webpages to the public. It will also manage some internal funcionality provided by Crayfish, and will expose Cantaloupe to the public. We\u2019ll be making changes to the VirtualHost entry, enabling some modules, and modifying the ports configuration. The VirtualHost entry will eventually be modified when we need to expose other services like Cantaloupe to the public. PHP is the runtime interpreter for all the code Drupal and Crayfish need to be processed. By default, installing PHP 7.2 will give us a command-line interpreter, as well as an interpreter for Apache. We\u2019re going to install several PHP modules required and/or useful for the components that make use of PHP. MySQL and PostgreSQL are database management systems that we will use to store information for many different components like Drupal and Fedora. By default, the Ansible playbook installs MySQL, though this can be switched to PostgreSQL. The manual installation guide recommends and walks through installing and using PostgreSQL. The Front-Facing CDM - Composer, Drush, and Drupal Composer will be used to install both Drupal and Drush simultaneously using Islandora's fork of the drupal-project repository. Composer is an installer and dependency manager for PHP projects. We're going to need it to install components for any PHP code we need to make use of, including Drupal and Crayfish. Drush and Drupal are installed simultaneously using drupal-project . Drupal will serve up webpages and manage Islandora content, and Drush will help us get some things done from the command-line. The Web Application Server - Tomcat and Cantaloupe Several applets will be deployed via their .war files into Tomcat, including Fedora and Cantaloupe. Tomcat serves up webpages and other kinds of content much like Apache, but is specifically designed to deploy Java applications as opposed to running PHP code. Cantaloupe is an image tileserver that Islandora will connect to and use to serve up extremely large images in a way that doesn't have an adverse effect on the overall system. The Back-End File Management Repository - Fedora, Syn, and Blazegraph Fedora will be installed in its own section, rather than as part of the Tomcat installation, as the installation process is rather involved and requires some authorization pieces to be set up in order to connect them back to Drupal and other components. Fedora is the default backend repository that Islandora content will be synchronized with and stored in. A great deal of configuration will be required to get it up and running, including ensuring a database is created and accessible. Syn is the authorization piece that allows Fedora to connect to other components. Blazegraph will store representative graph data about the repository that can be queried using SPARQL. Some configuration will also be required to link it back to Fedora, as well as to ensure it is being properly indexed. The Search Engine - Solr and search_api_solr The installation of Solr itself is rather straightforward, but a configuration will have to be generated and applied from the Drupal side. Solr will be installed as a standalone application. Nothing of particular importance needs to happen here; the configuration will be applied when search_api_solr is installed. search_api_solr is the Drupal module that implements the Solr API for Drupal-side searches. After installing and configuring the module, the drush solr-gsc command will be used to generate Solr configs, and these configs will be moved to the Solr configuration location. The Asynchronous Background Services - Crayfish Crayfish is a series of microservices that perform different asynchronous tasks kicked off by Islandora. It contains a series of submodules that will be installed via Composer. Later, these configured components will be connected to Alpaca. The Broker Connecting Everything - Karaf and Alpaca Karaf \u2019s job is similar to Tomcat, except where Tomcat is a web-accessible endpoint for Java applets, Karaf is simply meant to be a container for system-level applets to communicate via its OSGI. Alpaca is one such applet; it will broker messages between Fedora and Drupal, and between Drupal and various derivative generation applications. Alpaca contains Karaf services to manage moving information between Islandora, Fedora, and Blazegraph as well as kicking off derivative services in Crayfish. These will be configured to broker between Drupal and Fedora using an ActiveMQ queue. Finalized Drupal Configurations Drupal configuration exists as a series of .yaml files that can either be created in a feature, or exported from Drupal using the content_sync module. It can also be manually entered in via the UI. We're going to place configuration in a few different ways; Some content will be synchronized onto the site, and some core configurations from the main Islandora module will need to be run in order to facilitate ingest.","title":"Component Overview"},{"location":"installation/component_overview/#component-overview","text":"A functioning Islandora 8 Stack is made up of dozens of components working in synchronization with each other to store information in your repository, manage that information, and disseminate it intelligently to users. Whether running an installation using the provided Ansible playbook or installing the stack manually, it may be helpful to have a brief overview of all the components we're going to need, in the order we're going to install them, as well as a brief introduction to each component's installation and configuration process. This list includes four different kinds of components: Components which are hard-required (such as Drupal and the Islandora module) Components for which defaults are provided but which can be swapped out (such as the software managing databases, or the repository's storage system) Components that can't easily be swapped out but are not necessarily required (such as using Solr as the site's internal search engine) Components which do not have official alternatives and are not necessarily required, but will likely exist on the vast majority of Islandora 8 installations (such as Alpaca and Crayfish)","title":"Component Overview"},{"location":"installation/component_overview/#the-webserver-stack-apache-php-and-mysqlpostgresql","text":"Combined together, Apache, PHP, and MySQL/PostgreSQL comprise a LAMP or LAPP server used to provide end-user-facing components - namely, the website. Apache is the webserver that will serve up webpages to the public. It will also manage some internal funcionality provided by Crayfish, and will expose Cantaloupe to the public. We\u2019ll be making changes to the VirtualHost entry, enabling some modules, and modifying the ports configuration. The VirtualHost entry will eventually be modified when we need to expose other services like Cantaloupe to the public. PHP is the runtime interpreter for all the code Drupal and Crayfish need to be processed. By default, installing PHP 7.2 will give us a command-line interpreter, as well as an interpreter for Apache. We\u2019re going to install several PHP modules required and/or useful for the components that make use of PHP. MySQL and PostgreSQL are database management systems that we will use to store information for many different components like Drupal and Fedora. By default, the Ansible playbook installs MySQL, though this can be switched to PostgreSQL. The manual installation guide recommends and walks through installing and using PostgreSQL.","title":"The Webserver Stack - Apache, PHP, and MySQL/PostgreSQL"},{"location":"installation/component_overview/#the-front-facing-cdm-composer-drush-and-drupal","text":"Composer will be used to install both Drupal and Drush simultaneously using Islandora's fork of the drupal-project repository. Composer is an installer and dependency manager for PHP projects. We're going to need it to install components for any PHP code we need to make use of, including Drupal and Crayfish. Drush and Drupal are installed simultaneously using drupal-project . Drupal will serve up webpages and manage Islandora content, and Drush will help us get some things done from the command-line.","title":"The Front-Facing CDM - Composer, Drush, and Drupal"},{"location":"installation/component_overview/#the-web-application-server-tomcat-and-cantaloupe","text":"Several applets will be deployed via their .war files into Tomcat, including Fedora and Cantaloupe. Tomcat serves up webpages and other kinds of content much like Apache, but is specifically designed to deploy Java applications as opposed to running PHP code. Cantaloupe is an image tileserver that Islandora will connect to and use to serve up extremely large images in a way that doesn't have an adverse effect on the overall system.","title":"The Web Application Server - Tomcat and Cantaloupe"},{"location":"installation/component_overview/#the-back-end-file-management-repository-fedora-syn-and-blazegraph","text":"Fedora will be installed in its own section, rather than as part of the Tomcat installation, as the installation process is rather involved and requires some authorization pieces to be set up in order to connect them back to Drupal and other components. Fedora is the default backend repository that Islandora content will be synchronized with and stored in. A great deal of configuration will be required to get it up and running, including ensuring a database is created and accessible. Syn is the authorization piece that allows Fedora to connect to other components. Blazegraph will store representative graph data about the repository that can be queried using SPARQL. Some configuration will also be required to link it back to Fedora, as well as to ensure it is being properly indexed.","title":"The Back-End File Management Repository - Fedora, Syn, and Blazegraph"},{"location":"installation/component_overview/#the-search-engine-solr-and-search_api_solr","text":"The installation of Solr itself is rather straightforward, but a configuration will have to be generated and applied from the Drupal side. Solr will be installed as a standalone application. Nothing of particular importance needs to happen here; the configuration will be applied when search_api_solr is installed. search_api_solr is the Drupal module that implements the Solr API for Drupal-side searches. After installing and configuring the module, the drush solr-gsc command will be used to generate Solr configs, and these configs will be moved to the Solr configuration location.","title":"The Search Engine - Solr and search_api_solr"},{"location":"installation/component_overview/#the-asynchronous-background-services-crayfish","text":"Crayfish is a series of microservices that perform different asynchronous tasks kicked off by Islandora. It contains a series of submodules that will be installed via Composer. Later, these configured components will be connected to Alpaca.","title":"The Asynchronous Background Services - Crayfish"},{"location":"installation/component_overview/#the-broker-connecting-everything-karaf-and-alpaca","text":"Karaf \u2019s job is similar to Tomcat, except where Tomcat is a web-accessible endpoint for Java applets, Karaf is simply meant to be a container for system-level applets to communicate via its OSGI. Alpaca is one such applet; it will broker messages between Fedora and Drupal, and between Drupal and various derivative generation applications. Alpaca contains Karaf services to manage moving information between Islandora, Fedora, and Blazegraph as well as kicking off derivative services in Crayfish. These will be configured to broker between Drupal and Fedora using an ActiveMQ queue.","title":"The Broker Connecting Everything - Karaf and Alpaca"},{"location":"installation/component_overview/#finalized-drupal-configurations","text":"Drupal configuration exists as a series of .yaml files that can either be created in a feature, or exported from Drupal using the content_sync module. It can also be manually entered in via the UI. We're going to place configuration in a few different ways; Some content will be synchronized onto the site, and some core configurations from the main Islandora module will need to be run in order to facilitate ingest.","title":"Finalized Drupal Configurations"},{"location":"installation/docker-compose/","text":"Install Islandora on Docker (ISLE) Overview This page describes using ISLE-DC to launch Islandora as a suite of Docker Containers (ISLE). This is an alternative to the Islandora Ansible Playbook , which creates the Islandora stack on a single virtual machine. At the end of this tutorial, you will have a local development environment, and be able to use Docker to launch, shut down, and edit your environment. What is ISLE? ISLE, or ISLandora Enterprise, is a community initiative to ease the installation and maintenance of Islandora by using Docker. It was an initiative of the Islandora Collaboration Group, first using Islandora 7.x, and later with Islandora 8.x. The code for the Islandora Enterprise 8 Prototype (ISLE 8, sometimes just ISLE) is now under the purview of the Islandora Foundation. ISLE may also refer to the ISLE system for Islandora 7 . Why use Docker? Docker is a way to separate out the \"state\" of your site (i.e. all the content, files, and configurations that you've entered) from the underlying software that runs it (e.g. webserver, database engine, etc). This allows for easier upgrades, faster development, and more flexible deployment. Where is ISLE 8? ISLE 8 is a suite of Docker containers that run the various components of Islandora required by Islandora Defaults: drupal, fedora, solr, alpaca, crayfish, matomo, etc. The individual containers are created (and automatically pushed to Docker Hub) by ISLE BuildKit . How do I install ISLE? Install ISLE locally or remotely using the Docker Compose scripts (ISLE-DC) at ( Islandora-Devops/isle-dc ). These are instructions to pull down and configure the necessary containers from Docker Hub. Unlike the Islandora Playbook , this method does not require Ansible, or (for local installations) VirtualBox. Like the Playbook, it has been optimized for development environments but in theory could be used in production. These instructions describe using ISLE-DC locally to create a development Islandora sandbox. More detailed configuration options are described in the project's README . Requirements A computer that can run Docker (version 19.x+) and has at least 8GB of RAM (ideally 16GB) An administrator account (Mac OS) Apple Developer Tools Windows (recommended setup) Windows 10 Windows Subsystem for Linux v. 2 (WSL 2) Ubuntu 20.04 running on WSL 2 GNU make sudo apt update sudo apt install make Docker Desktop for Windows, using the WSL 2 based engine (Settings > General) and with the WSL integration active for Ubuntu (Settings > Resources > WSL integration) If using make dev , see the README for other requirements. What are we missing? Are you, or your computer, new to spinning up development sandboxes? Do you have wisdom about installing make on Windows? We suspect these requirements may be incomplete and your experience would be appreciated at Issue #1640 . Installing Docker To see if you have Docker installed, type docker --version in a terminal. If you need to install Docker, we recommend using the application Docker Desktop . It provides a GUI for managing Docker container in Windows and MacOS, along with the Docker engine and suite of command-line tools. Linux users don't get a desktop client, but can download the Engine and command-line tools from that same link. There is also a legacy project called Docker Toolbox which may be of interest if your machine cannot run Docker Desktop, or if you already have it installed. Download Docker Memory, Processors, and Swap Requirements To run ISLE on Docker Desktop, you must increase the resources allocated to the software. See Docker docs on setting resources on Windows (see note on how to allocate/restrict memory when using WSL 2) or setting resources on Mac . CPUs (processors) : The CPUs allowed to Docker Desktop are still shared with the host machine, so increasing this to the maximum value should allow both the Docker containers and your host machine to run simultaneously. Memory (RAM) : This memory is completely dedicated to Docker while Docker Desktop is running, so do not allocate more than you can spare and still run your host machine. Windows users may not require as much memory for Docker as Mac users. Current suggestions for memory allocated to Docker Desktop are below, but please edit this document if you have new information. Sandbox ( make ): 4GB Development ( make dev ): 8GB Production or production-like development: 16GB Swap : Swap space is space borrowed from your hard disk drive to serve as makeshift RAM as needed. If you cannot provide as much RAM as you would like, increase this as is reasonable given your free disk space. Launching Islandora with Docker Summary: Using git, clone the isle-dc project. In that directory, enter the command make (or make dev - see note) to build the docker infrastructure. Then use the command docker-compose up -d to start the containers. ISLE-DC variants: make vs make dev The make command alone will spin up a sandbox-like version of ISLE, but only with a front end. The code files will be inaccessible, and you will not be able to install additional modules or themes. The make dev command creates a full-fleged development environment. It will copy the active Drupal codebase locally in a way that is also live to the ISLE site. This method takes longer (and may require multiple retries if your internet connection is spotty) but is required if you will be testing pull requests or writing code. git clone https://github.com/islandora-devops/isle-dc cd isle-dc make Results of make : isle-dc$ make % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 3562 100 3562 0 0 12779 0 --:--:-- --:--:-- --:--:-- 12812 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1708 100 1708 0 0 6809 0 --:--:-- --:--:-- --:--:-- 6832 docker-compose pull Pulling activemq ... done Pulling alpaca ... done Pulling blazegraph ... done Pulling cantaloupe ... done Pulling fcrepo ... done Pulling fits ... done Pulling crayfits ... done Pulling gemini ... done Pulling homarus ... done Pulling houdini ... done Pulling hypercube ... done Pulling mariadb ... done Pulling matomo ... done Pulling milliner ... done Pulling recast ... done Pulling solr ... done Pulling drupal ... done Pulling traefik ... done Pulling watchtower ... done Troubleshooting - Docker Versions If you get an error such as: ERROR: Version in \"./docker-compose.activemq.yml\" is unsupported. , then you need to upgrade Docker. Enter the command make clean before re-attempting to make . Troubleshooting - re-attempting make If make fails for any reason, enter make clean before attempting to make again. If not, you may see an error such as: ERROR: Top level object in './docker-compose.yml' needs to be an object not '<class 'NoneType'>'. Troubleshooting - docker containers exit without warning If you notice some Docker containers drop (exited(0)), and (in Docker Desktop) the isle-dc app icon is yellow instead of green, try increasing the resources allocated to Docker (see note above). Development version - access the codebase If you used make dev , then you will have a new directory in the current (isle-dc) directory named codebase , containing the live Drupal root folder (containing your Drupal's composer files and the web/ subdirectory). Once make has successfully completed, launch the ISLE containers using docker-compose up . The -d flag allows you to return to using the command line. Without it, your shell will be stuck in the docker-compose process as long as the containers are running. docker-compose up -d Visiting your Islandora site Direct a browser to https://islandora-isle-dc.traefik.me/ (yes, it's awkward and there's a ticket about it ). If your containers are still \"spinning up\", you will see a white screen with the words \"Bad Gateway\". This often lasts 2-5 minutes, and should be shorter for subsequent launches. When all containers are ready, you should see a basic Drupal login screen. To log in: username: admin password: password Note docker logs -tf isle-dc_drupal_1 shows Docker logs for the \"drupal\" container, which will continue to have new log entries as long as the drupal box is still starting up. When it gets to confd using 'env' backend , you're done. docker-compose logs is like a firehose, showing the log messages from all containers. Spinning down your Islandora site To shut down the containers without destroying your site, use docker-compose down . To also destroy your \"state\" (i.e. your content, your database, your files), use docker-compose down -v . Editing Code in Docker If you used make dev then the drupal root folder is in a new directory in the isle-dc folder named codebase . This is live and editable in whatever development environment you would like. If you just did make , you will need to spin down your containers with -v to destroy your state before starting a new one with make dev . Editing code for the back-end processes (alpaca, milliner, etc) is more complicated. Please ask on the #isle Slack channel and help us improve this documentation! Testing a Pull Request Islandora modules in the codebase/web/contrib/modules folder are already set up with git and the origin remote is the canonical Islandora repository. You can follow the command-line instructions for testing pull requests available on Github. When finished, don't forget to git checkout main (or the default branch if not named main) so you can pull new code. Updating ISLE Documentation to come - see Issue #121 Drupal Updates to come Module Updates (non-Islandora) to come Module Updates (Islandora) to come Backend Providers (solr, mariadb, etc) to come Updating the whole isle-dc repo to come","title":"Docker Compose (ISLE-DC)"},{"location":"installation/docker-compose/#install-islandora-on-docker-isle","text":"","title":"Install Islandora on Docker (ISLE)"},{"location":"installation/docker-compose/#overview","text":"This page describes using ISLE-DC to launch Islandora as a suite of Docker Containers (ISLE). This is an alternative to the Islandora Ansible Playbook , which creates the Islandora stack on a single virtual machine. At the end of this tutorial, you will have a local development environment, and be able to use Docker to launch, shut down, and edit your environment.","title":"Overview"},{"location":"installation/docker-compose/#what-is-isle","text":"ISLE, or ISLandora Enterprise, is a community initiative to ease the installation and maintenance of Islandora by using Docker. It was an initiative of the Islandora Collaboration Group, first using Islandora 7.x, and later with Islandora 8.x. The code for the Islandora Enterprise 8 Prototype (ISLE 8, sometimes just ISLE) is now under the purview of the Islandora Foundation. ISLE may also refer to the ISLE system for Islandora 7 .","title":"What is ISLE?"},{"location":"installation/docker-compose/#why-use-docker","text":"Docker is a way to separate out the \"state\" of your site (i.e. all the content, files, and configurations that you've entered) from the underlying software that runs it (e.g. webserver, database engine, etc). This allows for easier upgrades, faster development, and more flexible deployment.","title":"Why use Docker?"},{"location":"installation/docker-compose/#where-is-isle-8","text":"ISLE 8 is a suite of Docker containers that run the various components of Islandora required by Islandora Defaults: drupal, fedora, solr, alpaca, crayfish, matomo, etc. The individual containers are created (and automatically pushed to Docker Hub) by ISLE BuildKit .","title":"Where is ISLE 8?"},{"location":"installation/docker-compose/#how-do-i-install-isle","text":"Install ISLE locally or remotely using the Docker Compose scripts (ISLE-DC) at ( Islandora-Devops/isle-dc ). These are instructions to pull down and configure the necessary containers from Docker Hub. Unlike the Islandora Playbook , this method does not require Ansible, or (for local installations) VirtualBox. Like the Playbook, it has been optimized for development environments but in theory could be used in production. These instructions describe using ISLE-DC locally to create a development Islandora sandbox. More detailed configuration options are described in the project's README .","title":"How do I install ISLE?"},{"location":"installation/docker-compose/#requirements","text":"A computer that can run Docker (version 19.x+) and has at least 8GB of RAM (ideally 16GB) An administrator account (Mac OS) Apple Developer Tools Windows (recommended setup) Windows 10 Windows Subsystem for Linux v. 2 (WSL 2) Ubuntu 20.04 running on WSL 2 GNU make sudo apt update sudo apt install make Docker Desktop for Windows, using the WSL 2 based engine (Settings > General) and with the WSL integration active for Ubuntu (Settings > Resources > WSL integration) If using make dev , see the README for other requirements. What are we missing? Are you, or your computer, new to spinning up development sandboxes? Do you have wisdom about installing make on Windows? We suspect these requirements may be incomplete and your experience would be appreciated at Issue #1640 .","title":"Requirements"},{"location":"installation/docker-compose/#installing-docker","text":"To see if you have Docker installed, type docker --version in a terminal. If you need to install Docker, we recommend using the application Docker Desktop . It provides a GUI for managing Docker container in Windows and MacOS, along with the Docker engine and suite of command-line tools. Linux users don't get a desktop client, but can download the Engine and command-line tools from that same link. There is also a legacy project called Docker Toolbox which may be of interest if your machine cannot run Docker Desktop, or if you already have it installed. Download Docker Memory, Processors, and Swap Requirements To run ISLE on Docker Desktop, you must increase the resources allocated to the software. See Docker docs on setting resources on Windows (see note on how to allocate/restrict memory when using WSL 2) or setting resources on Mac . CPUs (processors) : The CPUs allowed to Docker Desktop are still shared with the host machine, so increasing this to the maximum value should allow both the Docker containers and your host machine to run simultaneously. Memory (RAM) : This memory is completely dedicated to Docker while Docker Desktop is running, so do not allocate more than you can spare and still run your host machine. Windows users may not require as much memory for Docker as Mac users. Current suggestions for memory allocated to Docker Desktop are below, but please edit this document if you have new information. Sandbox ( make ): 4GB Development ( make dev ): 8GB Production or production-like development: 16GB Swap : Swap space is space borrowed from your hard disk drive to serve as makeshift RAM as needed. If you cannot provide as much RAM as you would like, increase this as is reasonable given your free disk space.","title":"Installing Docker"},{"location":"installation/docker-compose/#launching-islandora-with-docker","text":"Summary: Using git, clone the isle-dc project. In that directory, enter the command make (or make dev - see note) to build the docker infrastructure. Then use the command docker-compose up -d to start the containers. ISLE-DC variants: make vs make dev The make command alone will spin up a sandbox-like version of ISLE, but only with a front end. The code files will be inaccessible, and you will not be able to install additional modules or themes. The make dev command creates a full-fleged development environment. It will copy the active Drupal codebase locally in a way that is also live to the ISLE site. This method takes longer (and may require multiple retries if your internet connection is spotty) but is required if you will be testing pull requests or writing code. git clone https://github.com/islandora-devops/isle-dc cd isle-dc make Results of make : isle-dc$ make % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 3562 100 3562 0 0 12779 0 --:--:-- --:--:-- --:--:-- 12812 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1708 100 1708 0 0 6809 0 --:--:-- --:--:-- --:--:-- 6832 docker-compose pull Pulling activemq ... done Pulling alpaca ... done Pulling blazegraph ... done Pulling cantaloupe ... done Pulling fcrepo ... done Pulling fits ... done Pulling crayfits ... done Pulling gemini ... done Pulling homarus ... done Pulling houdini ... done Pulling hypercube ... done Pulling mariadb ... done Pulling matomo ... done Pulling milliner ... done Pulling recast ... done Pulling solr ... done Pulling drupal ... done Pulling traefik ... done Pulling watchtower ... done Troubleshooting - Docker Versions If you get an error such as: ERROR: Version in \"./docker-compose.activemq.yml\" is unsupported. , then you need to upgrade Docker. Enter the command make clean before re-attempting to make . Troubleshooting - re-attempting make If make fails for any reason, enter make clean before attempting to make again. If not, you may see an error such as: ERROR: Top level object in './docker-compose.yml' needs to be an object not '<class 'NoneType'>'. Troubleshooting - docker containers exit without warning If you notice some Docker containers drop (exited(0)), and (in Docker Desktop) the isle-dc app icon is yellow instead of green, try increasing the resources allocated to Docker (see note above). Development version - access the codebase If you used make dev , then you will have a new directory in the current (isle-dc) directory named codebase , containing the live Drupal root folder (containing your Drupal's composer files and the web/ subdirectory). Once make has successfully completed, launch the ISLE containers using docker-compose up . The -d flag allows you to return to using the command line. Without it, your shell will be stuck in the docker-compose process as long as the containers are running. docker-compose up -d","title":"Launching Islandora with Docker"},{"location":"installation/docker-compose/#visiting-your-islandora-site","text":"Direct a browser to https://islandora-isle-dc.traefik.me/ (yes, it's awkward and there's a ticket about it ). If your containers are still \"spinning up\", you will see a white screen with the words \"Bad Gateway\". This often lasts 2-5 minutes, and should be shorter for subsequent launches. When all containers are ready, you should see a basic Drupal login screen. To log in: username: admin password: password Note docker logs -tf isle-dc_drupal_1 shows Docker logs for the \"drupal\" container, which will continue to have new log entries as long as the drupal box is still starting up. When it gets to confd using 'env' backend , you're done. docker-compose logs is like a firehose, showing the log messages from all containers.","title":"Visiting your Islandora site"},{"location":"installation/docker-compose/#spinning-down-your-islandora-site","text":"To shut down the containers without destroying your site, use docker-compose down . To also destroy your \"state\" (i.e. your content, your database, your files), use docker-compose down -v .","title":"Spinning down your Islandora site"},{"location":"installation/docker-compose/#editing-code-in-docker","text":"If you used make dev then the drupal root folder is in a new directory in the isle-dc folder named codebase . This is live and editable in whatever development environment you would like. If you just did make , you will need to spin down your containers with -v to destroy your state before starting a new one with make dev . Editing code for the back-end processes (alpaca, milliner, etc) is more complicated. Please ask on the #isle Slack channel and help us improve this documentation!","title":"Editing Code in Docker"},{"location":"installation/docker-compose/#testing-a-pull-request","text":"Islandora modules in the codebase/web/contrib/modules folder are already set up with git and the origin remote is the canonical Islandora repository. You can follow the command-line instructions for testing pull requests available on Github. When finished, don't forget to git checkout main (or the default branch if not named main) so you can pull new code.","title":"Testing a Pull Request"},{"location":"installation/docker-compose/#updating-isle","text":"Documentation to come - see Issue #121","title":"Updating ISLE"},{"location":"installation/docker-compose/#drupal-updates","text":"to come","title":"Drupal Updates"},{"location":"installation/docker-compose/#module-updates-non-islandora","text":"to come","title":"Module Updates (non-Islandora)"},{"location":"installation/docker-compose/#module-updates-islandora","text":"to come","title":"Module Updates (Islandora)"},{"location":"installation/docker-compose/#backend-providers-solr-mariadb-etc","text":"to come","title":"Backend Providers (solr, mariadb, etc)"},{"location":"installation/docker-compose/#updating-the-whole-isle-dc-repo","text":"to come","title":"Updating the whole isle-dc repo"},{"location":"installation/playbook/","text":"Islandora Playbook The Islandora Playbook ( Islandora-Devops/islandora-playbook ) is a tool for installing Islandora Defaults on a single virtual machine. It can be used both as a Vagrant project to create a local development environment, and/or as an Ansible playbook which can provision a remote server. Note This repository has two active branches. The main branch's playbook will install the latest release of Islandora and its components. The dev branch, when configured to use Ansible, will provision with the most recent code of Islandora and its components. Quick-start mode: The fastest way to spin up a local Vagrant version of Islandora Defaults is to use the Islandora Base Box, which is a packaged VM of the latest release of Islandora - including Islandora Defaults and all components. This is the default behaviour of the dev branch of the playbook. This method requires Vagrant and VirtualBox, but does not use Ansible. $ git clone -b dev https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook $ vagrant up This method results in an installation that does not contain the latest code changes. Requirements Download and install the following. VirtualBox and Vagrant are needed if creating local VMs. Ansible is only necessary if provisioning (not using quick-start mode described above): Virtual Box Vagrant (version 2.0 or higher required) Git OpenSSL Ansible (up to, and not past, 2.8.7) Installing Git, OpenSSL, and Ansible on Ubuntu/Debian Git and OpenSSL are available via apt . Ansible up to version 2.8.7. This is done best with pip , the python package manager: # Install git and openssl $ sudo apt-get install git $ sudo apt-get install openssl # If pip isn\u2019t already available, run the following commands to install it $ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py $ python get-pip.py --user # Install ansible $ pip install --user -Iv ansible==2.8.7 Installing Git, OpenSSL and Ansible on CentOS Git and OpenSSL are available via yum . Most everything else can be installed in the same way. $ sudo yum install git $ sudo yum install openssl # If pip isn\u2019t already available, run the following commands to install it $ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py $ python get-pip.py --user # Install ansible $ pip install --user -Iv ansible==2.8.7 Installing Git and Ansible on MacOS OpenSSL is already pre-installed on MacOS. Git can be installed using XCode's command line tools (see below). Python and Pip should be installed via the downloaded installer direct from the site (not shown below). For the installation of Ansible, consider using homebrew (see below). # Use xcode-select to install command line components, including git $ xcode-select --install # Install homebrew $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" # Use homebrew to install ansible $ brew install ansible@2.8.7 Installing a local development environment Clone the islandora-playbook , set the base box, and use vagrant up to automatically provision a local environment. This method uses Vagrant, VirtualBox, and Ansible. Before provisioning a local environment, you should likely double check that no required ports are currently in use. Clone the playbook For the most recent release: $ git clone -b main https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook For the bleeding edge: $ git clone -b dev https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook Set the base box To tell Vagrant which base box to use, set ISLANDORA_DISTRO. This can be done by editing the Vagrantfile or by setting a shell variable. Editing the Vagrantfile Open Vagrantfile (in the islandora-playbook directory) in a text editor, and find the following section. # Available boxes are 'islandora/8', ubuntu/bionic64' and 'centos/7' # Use 'ubuntu/bionic64' or 'centos/7' to build a dev environment from scratch. # Use 'islandora/8' if you just want to download a ready to run VM. $vagrantBox = ENV.fetch(\"ISLANDORA_DISTRO\", \"islandora/8\") To build a dev environment that is Ubuntu, change the last line of that section to: $vagrantBox = ENV.fetch(\"ISLANDORA_DISTRO\", \"ubuntu/bionic64\") To build a dev environment that is CentOS, change the last line of that section to: $vagrantBox = ENV.fetch(\"ISLANDORA_DISTRO\", \"centos/7\") Note that setting ISLANORA_DISTRO as a shell variable will override what is specified in the Vagrantfile. Setting ISLANDORA_DISTRO as a shell (environment) variable Or, an alternative to altering the Vagrantfile, you can set ISLANDORA_DISTRO by adding the following to .bashrc (on Ubuntu/Debian environments), or .bash_profile (on MacOS): export ISLANDORA_DISTRO=\"ubuntu/bionic64\" This will override what is written in the Vagrantfile. Spin up with Vagrant Before using vagrant up : If building a CentOS box, you also need to install the vbguest additions with vagrant plugin install vagrant-vbguest . If this is not your first time spinning up Islandora from this directory, and you want to get the latest code, you may want to clear cached ansible roles in roles/external rm -rf roles/external Then, to spin up the machine: vagrant up Installing a remote environment A remote environment can be provisioned by providing SSH credentials to claw-playbook and using the ansible-galaxy installer instead of Vagrant. Some preparation of configuration entries in the inventory also need to be changed to be aware of the particulars of your remote environment; this includes: Changing usernames and passwords to something more sensible than the default Changing IP addresses to use the remote machine's actual IP Changing Apache to serve at port 80 (as opposed to 8000, which we use for development purposes) We're going to build up this new remote environment configuration from the default provided Vagrant configuration. To start, take the inventory for the vagrant development environment and make a copy of it. Be sure to give it an appropriate name. Here we're using example . $ git clone https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook $ cp -r inventory/vagrant inventory/example Then you can update the following entries in the following files using your own information. If an entry does not exist in a file, just add it. Ansible will then use the value you provide instead of relying on its defaults. We're using changeme to represent passwords and assume the server will be available at example.org , but you'll want to provide your own values. group_vars/all/passwords.yml drupal_db_password: changeme drupal_account_pass: changeme islandora_db_root_password: changeme islandora_tomcat_password: changeme islandora_syn_token: changeme cantaloupe_admin_password: changeme group_vars/crayfish.yml crayfish_gemini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_houdini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_hypercube_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_drupal_base_url: http://example.org crayfish_milliner_gemini_base_url: http://example.org/gemini crayfish_homarus_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_drupal_base_url: http://example.org crayfish_recast_gemini_base_url: http://example.org/gemini group_vars/karaf.yml For Alpaca, only the token.value and various URLs are of particular importance, but the entire configuration chunk is provided here for convenience. alpaca_settings: - pid: ca.islandora.alpaca.http.client settings: token.value: changeme - pid: org.fcrepo.camel.indexing.triplestore settings: input.stream: activemq:topic:fedora triplestore.reindex.stream: activemq:queue:triplestore.reindex triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.triplestore settings: error.maxRedeliveries: 10 index.stream: activemq:queue:islandora-indexing-triplestore-index delete.stream: activemq:queue:islandora-indexing-triplestore-delete triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.fcrepo settings: error.maxRedeliveries: 5 node.stream: activemq:queue:islandora-indexing-fcrepo-content node.delete.stream: activemq:queue:islandora-indexing-fcrepo-delete media.stream: activemq:queue:islandora-indexing-fcrepo-media file.stream: activemq:queue:islandora-indexing-fcrepo-file file.delete.stream: activemq:queue:islandora-indexing-fcrepo-file-delete milliner.baseUrl: http://example.org/milliner/ gemini.baseUrl: http://example.org/gemini/ alpaca_blueprint_settings: - pid: ca.islandora.alpaca.connector.houdini in_stream: activemq:queue:islandora-connector-houdini derivative_service_url: http://example.org/houdini/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHoudini - pid: ca.islandora.alpaca.connector.homarus in_stream: activemq:queue:islandora-connector-homarus derivative_service_url: http://example.org/homarus/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHomarus group_vars/tomcat.yml fcrepo_allowed_external_content: - http://example.org/ cantaloupe_HttpResolver_BasicLookupStrategy_url_prefix: http://example.org/ group_vars/webserver/apache.yml This is where we specify that the webserver is listening on the default port 80, instead of the development machine port 8000. apache_listen_port: 80 group_vars/webserver/drupal.yml drupal_trusted_hosts: - ^localhost$ - example.org fedora_base_url: \"http://example.org:8080/fcrepo/rest/\" group_vars/webserver/general.yml openseadragon_iiiv_server: http://example.org:8080/cantaloupe/iiif/2 matomo_site_url: http://example.org hosts You'll need the SSH particulars for logging into your server in the hosts file. This example is set up to login as root using an SSH key. You'll need to get the details for logging into your remote server from your hosting provider (AWS, Digital Ocean, etc...) or your systems administrator if you're running the server in-house. See this page for more details about what you can put into a host file default ansible_host=example.org ansible_port=22 ansible_user=root ansible_ssh_private_key_file='/home/username/.ssh/id_rsa' Running the remote installer First, you'll want to get the ansible roles that are needed for the version of Islandora you are trying to install. This can be done with $ ansible-galaxy install -r requirements.yml Then, depending on the operating system installed on the remote environment, you can use the following command for Ubuntu 16.04 $ ansible-playbook -i inventory/production playbook.yml -e \"islandora_distro=ubuntu/xenial64\" or for CentOS 7 $ ansible-playbook -i inventory/production playbook.yml -e \"islandora_distro=centos/7\" Troubleshooting Out of date playbooks Ansible caches the code used to provision the environment, so if you've already installed once you may not be getting the latest version of things even if you've git pull 'd the latest playbook. The code is stored in roles/external , so if you want to clear it out you can remove these before attempting to provision an environment $ rm -rf roles/external Port clashes for local environments When provisioning using a local environment, you should be aware of any ports that are already in use by your computer that are also going to be used by Vagrant, as these may clash and cause problems during and after provisioning. These include: 8000 (Apache) 8080 (Tomcat) 3306 (MySQL) 5432 (PostgreSQL) 8983 (Solr) 8161 (ActiveMQ) 8081 (API-X) If there are port clashes for any of these, you will need to either find and replace them in the configuration .yml files under inventory/vagrant/group_vars , or provide new values for the different playbooks that support changing the ports (for example, postgresql_databases supports adding a port property which is currently simply unused). You will also need to replace the port forwarding values in Vagrantfile . Additionally, Ansible attempts to use port 2200 for SSH. If this port is already in use, your local environment cannot be provisioned. To change this, set a new value for ansible_port in inventory/vagrant/hosts . Help If you run into any issues installing the environment, do not hesitate to email the mailing list to ask for help. If you think you've stumbled across a bug in the installer, please create an issue in the Islandora 8 issue queue and give it an ansible tag.","title":"Ansible Playbook"},{"location":"installation/playbook/#islandora-playbook","text":"The Islandora Playbook ( Islandora-Devops/islandora-playbook ) is a tool for installing Islandora Defaults on a single virtual machine. It can be used both as a Vagrant project to create a local development environment, and/or as an Ansible playbook which can provision a remote server. Note This repository has two active branches. The main branch's playbook will install the latest release of Islandora and its components. The dev branch, when configured to use Ansible, will provision with the most recent code of Islandora and its components.","title":"Islandora Playbook"},{"location":"installation/playbook/#quick-start-mode","text":"The fastest way to spin up a local Vagrant version of Islandora Defaults is to use the Islandora Base Box, which is a packaged VM of the latest release of Islandora - including Islandora Defaults and all components. This is the default behaviour of the dev branch of the playbook. This method requires Vagrant and VirtualBox, but does not use Ansible. $ git clone -b dev https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook $ vagrant up This method results in an installation that does not contain the latest code changes.","title":"Quick-start mode:"},{"location":"installation/playbook/#requirements","text":"Download and install the following. VirtualBox and Vagrant are needed if creating local VMs. Ansible is only necessary if provisioning (not using quick-start mode described above): Virtual Box Vagrant (version 2.0 or higher required) Git OpenSSL Ansible (up to, and not past, 2.8.7)","title":"Requirements"},{"location":"installation/playbook/#installing-git-openssl-and-ansible-on-ubuntudebian","text":"Git and OpenSSL are available via apt . Ansible up to version 2.8.7. This is done best with pip , the python package manager: # Install git and openssl $ sudo apt-get install git $ sudo apt-get install openssl # If pip isn\u2019t already available, run the following commands to install it $ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py $ python get-pip.py --user # Install ansible $ pip install --user -Iv ansible==2.8.7","title":"Installing Git, OpenSSL, and Ansible on Ubuntu/Debian"},{"location":"installation/playbook/#installing-git-openssl-and-ansible-on-centos","text":"Git and OpenSSL are available via yum . Most everything else can be installed in the same way. $ sudo yum install git $ sudo yum install openssl # If pip isn\u2019t already available, run the following commands to install it $ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py $ python get-pip.py --user # Install ansible $ pip install --user -Iv ansible==2.8.7","title":"Installing Git, OpenSSL and Ansible on CentOS"},{"location":"installation/playbook/#installing-git-and-ansible-on-macos","text":"OpenSSL is already pre-installed on MacOS. Git can be installed using XCode's command line tools (see below). Python and Pip should be installed via the downloaded installer direct from the site (not shown below). For the installation of Ansible, consider using homebrew (see below). # Use xcode-select to install command line components, including git $ xcode-select --install # Install homebrew $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" # Use homebrew to install ansible $ brew install ansible@2.8.7","title":"Installing Git and Ansible on MacOS"},{"location":"installation/playbook/#installing-a-local-development-environment","text":"Clone the islandora-playbook , set the base box, and use vagrant up to automatically provision a local environment. This method uses Vagrant, VirtualBox, and Ansible. Before provisioning a local environment, you should likely double check that no required ports are currently in use.","title":"Installing a local development environment"},{"location":"installation/playbook/#clone-the-playbook","text":"For the most recent release: $ git clone -b main https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook For the bleeding edge: $ git clone -b dev https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook","title":"Clone the playbook"},{"location":"installation/playbook/#set-the-base-box","text":"To tell Vagrant which base box to use, set ISLANDORA_DISTRO. This can be done by editing the Vagrantfile or by setting a shell variable.","title":"Set the base box"},{"location":"installation/playbook/#editing-the-vagrantfile","text":"Open Vagrantfile (in the islandora-playbook directory) in a text editor, and find the following section. # Available boxes are 'islandora/8', ubuntu/bionic64' and 'centos/7' # Use 'ubuntu/bionic64' or 'centos/7' to build a dev environment from scratch. # Use 'islandora/8' if you just want to download a ready to run VM. $vagrantBox = ENV.fetch(\"ISLANDORA_DISTRO\", \"islandora/8\") To build a dev environment that is Ubuntu, change the last line of that section to: $vagrantBox = ENV.fetch(\"ISLANDORA_DISTRO\", \"ubuntu/bionic64\") To build a dev environment that is CentOS, change the last line of that section to: $vagrantBox = ENV.fetch(\"ISLANDORA_DISTRO\", \"centos/7\") Note that setting ISLANORA_DISTRO as a shell variable will override what is specified in the Vagrantfile.","title":"Editing the Vagrantfile"},{"location":"installation/playbook/#setting-islandora_distro-as-a-shell-environment-variable","text":"Or, an alternative to altering the Vagrantfile, you can set ISLANDORA_DISTRO by adding the following to .bashrc (on Ubuntu/Debian environments), or .bash_profile (on MacOS): export ISLANDORA_DISTRO=\"ubuntu/bionic64\" This will override what is written in the Vagrantfile.","title":"Setting ISLANDORA_DISTRO as a shell (environment) variable"},{"location":"installation/playbook/#spin-up-with-vagrant","text":"Before using vagrant up : If building a CentOS box, you also need to install the vbguest additions with vagrant plugin install vagrant-vbguest . If this is not your first time spinning up Islandora from this directory, and you want to get the latest code, you may want to clear cached ansible roles in roles/external rm -rf roles/external Then, to spin up the machine: vagrant up","title":"Spin up with Vagrant"},{"location":"installation/playbook/#installing-a-remote-environment","text":"A remote environment can be provisioned by providing SSH credentials to claw-playbook and using the ansible-galaxy installer instead of Vagrant. Some preparation of configuration entries in the inventory also need to be changed to be aware of the particulars of your remote environment; this includes: Changing usernames and passwords to something more sensible than the default Changing IP addresses to use the remote machine's actual IP Changing Apache to serve at port 80 (as opposed to 8000, which we use for development purposes) We're going to build up this new remote environment configuration from the default provided Vagrant configuration. To start, take the inventory for the vagrant development environment and make a copy of it. Be sure to give it an appropriate name. Here we're using example . $ git clone https://github.com/Islandora-Devops/islandora-playbook $ cd islandora-playbook $ cp -r inventory/vagrant inventory/example Then you can update the following entries in the following files using your own information. If an entry does not exist in a file, just add it. Ansible will then use the value you provide instead of relying on its defaults. We're using changeme to represent passwords and assume the server will be available at example.org , but you'll want to provide your own values.","title":"Installing a remote environment"},{"location":"installation/playbook/#group_varsallpasswordsyml","text":"drupal_db_password: changeme drupal_account_pass: changeme islandora_db_root_password: changeme islandora_tomcat_password: changeme islandora_syn_token: changeme cantaloupe_admin_password: changeme","title":"group_vars/all/passwords.yml"},{"location":"installation/playbook/#group_varscrayfishyml","text":"crayfish_gemini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_houdini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_hypercube_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_drupal_base_url: http://example.org crayfish_milliner_gemini_base_url: http://example.org/gemini crayfish_homarus_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_drupal_base_url: http://example.org crayfish_recast_gemini_base_url: http://example.org/gemini","title":"group_vars/crayfish.yml"},{"location":"installation/playbook/#group_varskarafyml","text":"For Alpaca, only the token.value and various URLs are of particular importance, but the entire configuration chunk is provided here for convenience. alpaca_settings: - pid: ca.islandora.alpaca.http.client settings: token.value: changeme - pid: org.fcrepo.camel.indexing.triplestore settings: input.stream: activemq:topic:fedora triplestore.reindex.stream: activemq:queue:triplestore.reindex triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.triplestore settings: error.maxRedeliveries: 10 index.stream: activemq:queue:islandora-indexing-triplestore-index delete.stream: activemq:queue:islandora-indexing-triplestore-delete triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.fcrepo settings: error.maxRedeliveries: 5 node.stream: activemq:queue:islandora-indexing-fcrepo-content node.delete.stream: activemq:queue:islandora-indexing-fcrepo-delete media.stream: activemq:queue:islandora-indexing-fcrepo-media file.stream: activemq:queue:islandora-indexing-fcrepo-file file.delete.stream: activemq:queue:islandora-indexing-fcrepo-file-delete milliner.baseUrl: http://example.org/milliner/ gemini.baseUrl: http://example.org/gemini/ alpaca_blueprint_settings: - pid: ca.islandora.alpaca.connector.houdini in_stream: activemq:queue:islandora-connector-houdini derivative_service_url: http://example.org/houdini/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHoudini - pid: ca.islandora.alpaca.connector.homarus in_stream: activemq:queue:islandora-connector-homarus derivative_service_url: http://example.org/homarus/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHomarus","title":"group_vars/karaf.yml"},{"location":"installation/playbook/#group_varstomcatyml","text":"fcrepo_allowed_external_content: - http://example.org/ cantaloupe_HttpResolver_BasicLookupStrategy_url_prefix: http://example.org/","title":"group_vars/tomcat.yml"},{"location":"installation/playbook/#group_varswebserverapacheyml","text":"This is where we specify that the webserver is listening on the default port 80, instead of the development machine port 8000. apache_listen_port: 80","title":"group_vars/webserver/apache.yml"},{"location":"installation/playbook/#group_varswebserverdrupalyml","text":"drupal_trusted_hosts: - ^localhost$ - example.org fedora_base_url: \"http://example.org:8080/fcrepo/rest/\"","title":"group_vars/webserver/drupal.yml"},{"location":"installation/playbook/#group_varswebservergeneralyml","text":"openseadragon_iiiv_server: http://example.org:8080/cantaloupe/iiif/2 matomo_site_url: http://example.org","title":"group_vars/webserver/general.yml"},{"location":"installation/playbook/#hosts","text":"You'll need the SSH particulars for logging into your server in the hosts file. This example is set up to login as root using an SSH key. You'll need to get the details for logging into your remote server from your hosting provider (AWS, Digital Ocean, etc...) or your systems administrator if you're running the server in-house. See this page for more details about what you can put into a host file default ansible_host=example.org ansible_port=22 ansible_user=root ansible_ssh_private_key_file='/home/username/.ssh/id_rsa'","title":"hosts"},{"location":"installation/playbook/#running-the-remote-installer","text":"First, you'll want to get the ansible roles that are needed for the version of Islandora you are trying to install. This can be done with $ ansible-galaxy install -r requirements.yml Then, depending on the operating system installed on the remote environment, you can use the following command for Ubuntu 16.04 $ ansible-playbook -i inventory/production playbook.yml -e \"islandora_distro=ubuntu/xenial64\" or for CentOS 7 $ ansible-playbook -i inventory/production playbook.yml -e \"islandora_distro=centos/7\"","title":"Running the remote installer"},{"location":"installation/playbook/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"installation/playbook/#out-of-date-playbooks","text":"Ansible caches the code used to provision the environment, so if you've already installed once you may not be getting the latest version of things even if you've git pull 'd the latest playbook. The code is stored in roles/external , so if you want to clear it out you can remove these before attempting to provision an environment $ rm -rf roles/external","title":"Out of date playbooks"},{"location":"installation/playbook/#port-clashes-for-local-environments","text":"When provisioning using a local environment, you should be aware of any ports that are already in use by your computer that are also going to be used by Vagrant, as these may clash and cause problems during and after provisioning. These include: 8000 (Apache) 8080 (Tomcat) 3306 (MySQL) 5432 (PostgreSQL) 8983 (Solr) 8161 (ActiveMQ) 8081 (API-X) If there are port clashes for any of these, you will need to either find and replace them in the configuration .yml files under inventory/vagrant/group_vars , or provide new values for the different playbooks that support changing the ports (for example, postgresql_databases supports adding a port property which is currently simply unused). You will also need to replace the port forwarding values in Vagrantfile . Additionally, Ansible attempts to use port 2200 for SSH. If this port is already in use, your local environment cannot be provisioned. To change this, set a new value for ansible_port in inventory/vagrant/hosts .","title":"Port clashes for local environments"},{"location":"installation/playbook/#help","text":"If you run into any issues installing the environment, do not hesitate to email the mailing list to ask for help. If you think you've stumbled across a bug in the installer, please create an issue in the Islandora 8 issue queue and give it an ansible tag.","title":"Help"},{"location":"installation/manual/configuring_drupal/","text":"Configuring Drupal After all of the above pieces are in place, installed, configured, started, and otherwise prepared, the last thing we need to do is to finally configure the front-end Drupal instance to wire all the installed components together. Drupal Pre-Configuration settings.php Notice By default, settings.php is read-only for all users. It should be made writable while this pre-configuration is being done, then set back to 444 afterwards. Some additional settings will need to be established in your default settings.php before Drupal-side configuration can occur. The below configuration will establish localhost as a trusted host pattern, but on production sites this will need to be expanded to include the actual host patterns used by the site. /opt/drupal/web/sites/default/settings.php Before : 789 | 'driver' => 'pgsql', 790 | ); After : 789 | 'driver' => 'pgsql', 790 | ); 791 | $settings['trusted_host_patterns'] = [ 792 | 'localhost', 793 | ]; 794 | $settings['flysystem'] = [ 795 | 'fedora' => [ 796 | 'driver' => 'fedora', 797 | 'config' => [ 798 | 'root' => 'http://localhost:8080/fcrepo/rest/', 799 | ], 800 | ], 801 | ]; Once this is done, refresh the cache to take hold of the new settings. cd /opt/drupal drush -y cr Islandora Downloading Islandora The Islandora Drupal module contains the core code to create a repository ecosystem in a Drupal environment. It also includes several submodules; of importance to us is islandora_core_feature , which contains the key configurations that turn a Drupal site into an Islandora site. Islandora also provides an islandora_defaults module that contains additional configurations considered an appropriate launching point for configuring a site. We're going to first enable the islandora_defaults module before doing any wiring on the front-end. Take note of some of the other comments in the below bash script for an idea of what the other components are expected, and which may be considered optional. cd /opt/drupal # This is a convenience piece that will help speed up most of the rest of our # process working with Composer and Drupal. sudo -u www-data composer require zaporylie/composer-drupal-optimizations:^1.0 # Since islandora_defaults is near the bottom of the dependency chain, requiring # it will get most of the modules and libraries we need to deploy a standard # Islandora site. sudo -u www-data composer require islandora/islandora_defaults:dev-8.x-1.x # These can be considered important or required depending on your site's # requirements; some of them represent dependencies of Islandora submodules. sudo -u www-data composer require drupal/pdf:1.x-dev sudo -u www-data composer require drupal/rest_oai_pmh:^1.0 sudo -u www-data composer require drupal/facets:^1.3 sudo -u www-data composer require drupal/restui:^1.16 sudo -u www-data composer require drupal/rdfui:^1.0-beta1 sudo -u www-data composer require drupal/content_browser:^1.0@alpha # These tend to be good to enable for a development environment, or just for a # higher quality of life when managing Islandora. That being said, devel should # NEVER be enabled on a production environment, as it intentionally gives the # user tools that compromise the security of a site. sudo -u www-data composer require drupal/console:~1.0 sudo -u www-data composer require drupal/devel:^2.0 sudo -u www-data composer require drupal/admin_toolbar:^2.0 # Islandora also provides a theme called Carapace designed to work well out of # the box with an Islandora site. sudo -u www-data composer require islandora/carapace:dev-8.x-3.x Enabling Downloaded Components Components we've now downloaded using composer require can be enabled simultaneously via drush , which will ensure they are installed in the correct dependent order. Enabling islandora_defaults will also ensure all content types and configurations are set up in Islandora. The installation process for all of these modules will likely take some time. Notice This list of modules assumes that all of the above components were downloaded using composer require ; if this is not the case, you may need to pare down this list manually. It also includes devel , which again, should not be enabled on production sites. cd /opt/drupal drush -y en rdf responsive_image devel syslog serialization basic_auth rest restui search_api_solr search_api_solr_defaults facets content_browser pdf admin_toolbar islandora_defaults controlled_access_terms_defaults islandora_breadcrumbs islandora_iiif islandora_oaipmh # If Carapace was downloaded, now is the time to enable and set it as well. drush -y theme:enable carapace drush -y config-set system.theme default carapace # After all of this, rebuild the cache. drush -y cr Adding a JWT Configuration to Drupal To allow our installation to talk to other services via Syn, we need to establish a Drupal-side JWT configuration using the keys we generated at that time. Log onto your site as an administrator at /user , then navigate to /admin/config/system/keys/add . Some of the settings here are unimportant, but pay close attention to the Key type , which should match the key we created earlier (an RSA key), and the File location , which should be the ultimate location of the key we created for Syn on the filesystem, /opt/keys/syn_private.key . Click Save to create the key. Once this key is created, navigate to /admin/config/system/jwt to select the key you just created from the list. Note that before the key will show up in the Private Key list, you need to select that key's type in the Algorithm section, namely RSASSA-PKCS1-v1_5 using SHA-256 (RS256) . Click Save configuration to establish this as the JWT key configuration. Configuring Islandora Navigate to the Islandora core configuration page at /admin/config/islandora/core to set up the core configuration to connect to Gemini. Of note here, the Gemini URL will need to be established to facilitate the connection to Fedora, and the appropriate Bundles with Gemini URI pseudo field types will need to be checked off. Notice Any other Drupal content types you wish to synchronize with Fedora should also be checked off here. Configuring Islandora IIIF Navigate to /admin/config/islandora/iiif to ensure that Islandora IIIF is pointing to our Cantaloupe server. Next, configure Openseadragon by navigating to /admin/config/media/openseadragon and ensuring everything is set up properly. Establishing Flysystem as the Default Download Method Navigate to /admin/config/media/file-system to set the Default download method to the one we created in our settings.php . Giving the Administrative User the fedoraAdmin Role In order for data to be pushed back to Fedora, the site administrative user needs the fedoraAdmin role. cd /opt/drupal sudo -u www-data drush -y urol \"fedoraadmin\" islandora Running Feature Migrations Finally, to get everything up and running, run the Islandora Core Features and Islandora Defaults migrations. cd /opt/drupal sudo -u www-data drush -y -l localhost --userid=1 mim --group=islandora","title":"Configuring Drupal"},{"location":"installation/manual/configuring_drupal/#configuring-drupal","text":"After all of the above pieces are in place, installed, configured, started, and otherwise prepared, the last thing we need to do is to finally configure the front-end Drupal instance to wire all the installed components together.","title":"Configuring Drupal"},{"location":"installation/manual/configuring_drupal/#drupal-pre-configuration","text":"","title":"Drupal Pre-Configuration"},{"location":"installation/manual/configuring_drupal/#settingsphp","text":"Notice By default, settings.php is read-only for all users. It should be made writable while this pre-configuration is being done, then set back to 444 afterwards. Some additional settings will need to be established in your default settings.php before Drupal-side configuration can occur. The below configuration will establish localhost as a trusted host pattern, but on production sites this will need to be expanded to include the actual host patterns used by the site. /opt/drupal/web/sites/default/settings.php Before : 789 | 'driver' => 'pgsql', 790 | ); After : 789 | 'driver' => 'pgsql', 790 | ); 791 | $settings['trusted_host_patterns'] = [ 792 | 'localhost', 793 | ]; 794 | $settings['flysystem'] = [ 795 | 'fedora' => [ 796 | 'driver' => 'fedora', 797 | 'config' => [ 798 | 'root' => 'http://localhost:8080/fcrepo/rest/', 799 | ], 800 | ], 801 | ]; Once this is done, refresh the cache to take hold of the new settings. cd /opt/drupal drush -y cr","title":"settings.php"},{"location":"installation/manual/configuring_drupal/#islandora","text":"","title":"Islandora"},{"location":"installation/manual/configuring_drupal/#downloading-islandora","text":"The Islandora Drupal module contains the core code to create a repository ecosystem in a Drupal environment. It also includes several submodules; of importance to us is islandora_core_feature , which contains the key configurations that turn a Drupal site into an Islandora site. Islandora also provides an islandora_defaults module that contains additional configurations considered an appropriate launching point for configuring a site. We're going to first enable the islandora_defaults module before doing any wiring on the front-end. Take note of some of the other comments in the below bash script for an idea of what the other components are expected, and which may be considered optional. cd /opt/drupal # This is a convenience piece that will help speed up most of the rest of our # process working with Composer and Drupal. sudo -u www-data composer require zaporylie/composer-drupal-optimizations:^1.0 # Since islandora_defaults is near the bottom of the dependency chain, requiring # it will get most of the modules and libraries we need to deploy a standard # Islandora site. sudo -u www-data composer require islandora/islandora_defaults:dev-8.x-1.x # These can be considered important or required depending on your site's # requirements; some of them represent dependencies of Islandora submodules. sudo -u www-data composer require drupal/pdf:1.x-dev sudo -u www-data composer require drupal/rest_oai_pmh:^1.0 sudo -u www-data composer require drupal/facets:^1.3 sudo -u www-data composer require drupal/restui:^1.16 sudo -u www-data composer require drupal/rdfui:^1.0-beta1 sudo -u www-data composer require drupal/content_browser:^1.0@alpha # These tend to be good to enable for a development environment, or just for a # higher quality of life when managing Islandora. That being said, devel should # NEVER be enabled on a production environment, as it intentionally gives the # user tools that compromise the security of a site. sudo -u www-data composer require drupal/console:~1.0 sudo -u www-data composer require drupal/devel:^2.0 sudo -u www-data composer require drupal/admin_toolbar:^2.0 # Islandora also provides a theme called Carapace designed to work well out of # the box with an Islandora site. sudo -u www-data composer require islandora/carapace:dev-8.x-3.x","title":"Downloading Islandora"},{"location":"installation/manual/configuring_drupal/#enabling-downloaded-components","text":"Components we've now downloaded using composer require can be enabled simultaneously via drush , which will ensure they are installed in the correct dependent order. Enabling islandora_defaults will also ensure all content types and configurations are set up in Islandora. The installation process for all of these modules will likely take some time. Notice This list of modules assumes that all of the above components were downloaded using composer require ; if this is not the case, you may need to pare down this list manually. It also includes devel , which again, should not be enabled on production sites. cd /opt/drupal drush -y en rdf responsive_image devel syslog serialization basic_auth rest restui search_api_solr search_api_solr_defaults facets content_browser pdf admin_toolbar islandora_defaults controlled_access_terms_defaults islandora_breadcrumbs islandora_iiif islandora_oaipmh # If Carapace was downloaded, now is the time to enable and set it as well. drush -y theme:enable carapace drush -y config-set system.theme default carapace # After all of this, rebuild the cache. drush -y cr","title":"Enabling Downloaded Components"},{"location":"installation/manual/configuring_drupal/#adding-a-jwt-configuration-to-drupal","text":"To allow our installation to talk to other services via Syn, we need to establish a Drupal-side JWT configuration using the keys we generated at that time. Log onto your site as an administrator at /user , then navigate to /admin/config/system/keys/add . Some of the settings here are unimportant, but pay close attention to the Key type , which should match the key we created earlier (an RSA key), and the File location , which should be the ultimate location of the key we created for Syn on the filesystem, /opt/keys/syn_private.key . Click Save to create the key. Once this key is created, navigate to /admin/config/system/jwt to select the key you just created from the list. Note that before the key will show up in the Private Key list, you need to select that key's type in the Algorithm section, namely RSASSA-PKCS1-v1_5 using SHA-256 (RS256) . Click Save configuration to establish this as the JWT key configuration.","title":"Adding a JWT Configuration to Drupal"},{"location":"installation/manual/configuring_drupal/#configuring-islandora","text":"Navigate to the Islandora core configuration page at /admin/config/islandora/core to set up the core configuration to connect to Gemini. Of note here, the Gemini URL will need to be established to facilitate the connection to Fedora, and the appropriate Bundles with Gemini URI pseudo field types will need to be checked off. Notice Any other Drupal content types you wish to synchronize with Fedora should also be checked off here.","title":"Configuring Islandora"},{"location":"installation/manual/configuring_drupal/#configuring-islandora-iiif","text":"Navigate to /admin/config/islandora/iiif to ensure that Islandora IIIF is pointing to our Cantaloupe server. Next, configure Openseadragon by navigating to /admin/config/media/openseadragon and ensuring everything is set up properly.","title":"Configuring Islandora IIIF"},{"location":"installation/manual/configuring_drupal/#establishing-flysystem-as-the-default-download-method","text":"Navigate to /admin/config/media/file-system to set the Default download method to the one we created in our settings.php .","title":"Establishing Flysystem as the Default Download Method"},{"location":"installation/manual/configuring_drupal/#giving-the-administrative-user-the-fedoraadmin-role","text":"In order for data to be pushed back to Fedora, the site administrative user needs the fedoraAdmin role. cd /opt/drupal sudo -u www-data drush -y urol \"fedoraadmin\" islandora","title":"Giving the Administrative User the fedoraAdmin Role"},{"location":"installation/manual/configuring_drupal/#running-feature-migrations","text":"Finally, to get everything up and running, run the Islandora Core Features and Islandora Defaults migrations. cd /opt/drupal sudo -u www-data drush -y -l localhost --userid=1 mim --group=islandora","title":"Running Feature Migrations"},{"location":"installation/manual/installing_composer_drush_and_drupal/","text":"Installing Composer, Drush, and Drupal In this section, we will install: Composer at its current latest version, the package manager that will allow us to install PHP applications The Islandora fork of the composer installer from drupal-composer/drupal-project , which will install, among other things: Drush 9 at its latest version, the command-line PHP application for running tasks in Drupal Drupal 8 at its latest version, the content management system Islandora uses for content modelling and front-end display Composer 1.x Download and install Composer Composer provides PHP code that we can use to install it. After downloading and running the installer, we\u2019re going to move the generated executable to a place in $PATH , removing its extension: curl \"https://getcomposer.org/installer\" > composer-install.php chmod +x composer-install.php php composer-install.php sudo mv composer.phar /usr/local/bin/composer Drush 9 and Drupal 8 Clone drupal-project and run composer install Before we can fully install Drupal, we\u2019re going to need to clone drupal-project and provision it using Composer. We\u2019re going to install it into the /opt directory: # Start by giving Drupal somewhere to live. The Drupal project is installed to # an existing, empty folder. sudo mkdir /opt/drupal sudo chown www-data:www-data /opt/drupal sudo chmod 775 /opt/drupal # Clone drupal-project and build it in our newly-created folder. git clone https://github.com/Islandora/drupal-project.git cd drupal-project # Expect this to take a little while, as this is grabbing the entire # requirements set for Drupal. sudo -u www-data composer create-project drupal-composer/drupal-project:8.x-dev /opt/drupal --no-interaction Make Drush accessible in $PATH While it\u2019s not required for Drush to be accessible in $PATH , not needing to type out the full path to it every time we need to use it is going to be incredibly convenient for our purposes. The rest of this guide will assume that we can simply run Drush from the command line when necessary without having to reference the full path. sudo ln -s /opt/drupal/vendor/drush/drush/drush /usr/local/bin/drush Make the new webroot accessible in Apache Before we can proceed with the actual site installation, we\u2019re going to need to make our new Drupal installation the default web-accessible location Apache serves up. This will include an appropriate ports.conf file, and replacing the default enabled site. Notice Out of the box, these files will contain support for SSL, which we will not be setting up in this guide (and therefore removing with these overwritten configurations), but which are absolutely indispensible to a production site. This guide does not recommend any particular SSL certificate authority or installation method, but you may find DigitalOcean's tutorial helpful. /etc/apache2/ports.conf | root:root/644 Listen 80 /etc/apache2/sites-enabled/000-default.conf | root:root/777 <VirtualHost *:80> ServerName SERVER_NAME DocumentRoot \"/opt/drupal/web\" <Directory \"/opt/drupal/web\"> Options Indexes FollowSymLinks MultiViews AllowOverride all Require all granted </Directory> # Ensure some logging is in place. ErrorLog \"/var/log/apache2/localhost_error.log\" CustomLog \"/var/log/apache2/localhost_access.log\" combined </VirtualHost> SERVER_NAME : localhost For a development environment hosted on your own machine or a VM, localhost should suffice. Realistically, this should be the domain the server will be accessed at. Restart the Apache 2 service to apply these changes: sudo systemctl restart apache2 Prepare the PostgreSQL database PostgreSQL roles are directly tied to users. We\u2019re going to ensure a user is in place, create a role for them in PostgreSQL, and create a database for them that we can use to install Drupal. # Run psql as the postgres user, the only user currently with any PostgreSQL # access. sudo -u postgres psql # Then, run these commands within psql itself: create database DRUPAL_DB; create user DRUPAL_DB_USER with encrypted password 'DRUPAL_DB_PASSWORD'; grant all privileges on database DRUPAL_DB to DRUPAL_DB_USER; # Then, quit psql. \\q DRUPAL_DB : drupal8 This will be used as the core database that Drupal is installed into DRUPAL_DB_USER : drupal Specifically, this is the user that will connect to the PostgreSQL database being created, not the user that will be logging into Drupal DRUPAL_DB_PASSWORD : drupal This should be a secure password; it\u2019s recommended to use a password generator to create this such as the one provided by random.org Run the Drupal installer with Drush The standard Drupal installation method involves navigating to your site\u2019s front page and navigating through a series of form steps, but we can fast-track this using Drush\u2019s site-install command. # Rather than defining the root directory in our Drush command, we're going to # do this from the site root context. cd /opt/drupal/web drush -y site-install standard --db-url=\"pgsql://DRUPAL_DB_USER:DRUPAL_DB_PASSWORD@127.0.0.1:5432/DRUPAL_DB\" --site-name=\"SITE_NAME\" --account-name=DRUPAL_LOGIN --account-pass=DRUPAL_PASS This uses the same parameters from the above step, as well as: SITE_NAME : Islandora 8 This is arbitrary, and is simply used to title the site on the home page DRUPAL_LOGIN : islandora The Drupal administrative username to use DRUPAL_PASS : islandora The password to use for the Drupal administrative user Congratulations, you have a Drupal site! It currently isn\u2019t really configured to do anything, but we\u2019ll get those portions set up in the coming sections.","title":"Installing Composer, Drush, and Drupal"},{"location":"installation/manual/installing_composer_drush_and_drupal/#installing-composer-drush-and-drupal","text":"","title":"Installing Composer, Drush, and Drupal"},{"location":"installation/manual/installing_composer_drush_and_drupal/#in-this-section-we-will-install","text":"Composer at its current latest version, the package manager that will allow us to install PHP applications The Islandora fork of the composer installer from drupal-composer/drupal-project , which will install, among other things: Drush 9 at its latest version, the command-line PHP application for running tasks in Drupal Drupal 8 at its latest version, the content management system Islandora uses for content modelling and front-end display","title":"In this section, we will install:"},{"location":"installation/manual/installing_composer_drush_and_drupal/#composer-1x","text":"","title":"Composer 1.x"},{"location":"installation/manual/installing_composer_drush_and_drupal/#download-and-install-composer","text":"Composer provides PHP code that we can use to install it. After downloading and running the installer, we\u2019re going to move the generated executable to a place in $PATH , removing its extension: curl \"https://getcomposer.org/installer\" > composer-install.php chmod +x composer-install.php php composer-install.php sudo mv composer.phar /usr/local/bin/composer","title":"Download and install Composer"},{"location":"installation/manual/installing_composer_drush_and_drupal/#drush-9-and-drupal-8","text":"","title":"Drush 9 and Drupal 8"},{"location":"installation/manual/installing_composer_drush_and_drupal/#clone-drupal-project-and-run-composer-install","text":"Before we can fully install Drupal, we\u2019re going to need to clone drupal-project and provision it using Composer. We\u2019re going to install it into the /opt directory: # Start by giving Drupal somewhere to live. The Drupal project is installed to # an existing, empty folder. sudo mkdir /opt/drupal sudo chown www-data:www-data /opt/drupal sudo chmod 775 /opt/drupal # Clone drupal-project and build it in our newly-created folder. git clone https://github.com/Islandora/drupal-project.git cd drupal-project # Expect this to take a little while, as this is grabbing the entire # requirements set for Drupal. sudo -u www-data composer create-project drupal-composer/drupal-project:8.x-dev /opt/drupal --no-interaction","title":"Clone drupal-project and run composer install"},{"location":"installation/manual/installing_composer_drush_and_drupal/#make-drush-accessible-in-path","text":"While it\u2019s not required for Drush to be accessible in $PATH , not needing to type out the full path to it every time we need to use it is going to be incredibly convenient for our purposes. The rest of this guide will assume that we can simply run Drush from the command line when necessary without having to reference the full path. sudo ln -s /opt/drupal/vendor/drush/drush/drush /usr/local/bin/drush","title":"Make Drush accessible in $PATH"},{"location":"installation/manual/installing_composer_drush_and_drupal/#make-the-new-webroot-accessible-in-apache","text":"Before we can proceed with the actual site installation, we\u2019re going to need to make our new Drupal installation the default web-accessible location Apache serves up. This will include an appropriate ports.conf file, and replacing the default enabled site. Notice Out of the box, these files will contain support for SSL, which we will not be setting up in this guide (and therefore removing with these overwritten configurations), but which are absolutely indispensible to a production site. This guide does not recommend any particular SSL certificate authority or installation method, but you may find DigitalOcean's tutorial helpful. /etc/apache2/ports.conf | root:root/644 Listen 80 /etc/apache2/sites-enabled/000-default.conf | root:root/777 <VirtualHost *:80> ServerName SERVER_NAME DocumentRoot \"/opt/drupal/web\" <Directory \"/opt/drupal/web\"> Options Indexes FollowSymLinks MultiViews AllowOverride all Require all granted </Directory> # Ensure some logging is in place. ErrorLog \"/var/log/apache2/localhost_error.log\" CustomLog \"/var/log/apache2/localhost_access.log\" combined </VirtualHost> SERVER_NAME : localhost For a development environment hosted on your own machine or a VM, localhost should suffice. Realistically, this should be the domain the server will be accessed at. Restart the Apache 2 service to apply these changes: sudo systemctl restart apache2","title":"Make the new webroot accessible in Apache"},{"location":"installation/manual/installing_composer_drush_and_drupal/#prepare-the-postgresql-database","text":"PostgreSQL roles are directly tied to users. We\u2019re going to ensure a user is in place, create a role for them in PostgreSQL, and create a database for them that we can use to install Drupal. # Run psql as the postgres user, the only user currently with any PostgreSQL # access. sudo -u postgres psql # Then, run these commands within psql itself: create database DRUPAL_DB; create user DRUPAL_DB_USER with encrypted password 'DRUPAL_DB_PASSWORD'; grant all privileges on database DRUPAL_DB to DRUPAL_DB_USER; # Then, quit psql. \\q DRUPAL_DB : drupal8 This will be used as the core database that Drupal is installed into DRUPAL_DB_USER : drupal Specifically, this is the user that will connect to the PostgreSQL database being created, not the user that will be logging into Drupal DRUPAL_DB_PASSWORD : drupal This should be a secure password; it\u2019s recommended to use a password generator to create this such as the one provided by random.org","title":"Prepare the PostgreSQL database"},{"location":"installation/manual/installing_composer_drush_and_drupal/#run-the-drupal-installer-with-drush","text":"The standard Drupal installation method involves navigating to your site\u2019s front page and navigating through a series of form steps, but we can fast-track this using Drush\u2019s site-install command. # Rather than defining the root directory in our Drush command, we're going to # do this from the site root context. cd /opt/drupal/web drush -y site-install standard --db-url=\"pgsql://DRUPAL_DB_USER:DRUPAL_DB_PASSWORD@127.0.0.1:5432/DRUPAL_DB\" --site-name=\"SITE_NAME\" --account-name=DRUPAL_LOGIN --account-pass=DRUPAL_PASS This uses the same parameters from the above step, as well as: SITE_NAME : Islandora 8 This is arbitrary, and is simply used to title the site on the home page DRUPAL_LOGIN : islandora The Drupal administrative username to use DRUPAL_PASS : islandora The password to use for the Drupal administrative user Congratulations, you have a Drupal site! It currently isn\u2019t really configured to do anything, but we\u2019ll get those portions set up in the coming sections.","title":"Run the Drupal installer with Drush"},{"location":"installation/manual/installing_crayfish/","text":"Installing Crayfish In this section, we will install: Islandora/Crayfish , the suite of microservices that power the backend of Islandora 8 Indvidual microservices underneath Crayfish Crayfish 1.0 Installing Prerequisites Some packages need to be installed before we can proceed with installing Crayfish; these packages are used by the microservices within Crayfish. These include: Imagemagick, which will be used for image processing. We'll be using the LYRASIS build of imagemagick here, which supports JP2 files. Tesseract, which will be used for optical character recognition; note that by default Tesseract can only understand English; several other individual Tesseract language packs can be installed using apt-get , and a list of available packs can be procured with sudo apt-cache search tesseract-ocr FFMPEG, which will be used for video processing Poppler, which will be used for generating PDFs sudo add-apt-repository -y ppa:lyrasis/imagemagick-jp2 sudo apt-get update sudo apt-get -y install imagemagick tesseract-ocr ffmpeg poppler-utils Preparing a Gemini Database This database will be set up (and function) mostly the same as the other databases we\u2019ve previously installed. sudo -u postgres psql create database CRAYFISH_DB; create user CRAYFISH_DB_USER with encrypted password 'CRAYFISH_DB_PASSWORD'; grant all privileges on database CRAYFISH_DB to CRAYFISH_DB_USER; \\q CRAYFISH_DB : gemini CRAYFISH_DB_USER : gemini CRAYFISH_DB_PASSWORD : gemini As always, this should be a secure password of some kind, and not this default. Cloning and Installing Crayfish We\u2019re going to clone Crayfish to /opt , and individually run composer install against each of the microservice subdirectories. cd /opt sudo git clone https://github.com/Islandora/Crayfish.git crayfish sudo chown -R www-data:www-data crayfish sudo -u www-data composer install -d crayfish/Gemini sudo -u www-data composer install -d crayfish/Homarus sudo -u www-data composer install -d crayfish/Houdini sudo -u www-data composer install -d crayfish/Hypercube sudo -u www-data composer install -d crayfish/Milliner sudo -u www-data composer install -d crayfish/Recast Preparing Logging Not much needs to happen here; Crayfish opts for a simple logging approach, with one .log file for each component. We\u2019ll create a folder where each logfile can live. sudo mkdir /var/log/islandora sudo chown www-data:www-data /var/log/islandora Configuring Crayfish Components Each Crayfish component requires a .yaml file to ensure everything is wired up correctly. Notice The following configuration files represent somewhat sensible defaults; you should take consideration of the logging levels in use, as this can vary in desirability from installation to installation. Also note that in all cases, http URLs are being used, as this guide does not deal with setting up https support. In a production installation, this should not be the case. These files also assume a connection to a PostgreSQL database; use a pdo_mysql driver and the appropriate 3306 port if using MySQL. /opt/crayfish/Gemini/cfg/config.yaml | www-data:www-data/644 --- debug: false fedora_base_url: http://localhost:8080/fcrepo/rest db.options: driver: pdo_pgsql host: 127.0.0.1 port: 5432 dbname: CRAYFISH_DB user: CRAYFISH_DB_USER password: CRAYFISH_DB_PASSWORD log: level: NOTICE file: /var/log/islandora/gemini.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Homarus/cfg/config.yaml | www-data:www-data/644 --- homarus: executable: ffmpeg mime_types: valid: - video/mp4 - video/x-msvideo - video/ogg - audio/x-wav - audio/mpeg - audio/aac - image/jpeg - image/png default: video/mp4 mime_to_format: valid: - video/mp4_mp4 - video/x-msvideo_avi - video/ogg_ogg - audio/x-wav_wav - audio/mpeg_mp3 - audio/aac_m4a - image/jpeg_image2pipe - image/png_image2pipe default: mp4 fedora_resource: base_url: http://localhost:8080/fcrepo/rest log: level: NOTICE file: /var/log/islandora/homarus.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Houdini/cfg/config.yaml | www-data:www-data/644 --- houdini: executable: convert formats: valid: - image/jpeg - image/png - image/tiff - image/jp2 default: image/jpeg fedora_resource: base_url: http://localhost:8080/fcrepo/rest log: level: NOTICE file: /var/log/islandora/houdini.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Hypercube/cfg/config.yaml | www-data:www-data/644 --- hypercube: tesseract_executable: tesseract pdftotext_executable: pdftotext fedora_resource: base_url: http://localhost:8080/fcrepo/rest log: level: NOTICE file: /var/log/islandora/hypercube.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Milliner/cfg/config.yaml | www-data:www-data/644 --- fedora_base_url: http://localhost:8080/fcrepo/rest drupal_base_url: http://localhost gemini_base_uri: http://localhost/gemini modified_date_predicate: http://schema.org/dateModified strip_format_jsonld: true debug: false db.options: driver: pdo_pgsql host: 127.0.0.1 port: 5432 dbname: CRAYFISH_DB user: CRAYFISH_DB_USER password: CRAYFISH_DB_PASSWORD log: level: NOTICE file: /var/log/islandora/milliner.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Recast/cfg/config.yaml | www-data:www-data/644 --- fedora_resource: base_url: http://localhost:8080/fcrepo/rest gemini_base_url: http://localhost/gemini drupal_base_url: http://localhost debug: false log: level: NOTICE file: /var/log/islandora/recast.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml namespaces: - acl: \"http://www.w3.org/ns/auth/acl#\" fedora: \"http://fedora.info/definitions/v4/repository#\" ldp: \"http://www.w3.org/ns/ldp#\" memento: \"http://mementoweb.org/ns#\" pcdm: \"http://pcdm.org/models#\" pcdmuse: \"http://pcdm.org/use#\" webac: \"http://fedora.info/definitions/v4/webac#\" vcard: \"http://www.w3.org/2006/vcard/ns#\" Installing the Gemini Database Our Gemini database is unusable until it's installed. cd /opt/crayfish/Gemini php bin/console --no-interaction migrations:migrate Creating Apache Configurations for Crayfish Components Finally, we need appropriate Apache configurations for Crayfish; these will allow other services to connect to Crayfish components via their HTTP endpoints. Each endpoint we need to be able to connect to will get its own .conf file, which we will then enable. Notice These configurations would potentially have collisions with Drupal routes, if any are created in Drupal with the same name. If this is a concern, it would likely be better to reserve a subdomain or another port specifically for Crayfish. For the purposes of this installation guide, these endpoints will suffice. /etc/apache2/conf-available/Gemini.conf | root:root/644 Alias \"/gemini\" \"/opt/crayfish/Gemini/src\" <Directory \"/opt/crayfish/Gemini/src\"> FallbackResource /gemini/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Homarus.conf | root:root/644 Alias \"/homarus\" \"/opt/crayfish/Homarus/src\" <Directory \"/opt/crayfish/Homarus/src\"> FallbackResource /homarus/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Houdini.conf | root:root/644 Alias \"/houdini\" \"/opt/crayfish/Houdini/src\" <Directory \"/opt/crayfish/Houdini/src\"> FallbackResource /houdini/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Hypercube.conf | root:root/644 Alias \"/hypercube\" \"/opt/crayfish/Hypercube/src\" <Directory \"/opt/crayfish/Hypercube/src\"> FallbackResource /hypercube/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Milliner.conf | root:root/644 Alias \"/milliner\" \"/opt/crayfish/Milliner/src\" <Directory \"/opt/crayfish/Milliner/src\"> FallbackResource /milliner/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Recast.conf | root:root/644 Alias \"/recast\" \"/opt/crayfish/Recast/src\" <Directory \"/opt/crayfish/Recast/src\"> FallbackResource /recast/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> Enabling Each Crayfish Component Apache Configuration Enabling each of these configurations involves creating a symlink to them in the conf-enabled directory; the standardized method of doing this in Apache is with a2enconf . sudo a2enconf Gemini Homarus Houdini Hypercube Milliner Recast Restarting the Apache Service Finally, to get these new endpoints up and running, we need to restart the Apache service. sudo systemctl restart apache2","title":"Installing Crayfish"},{"location":"installation/manual/installing_crayfish/#installing-crayfish","text":"","title":"Installing Crayfish"},{"location":"installation/manual/installing_crayfish/#in-this-section-we-will-install","text":"Islandora/Crayfish , the suite of microservices that power the backend of Islandora 8 Indvidual microservices underneath Crayfish","title":"In this section, we will install:"},{"location":"installation/manual/installing_crayfish/#crayfish-10","text":"","title":"Crayfish 1.0"},{"location":"installation/manual/installing_crayfish/#installing-prerequisites","text":"Some packages need to be installed before we can proceed with installing Crayfish; these packages are used by the microservices within Crayfish. These include: Imagemagick, which will be used for image processing. We'll be using the LYRASIS build of imagemagick here, which supports JP2 files. Tesseract, which will be used for optical character recognition; note that by default Tesseract can only understand English; several other individual Tesseract language packs can be installed using apt-get , and a list of available packs can be procured with sudo apt-cache search tesseract-ocr FFMPEG, which will be used for video processing Poppler, which will be used for generating PDFs sudo add-apt-repository -y ppa:lyrasis/imagemagick-jp2 sudo apt-get update sudo apt-get -y install imagemagick tesseract-ocr ffmpeg poppler-utils","title":"Installing Prerequisites"},{"location":"installation/manual/installing_crayfish/#preparing-a-gemini-database","text":"This database will be set up (and function) mostly the same as the other databases we\u2019ve previously installed. sudo -u postgres psql create database CRAYFISH_DB; create user CRAYFISH_DB_USER with encrypted password 'CRAYFISH_DB_PASSWORD'; grant all privileges on database CRAYFISH_DB to CRAYFISH_DB_USER; \\q CRAYFISH_DB : gemini CRAYFISH_DB_USER : gemini CRAYFISH_DB_PASSWORD : gemini As always, this should be a secure password of some kind, and not this default.","title":"Preparing a Gemini Database"},{"location":"installation/manual/installing_crayfish/#cloning-and-installing-crayfish","text":"We\u2019re going to clone Crayfish to /opt , and individually run composer install against each of the microservice subdirectories. cd /opt sudo git clone https://github.com/Islandora/Crayfish.git crayfish sudo chown -R www-data:www-data crayfish sudo -u www-data composer install -d crayfish/Gemini sudo -u www-data composer install -d crayfish/Homarus sudo -u www-data composer install -d crayfish/Houdini sudo -u www-data composer install -d crayfish/Hypercube sudo -u www-data composer install -d crayfish/Milliner sudo -u www-data composer install -d crayfish/Recast","title":"Cloning and Installing Crayfish"},{"location":"installation/manual/installing_crayfish/#preparing-logging","text":"Not much needs to happen here; Crayfish opts for a simple logging approach, with one .log file for each component. We\u2019ll create a folder where each logfile can live. sudo mkdir /var/log/islandora sudo chown www-data:www-data /var/log/islandora","title":"Preparing Logging"},{"location":"installation/manual/installing_crayfish/#configuring-crayfish-components","text":"Each Crayfish component requires a .yaml file to ensure everything is wired up correctly. Notice The following configuration files represent somewhat sensible defaults; you should take consideration of the logging levels in use, as this can vary in desirability from installation to installation. Also note that in all cases, http URLs are being used, as this guide does not deal with setting up https support. In a production installation, this should not be the case. These files also assume a connection to a PostgreSQL database; use a pdo_mysql driver and the appropriate 3306 port if using MySQL. /opt/crayfish/Gemini/cfg/config.yaml | www-data:www-data/644 --- debug: false fedora_base_url: http://localhost:8080/fcrepo/rest db.options: driver: pdo_pgsql host: 127.0.0.1 port: 5432 dbname: CRAYFISH_DB user: CRAYFISH_DB_USER password: CRAYFISH_DB_PASSWORD log: level: NOTICE file: /var/log/islandora/gemini.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Homarus/cfg/config.yaml | www-data:www-data/644 --- homarus: executable: ffmpeg mime_types: valid: - video/mp4 - video/x-msvideo - video/ogg - audio/x-wav - audio/mpeg - audio/aac - image/jpeg - image/png default: video/mp4 mime_to_format: valid: - video/mp4_mp4 - video/x-msvideo_avi - video/ogg_ogg - audio/x-wav_wav - audio/mpeg_mp3 - audio/aac_m4a - image/jpeg_image2pipe - image/png_image2pipe default: mp4 fedora_resource: base_url: http://localhost:8080/fcrepo/rest log: level: NOTICE file: /var/log/islandora/homarus.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Houdini/cfg/config.yaml | www-data:www-data/644 --- houdini: executable: convert formats: valid: - image/jpeg - image/png - image/tiff - image/jp2 default: image/jpeg fedora_resource: base_url: http://localhost:8080/fcrepo/rest log: level: NOTICE file: /var/log/islandora/houdini.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Hypercube/cfg/config.yaml | www-data:www-data/644 --- hypercube: tesseract_executable: tesseract pdftotext_executable: pdftotext fedora_resource: base_url: http://localhost:8080/fcrepo/rest log: level: NOTICE file: /var/log/islandora/hypercube.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Milliner/cfg/config.yaml | www-data:www-data/644 --- fedora_base_url: http://localhost:8080/fcrepo/rest drupal_base_url: http://localhost gemini_base_uri: http://localhost/gemini modified_date_predicate: http://schema.org/dateModified strip_format_jsonld: true debug: false db.options: driver: pdo_pgsql host: 127.0.0.1 port: 5432 dbname: CRAYFISH_DB user: CRAYFISH_DB_USER password: CRAYFISH_DB_PASSWORD log: level: NOTICE file: /var/log/islandora/milliner.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml /opt/crayfish/Recast/cfg/config.yaml | www-data:www-data/644 --- fedora_resource: base_url: http://localhost:8080/fcrepo/rest gemini_base_url: http://localhost/gemini drupal_base_url: http://localhost debug: false log: level: NOTICE file: /var/log/islandora/recast.log syn: enable: true config: /opt/fcrepo/config/syn-settings.xml namespaces: - acl: \"http://www.w3.org/ns/auth/acl#\" fedora: \"http://fedora.info/definitions/v4/repository#\" ldp: \"http://www.w3.org/ns/ldp#\" memento: \"http://mementoweb.org/ns#\" pcdm: \"http://pcdm.org/models#\" pcdmuse: \"http://pcdm.org/use#\" webac: \"http://fedora.info/definitions/v4/webac#\" vcard: \"http://www.w3.org/2006/vcard/ns#\"","title":"Configuring Crayfish Components"},{"location":"installation/manual/installing_crayfish/#installing-the-gemini-database","text":"Our Gemini database is unusable until it's installed. cd /opt/crayfish/Gemini php bin/console --no-interaction migrations:migrate","title":"Installing the Gemini Database"},{"location":"installation/manual/installing_crayfish/#creating-apache-configurations-for-crayfish-components","text":"Finally, we need appropriate Apache configurations for Crayfish; these will allow other services to connect to Crayfish components via their HTTP endpoints. Each endpoint we need to be able to connect to will get its own .conf file, which we will then enable. Notice These configurations would potentially have collisions with Drupal routes, if any are created in Drupal with the same name. If this is a concern, it would likely be better to reserve a subdomain or another port specifically for Crayfish. For the purposes of this installation guide, these endpoints will suffice. /etc/apache2/conf-available/Gemini.conf | root:root/644 Alias \"/gemini\" \"/opt/crayfish/Gemini/src\" <Directory \"/opt/crayfish/Gemini/src\"> FallbackResource /gemini/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Homarus.conf | root:root/644 Alias \"/homarus\" \"/opt/crayfish/Homarus/src\" <Directory \"/opt/crayfish/Homarus/src\"> FallbackResource /homarus/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Houdini.conf | root:root/644 Alias \"/houdini\" \"/opt/crayfish/Houdini/src\" <Directory \"/opt/crayfish/Houdini/src\"> FallbackResource /houdini/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Hypercube.conf | root:root/644 Alias \"/hypercube\" \"/opt/crayfish/Hypercube/src\" <Directory \"/opt/crayfish/Hypercube/src\"> FallbackResource /hypercube/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Milliner.conf | root:root/644 Alias \"/milliner\" \"/opt/crayfish/Milliner/src\" <Directory \"/opt/crayfish/Milliner/src\"> FallbackResource /milliner/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory> /etc/apache2/conf-available/Recast.conf | root:root/644 Alias \"/recast\" \"/opt/crayfish/Recast/src\" <Directory \"/opt/crayfish/Recast/src\"> FallbackResource /recast/index.php Require all granted DirectoryIndex index.php SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1 </Directory>","title":"Creating Apache Configurations for Crayfish Components"},{"location":"installation/manual/installing_crayfish/#enabling-each-crayfish-component-apache-configuration","text":"Enabling each of these configurations involves creating a symlink to them in the conf-enabled directory; the standardized method of doing this in Apache is with a2enconf . sudo a2enconf Gemini Homarus Houdini Hypercube Milliner Recast","title":"Enabling Each Crayfish Component Apache Configuration"},{"location":"installation/manual/installing_crayfish/#restarting-the-apache-service","text":"Finally, to get these new endpoints up and running, we need to restart the Apache service. sudo systemctl restart apache2","title":"Restarting the Apache Service"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/","text":"Installing Fedora, Syn, and Blazegraph In this section, we will install: Fedora 5 , the back-end repository that Islandora will use Syn , the authentication broker that will manage communication with Fedora Blazegraph , the resource index layer on top of Fedora for managing discoverability via RDF Fedora 5 Creating a Working Space for Fedora Fedora\u2019s configuration and data won\u2019t live with Tomcat itself; rather, we\u2019re going to prepare a space for them to make them easier to manage. sudo mkdir -p /opt/fcrepo/data/objects sudo mkdir /opt/fcrepo/config sudo chown -R tomcat:tomcat /opt/fcrepo Creating a Database for Fedora The method for creating the database here will closely mimic the method we used to create our database for Drupal. sudo -u postgres psql create database FEDORA_DB; create user FEDORA_DB_USER with encrypted password 'FEDORA_DB_PASSWORD'; grant all privileges on database FEDORA_DB to FEDORA_DB_USER; \\q FEDORA_DB : fcrepo This will be used as the database Fedora will store the repository in. FEDORA_DB_USER : fedora FEDORA_DB_PASSWORD : fedora Again, this should be a secure password of some kind; leaving it as fedora is not recommended. Adding a Fedora Configuration The Fedora configuration is going to come in a few different chunks that need to be in place before Fedora will be functional. We\u2019re going to place several files outright, with mildly modified parameters according to our configuration. The basics of these configuration files have been pulled largely from the templates in Islandora-Devops/ansible-role-fcrepo ; you may consider referencing the playbook\u2019s templates directory for more details. i8_namespaces.cnd is a list of namespaces used by Islandora 8 that may not necessarily be present in Fedora; we add them here to ensure we can use them in queries. /opt/fcrepo/config/i8_namespaces.cnd | tomcat:tomcat/644 <acl = 'http://www.w3.org/ns/auth/acl#'> <bf = 'http://id.loc.gov/ontologies/bibframe/'> <cc = 'http://creativecommons.org/ns#'> <dcterms = 'http://purl.org/dc/terms/'> <dwc = 'http://rs.tdwg.org/dwc/terms/'> <exif = 'http://www.w3.org/2003/12/exif/ns#'> <fedoramodel = 'info:fedora/fedora-system:def/model#'> <geo = 'http://www.w3.org/2003/01/geo/wgs84_pos#'> <gn = 'http://www.geonames.org/ontology#'> <iana = 'http://www.iana.org/assignments/relation/'> <islandorarelsext = 'http://islandora.ca/ontology/relsext#'> <islandorarelsint = 'http://islandora.ca/ontology/relsint#'> <ldp = 'http://www.w3.org/ns/ldp#'> <nfo = 'http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#'> <ore = 'http://www.openarchives.org/ore/terms/'> <owl = 'http://www.w3.org/2002/07/owl#'> <pcdm = 'http://pcdm.org/models#'> <pcdmfmt = 'http://pcdm.org/file-format-types#'> <pcdmrts = 'http://pcdm.org/rights#'> <pcdmuse = 'http://pcdm.org/use#'> <pcdmwrks = 'http://pcdm.org/works#'> <prov = 'http://www.w3.org/ns/prov#'> <rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'> <rdfs = 'http://www.w3.org/2000/01/rdf-schema#'> <rel = 'http://id.loc.gov/vocabulary/relators/'> <schema = 'http://schema.org/'> <skos = 'http://www.w3.org/2004/02/skos/core#'> <xml = 'http://www.w3.org/XML/1998/namespace'> <xmlns = 'http://www.w3.org/2000/xmlns/'> <xs = 'http://www.w3.org/2001/XMLSchema'> <xsi = 'http://www.w3.org/2001/XMLSchema-instance'> We intend to have Crayfish installed later. Since Fedora needs to be able to read data from Crayfish, we need to tell Fedora that the Crayfish endpoint is a valid data source. /opt/fcrepo/config/allowed_hosts.txt | tomcat:tomcat/644 http://localhost:CRAYFISH_PORT/ CRAYFISH_PORT : 80 This guide will install Crayfish on the same port that Drupal is installed on. This may not be desirable, and if Crayfish is installed on a different port later, that change should be reflected here. The next part of the configuration defines where the pieces of the actual repository will live. Note that this file contains some of the defined FEDORA_DB variables from earlier. /opt/fcrepo/config/repository.json | tomcat:tomcat/644 { \"name\" : \"repo\", \"jndiName\" : \"\", \"workspaces\" : { \"predefined\" : [\"default\"], \"default\" : \"default\", \"allowCreation\" : true, \"cacheSize\" : 10000 }, \"storage\" : { \"persistence\": { \"type\" : \"db\", \"connectionUrl\": \"jdbc:postgresql://localhost:5432/FEDORA_DB\", \"driver\" : \"org.postgresql.Driver\", \"username\" : \"FEDORA_DB_USER\", \"password\" : \"FEDORA_DB_PASSWORD\" }, \"binaryStorage\" : { \"type\" : \"file\", \"directory\" : \"/opt/fcrepo/data/binaries\", \"minimumBinarySizeInBytes\" : 4096 } }, \"security\" : { \"anonymous\" : { \"roles\" : [\"readonly\",\"readwrite\",\"admin\"], \"useOnFailedLogin\" : false }, \"providers\" : [ { \"classname\" : \"org.fcrepo.auth.common.BypassSecurityServletAuthenticationProvider\" } ] }, \"garbageCollection\" : { \"threadPool\" : \"modeshape-gc\", \"initialTime\" : \"00:00\", \"intervalInHours\" : 24 }, \"node-types\" : [\"fedora-node-types.cnd\", \"file:/opt/fcrepo/config/i8_namespaces.cnd\"] } Finally, we need an actual fcrepo-config.xml to pull this configuration into place. There's nothing to edit in here by default, but pay attention to the p:repositoryConfiguration property of the modeshapeRepofactory bean, which contains the path to the repository.json file we made earlier. If you've placed this somewhere else, you'll need to change it here. /opt/fcrepo/config/fcrepo-config.xml | tomcat:tomcat/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:task=\"http://www.springframework.org/schema/task\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:util=\"http://www.springframework.org/schema/util\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\"> <context:property-placeholder/> <context:annotation-config/> <context:component-scan base-package=\"org.fcrepo\"/> <bean name=\"modeshapeRepofactory\" class=\"org.fcrepo.kernel.modeshape.spring.ModeShapeRepositoryFactoryBean\" p:repositoryConfiguration=\"file:///opt/fcrepo/config/repository.json\" depends-on=\"authenticationProvider\"/> <bean name=\"authenticationProvider\" class=\"org.fcrepo.auth.common.ShiroAuthenticationProvider\"/> <bean name=\"headerProvider\" class=\"org.fcrepo.auth.common.HttpHeaderPrincipalProvider\"> <property name=\"headerName\" value=\"X-Islandora\"/> <property name=\"separator\" value=\",\"/> </bean> <bean name=\"delegatedPrincipalProvider\" class=\"org.fcrepo.auth.common.DelegateHeaderPrincipalProvider\"/> <bean name=\"accessRolesProvider\" class=\"org.fcrepo.auth.webac.WebACRolesProvider\"/> <bean id=\"webACAuthorizingRealm\" class=\"org.fcrepo.auth.webac.WebACAuthorizingRealm\" /> <bean id=\"servletContainerAuthenticatingRealm\" class=\"org.fcrepo.auth.common.ServletContainerAuthenticatingRealm\" /> <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"> <property name=\"realms\"> <util:set set-class=\"java.util.HashSet\"> <ref bean=\"webACAuthorizingRealm\"/> <ref bean=\"servletContainerAuthenticatingRealm\"/> </util:set> </property> </bean> <bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/> <bean id=\"servletContainerAuthFilter\" class=\"org.fcrepo.auth.common.ServletContainerAuthFilter\"/> <bean id=\"webACFilter\" class=\"org.fcrepo.auth.webac.WebACFilter\"/> <bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"> <property name=\"securityManager\" ref=\"securityManager\"/> <property name=\"filterChainDefinitions\"> <value> /** = servletContainerAuthFilter,headerProvider,delegatedPrincipalProvider,webACFilter </value> </property> </bean> <util:list id=\"translationChain\" value-type=\"org.fcrepo.kernel.api.identifiers.InternalIdentifierConverter\"> <bean class=\"org.fcrepo.kernel.modeshape.identifiers.HashConverter\"/> <bean class=\"org.fcrepo.kernel.modeshape.identifiers.NamespaceConverter\"/> </util:list> <bean class=\"org.fcrepo.jms.JMSTopicPublisher\"> <constructor-arg value=\"fedora\"/> </bean> <bean id=\"connectionFactory\" class=\"org.apache.activemq.ActiveMQConnectionFactory\" depends-on=\"jmsBroker\" p:brokerURL=\"vm://${fcrepo.jms.host:localhost}:${fcrepo.dynamic.jms.port:61616}?create=false\"/> <bean name=\"jmsBroker\" class=\"org.apache.activemq.xbean.BrokerFactoryBean\" p:config=\"${fcrepo.activemq.configuration:classpath:/config/activemq.xml}\" p:start=\"true\"/> <bean class=\"org.fcrepo.jms.DefaultMessageFactory\"/> <bean class=\"org.fcrepo.kernel.modeshape.observer.SimpleObserver\"/> <bean name=\"fedoraEventFilter\" class=\"org.fcrepo.kernel.modeshape.observer.DefaultFilter\"/> <bean name=\"fedoraEventMapper\" class=\"org.fcrepo.kernel.modeshape.observer.eventmappings.AllNodeEventsOneEvent\"/> <bean name=\"fedoraInternalEventBus\" class=\"com.google.common.eventbus.EventBus\"/> <bean name=\"rdfNamespaceRegistry\" class=\"org.fcrepo.kernel.api.rdf.RdfNamespaceRegistry\" init-method=\"init\" destroy-method=\"shutdown\"> <property name=\"configPath\" value=\"${fcrepo.namespace.registry:classpath:/namespaces.yml}\" /> <property name=\"monitorForChanges\" value=\"true\" /> </bean> <bean name=\"externalContentPathValidator\" class=\"org.fcrepo.http.api.ExternalContentPathValidator\" init-method=\"init\" destroy-method=\"shutdown\"> <property name=\"configPath\" value=\"${fcrepo.external.content.allowed:#{null}}\" /> <property name=\"monitorForChanges\" value=\"true\" /> </bean> <bean name=\"externalContentHandlerFactory\" class=\"org.fcrepo.http.api.ExternalContentHandlerFactory\"> <property name=\"validator\" ref=\"externalContentPathValidator\" /> </bean> <task:scheduler id=\"taskScheduler\" /> <task:executor id=\"taskExecutor\" pool-size=\"1\" /> <task:annotation-driven executor=\"taskExecutor\" scheduler=\"taskScheduler\" /> <bean class=\"org.modeshape.jcr.ModeShapeEngine\" init-method=\"start\"/> <bean id=\"connectionManager\" class=\"org.apache.http.impl.conn.PoolingHttpClientConnectionManager\" /> <bean class=\"org.fcrepo.http.commons.session.SessionFactory\"/> </beans> Adding the Fedora Variables to JAVA_OPTS We need our Tomcat JAVA_OPTS to include references to our repository configuration. /opt/tomcat/bin/setenv.sh Before : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -server -Xmx1500m -Xms1000m\" After : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -Dfcrepo.modeshape.configuration=file:///opt/fcrepo/config/repository.json -Dfcrepo.home=/opt/fcrepo/data -Dfcrepo.spring.configuration=file:///opt/fcrepo/config/fcrepo-config.xml -server -Xmx1500m -Xms1000m\" Ensuring Tomcat Users Are In Place While not strictly necessary, we can use the tomcat-users.xml file to give us direct access to the Fedora endpoint. Fedora defines, out of the box, a fedoraAdmin and fedoraUser role that can be reflected in the users list for access. The following file will also include the base tomcat user. As always, these default passwords should likely not stay as the defaults. /opt/tomcat/conf/tomcat-users.xml | tomcat:tomcat/600 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <role rolename=\"tomcat\"/> <role rolename=\"fedoraAdmin\"/> <role rolename=\"fedoraUser\"/> <user username=\"tomcat\" password=\"TOMCAT_PASSWORD\" roles=\"tomcat\"/> <user username=\"fedoraAdmin\" password=\"FEDORA_ADMIN_PASSWORD\" roles=\"fedoraAdmin\"/> <user username=\"fedoraUser\" password=\"FEDORA_USER_PASSWORD\" roles=\"fedoraUser\"/> </tomcat-users> TOMCAT_PASSWORD : tomcat FEDORA_ADMIN_PASSWORD : islandora FEDORA_USER_PASSWORD : islandora Downloading and Placing the Latest Release Fedora .war files are packaged up as releases on the official GitHub repository; you can find the latest version at the releases page; the official GitHub repository is labelled as fcrepo4 but does actually contain more recent versions than 4. You should download the most recent stable release. sudo wget -O fcrepo.war FCREPO_WAR_URL sudo mv fcrepo.war /opt/tomcat/webapps sudo chown tomcat:tomcat /opt/tomcat/webapps/fcrepo.war FCREPO_WAR_URL : This can be found at the fcrepo downloads page ; the file you're looking for is: Tagged in green as the 'Latest release' The .war version of the file Restarting the Tomcat Service As before, restart the Tomcat service to get Fedora up and running. sudo systemctl restart tomcat Syn Downloading the Syn JAR File A compiled JAR of Syn can be found on the Syn releases page . We\u2019re going to add this to the list libraries accessible to Tomcat. sudo wget -P /opt/tomcat/lib SYN_JAR_URL # Ensure the library has the correct permissions. sudo chown -R tomcat:tomcat /opt/tomcat/lib sudo chmod -R 640 /opt/tomcat/lib SYN_JAR_URL : The latest stable release of the Syn JAR from the releases page . Specifically, the JAR compiled as -all.jar is required. Generating an SSL Key for Syn For Islandora and Fedora to talk to each other, an SSL key needs to be generated for use with Syn. We\u2019re going to make a spot where such keys can live, and generate one. sudo mkdir /opt/keys sudo openssl genrsa -out \"/opt/keys/syn_private.key\" 2048 sudo openssl rsa -pubout -in \"/opt/keys/syn_private.key\" -out \"/opt/keys/syn_public.key\" sudo chown www-data:www-data /opt/keys/syn* Placing the Syn Settings Syn sites and tokens belong in a settings file that we\u2019re going to reference in Tomcat. /opt/fcrepo/config/syn-settings.xml | tomcat:tomcat/600 <config version='1' header='X-Islandora'> <site algorithm='RS256' encoding='PEM' anonymous='true' default='true' path='/opt/keys/syn_public.key'/> <token user='islandora' roles='fedoraAdmin'>ISLANDORA_SYN_TOKEN</token> </config> ISLANDORA_SYN_TOKEN : islandora This should be a secure generated token rather than this default; it will be configured on the Drupal side later. Adding the Syn Valve to Tomcat Referencing the valve we\u2019ve created in our syn-settings.xml involves creating a <Valve> entry in Tomcat\u2019s context.xml : /opt/tomcat/conf/context.xml Before : 29 | --> 30 | </Context> After : 29 | --> 30 | <Valve className=\"ca.islandora.syn.valve.SynValve\" pathname=\"/opt/fcrepo/config/syn-settings.xml\"/> 31 | </Context> Restarting Tomcat Finally, restart tomcat to apply the new configurations. sudo systemctl restart tomcat Blazegraph 2 Creating a Working Space for Blazegraph Blazegraph needs a space for configurations and data; we\u2019re going to create this space in /opt . sudo mkdir -p /opt/blazegraph/data sudo mkdir /opt/blazegraph/conf sudo chown -R tomcat:tomcat /opt/blazegraph Downloading and Placing the Blazegraph WAR The Blazegraph .war file can be found in a few different places, but to ensure we\u2019re able to easily wget it, we\u2019re going to use the maven.org repository link to grab it. cd /opt sudo wget -O blazegraph.war BLAZEGRAPH_WARFILE_LINK sudo mv blazegraph.war /opt/tomcat/webapps sudo chown tomcat:tomcat /opt/tomcat/webapps/blazegraph.war BLAZEGRAPH_WAR_URL: You can find a link to this at the Maven repository for Blazegraph ; you\u2019ll want to click the link for the latest version of Blazegraph 2.1.x, then get the link to the .war file within that version folder. Once this is downloaded, give it a moment to expand before moving on to the next step. Configuring Logging We would like to have an appropriate logging configuration for Blazegraph, which can be useful for looking at incoming traffic and determining if anything has gone wrong with Blazegraph. Our logger isn\u2019t going to be much different than the default logger; it can be made more or less verbose by changing the default WARN levels. There are several other loggers that can be enabled, like a SPARQL query trace or summary query evaluation log; if these are desired they should be added in. Consult the Blazegraph documentation for more details. /opt/blazegraph/conf/log4j.properties | tomcat:tomcat/644 log4j.rootCategory=WARN, dest1 # Loggers. log4j.logger.com.bigdata=WARN log4j.logger.com.bigdata.btree=WARN # Normal data loader (single threaded). #log4j.logger.com.bigdata.rdf.store.DataLoader=INFO # dest1 log4j.appender.dest1=org.apache.log4j.ConsoleAppender log4j.appender.dest1.layout=org.apache.log4j.PatternLayout log4j.appender.dest1.layout.ConversionPattern=%-5p: %F:%L: %m%n #log4j.appender.dest1.layout.ConversionPattern=%-5p: %r %l: %m%n #log4j.appender.dest1.layout.ConversionPattern=%-5p: %m%n #log4j.appender.dest1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n #log4j.appender.dest1.layout.ConversionPattern=%-4r(%d) [%t] %-5p %c(%l:%M) %x - %m%n # Rule execution log. This is a formatted log file (comma delimited). log4j.logger.com.bigdata.relation.rule.eval.RuleLog=INFO,ruleLog log4j.additivity.com.bigdata.relation.rule.eval.RuleLog=false log4j.appender.ruleLog=org.apache.log4j.FileAppender log4j.appender.ruleLog.Threshold=ALL log4j.appender.ruleLog.File=/var/log/blazegraph/rules.log log4j.appender.ruleLog.Append=true log4j.appender.ruleLog.BufferedIO=false log4j.appender.ruleLog.layout=org.apache.log4j.PatternLayout log4j.appender.ruleLog.layout.ConversionPattern=%m Adding a Blazegraph Configuration Our configuration will be built from a few different files that we will eventually reference in JAVA_OPTS and directly apply to Blazegraph; these include most of the functional pieces Blazegraph requires, as well as a generalized configuration for the islandora namespace it will use. As with most large configurations like this, these should likely be tuned to your preferences, and the following files only represent sensible defaults. /opt/blazegraph/conf/RWStore.properties | tomcat:tomcat/644 com.bigdata.journal.AbstractJournal.file=/opt/blazegraph/data/blazegraph.jnl com.bigdata.journal.AbstractJournal.bufferMode=DiskRW com.bigdata.service.AbstractTransactionService.minReleaseAge=1 com.bigdata.journal.Journal.groupCommit=false com.bigdata.btree.writeRetentionQueue.capacity=4000 com.bigdata.btree.BTree.branchingFactor=128 com.bigdata.journal.AbstractJournal.initialExtent=209715200 com.bigdata.journal.AbstractJournal.maximumExtent=209715200 com.bigdata.rdf.sail.truthMaintenance=false com.bigdata.rdf.store.AbstractTripleStore.quads=true com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false com.bigdata.rdf.store.AbstractTripleStore.textIndex=false com.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.NoAxioms com.bigdata.namespace.kb.lex.com.bigdata.btree.BTree.branchingFactor=400 com.bigdata.namespace.kb.spo.com.bigdata.btree.BTree.branchingFactor=1024 com.bigdata.journal.Journal.collectPlatformStatistics=false /opt/blazegraph/conf/blazegraph.properties | tomcat:tomcat/644 com.bigdata.rdf.store.AbstractTripleStore.textIndex=false com.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.OwlAxioms com.bigdata.rdf.sail.isolatableIndices=false com.bigdata.rdf.store.AbstractTripleStore.justify=true com.bigdata.rdf.sail.truthMaintenance=true com.bigdata.rdf.sail.namespace=islandora com.bigdata.rdf.store.AbstractTripleStore.quads=false com.bigdata.namespace.islandora.lex.com.bigdata.btree.BTree.branchingFactor=400 com.bigdata.journal.Journal.groupCommit=false com.bigdata.namespace.islandora.spo.com.bigdata.btree.BTree.branchingFactor=1024 com.bigdata.rdf.store.AbstractTripleStore.geoSpatial=false com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false /opt/blazegraph/conf/inference.nt | tomcat:tomcat/644 <http://pcdm.org/models#memberOf> <http://www.w3.org/2002/07/owl#inverseOf> <http://pcdm.org/models#hasMember> . <http://pcdm.org/models#fileOf> <http://www.w3.org/2002/07/owl#inverseOf> <http://pcdm.org/models#hasFile> . Specifying the RWStore.properties in JAVA_OPTS In order to enable our configuration when Tomcat starts, we need to reference the location of RWStore.properties in the JAVA_OPTS environment variable that Tomcat uses. /opt/tomcat/bin/setenv.sh Before : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -Dfcrepo.modeshape.configuration=file:///opt/fcrepo/config/repository.json -Dfcrepo.home=/opt/fcrepo/data -Dfcrepo.spring.configuration=file:///opt/fcrepo/config/fcrepo-config.xml -server -Xmx1500m -Xms1000m\" After : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -Dfcrepo.modeshape.configuration=file:///opt/fcrepo/config/repository.json -Dfcrepo.home=/opt/fcrepo/data -Dfcrepo.spring.configuration=file:///opt/fcrepo/config/fcrepo-config.xml -Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile=/opt/blazegraph/conf/RWStore.properties -Dlog4j.configuration=file:/opt/blazegraph/conf/log4j.properties -server -Xmx1500m -Xms1000m\" Restarting Tomcat Finally, restart Tomcat to pick up the changes we\u2019ve made. sudo systemctl restart tomcat Installing Blazegraph Namespaces and Inference The two other files we created, blazegraph.properties and inference.nt , contain information that Blazegraph requires in order to establish and correctly use the datasets Islandora will send to it. First, we need to create a dataset - contained in blazegraph.properties - and then we need to inform that dataset of the inference set we have contained in inference.nt . curl -X POST -H \"Content-Type: text/plain\" --data-binary @/opt/blazegraph/conf/blazegraph.properties http://localhost:8080/blazegraph/namespace # If this worked correctly, Blazegraph should respond with \"CREATED: islandora\" # to let us know it created the islandora namespace. curl -X POST -H \"Content-Type: text/plain\" --data-binary @/opt/blazegraph/conf/inference.nt http://localhost:8080/blazegraph/namespace/islandora/sparql # If this worked correctly, Blazegraph should respond with some XML letting us # know it added the 2 entries from inference.nt to the namespace.","title":"Installing Fedora, Syn, and Blazegraph"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#installing-fedora-syn-and-blazegraph","text":"","title":"Installing Fedora, Syn, and Blazegraph"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#in-this-section-we-will-install","text":"Fedora 5 , the back-end repository that Islandora will use Syn , the authentication broker that will manage communication with Fedora Blazegraph , the resource index layer on top of Fedora for managing discoverability via RDF","title":"In this section, we will install:"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#fedora-5","text":"","title":"Fedora 5"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#creating-a-working-space-for-fedora","text":"Fedora\u2019s configuration and data won\u2019t live with Tomcat itself; rather, we\u2019re going to prepare a space for them to make them easier to manage. sudo mkdir -p /opt/fcrepo/data/objects sudo mkdir /opt/fcrepo/config sudo chown -R tomcat:tomcat /opt/fcrepo","title":"Creating a Working Space for Fedora"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#creating-a-database-for-fedora","text":"The method for creating the database here will closely mimic the method we used to create our database for Drupal. sudo -u postgres psql create database FEDORA_DB; create user FEDORA_DB_USER with encrypted password 'FEDORA_DB_PASSWORD'; grant all privileges on database FEDORA_DB to FEDORA_DB_USER; \\q FEDORA_DB : fcrepo This will be used as the database Fedora will store the repository in. FEDORA_DB_USER : fedora FEDORA_DB_PASSWORD : fedora Again, this should be a secure password of some kind; leaving it as fedora is not recommended.","title":"Creating a Database for Fedora"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#adding-a-fedora-configuration","text":"The Fedora configuration is going to come in a few different chunks that need to be in place before Fedora will be functional. We\u2019re going to place several files outright, with mildly modified parameters according to our configuration. The basics of these configuration files have been pulled largely from the templates in Islandora-Devops/ansible-role-fcrepo ; you may consider referencing the playbook\u2019s templates directory for more details. i8_namespaces.cnd is a list of namespaces used by Islandora 8 that may not necessarily be present in Fedora; we add them here to ensure we can use them in queries. /opt/fcrepo/config/i8_namespaces.cnd | tomcat:tomcat/644 <acl = 'http://www.w3.org/ns/auth/acl#'> <bf = 'http://id.loc.gov/ontologies/bibframe/'> <cc = 'http://creativecommons.org/ns#'> <dcterms = 'http://purl.org/dc/terms/'> <dwc = 'http://rs.tdwg.org/dwc/terms/'> <exif = 'http://www.w3.org/2003/12/exif/ns#'> <fedoramodel = 'info:fedora/fedora-system:def/model#'> <geo = 'http://www.w3.org/2003/01/geo/wgs84_pos#'> <gn = 'http://www.geonames.org/ontology#'> <iana = 'http://www.iana.org/assignments/relation/'> <islandorarelsext = 'http://islandora.ca/ontology/relsext#'> <islandorarelsint = 'http://islandora.ca/ontology/relsint#'> <ldp = 'http://www.w3.org/ns/ldp#'> <nfo = 'http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#'> <ore = 'http://www.openarchives.org/ore/terms/'> <owl = 'http://www.w3.org/2002/07/owl#'> <pcdm = 'http://pcdm.org/models#'> <pcdmfmt = 'http://pcdm.org/file-format-types#'> <pcdmrts = 'http://pcdm.org/rights#'> <pcdmuse = 'http://pcdm.org/use#'> <pcdmwrks = 'http://pcdm.org/works#'> <prov = 'http://www.w3.org/ns/prov#'> <rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'> <rdfs = 'http://www.w3.org/2000/01/rdf-schema#'> <rel = 'http://id.loc.gov/vocabulary/relators/'> <schema = 'http://schema.org/'> <skos = 'http://www.w3.org/2004/02/skos/core#'> <xml = 'http://www.w3.org/XML/1998/namespace'> <xmlns = 'http://www.w3.org/2000/xmlns/'> <xs = 'http://www.w3.org/2001/XMLSchema'> <xsi = 'http://www.w3.org/2001/XMLSchema-instance'> We intend to have Crayfish installed later. Since Fedora needs to be able to read data from Crayfish, we need to tell Fedora that the Crayfish endpoint is a valid data source. /opt/fcrepo/config/allowed_hosts.txt | tomcat:tomcat/644 http://localhost:CRAYFISH_PORT/ CRAYFISH_PORT : 80 This guide will install Crayfish on the same port that Drupal is installed on. This may not be desirable, and if Crayfish is installed on a different port later, that change should be reflected here. The next part of the configuration defines where the pieces of the actual repository will live. Note that this file contains some of the defined FEDORA_DB variables from earlier. /opt/fcrepo/config/repository.json | tomcat:tomcat/644 { \"name\" : \"repo\", \"jndiName\" : \"\", \"workspaces\" : { \"predefined\" : [\"default\"], \"default\" : \"default\", \"allowCreation\" : true, \"cacheSize\" : 10000 }, \"storage\" : { \"persistence\": { \"type\" : \"db\", \"connectionUrl\": \"jdbc:postgresql://localhost:5432/FEDORA_DB\", \"driver\" : \"org.postgresql.Driver\", \"username\" : \"FEDORA_DB_USER\", \"password\" : \"FEDORA_DB_PASSWORD\" }, \"binaryStorage\" : { \"type\" : \"file\", \"directory\" : \"/opt/fcrepo/data/binaries\", \"minimumBinarySizeInBytes\" : 4096 } }, \"security\" : { \"anonymous\" : { \"roles\" : [\"readonly\",\"readwrite\",\"admin\"], \"useOnFailedLogin\" : false }, \"providers\" : [ { \"classname\" : \"org.fcrepo.auth.common.BypassSecurityServletAuthenticationProvider\" } ] }, \"garbageCollection\" : { \"threadPool\" : \"modeshape-gc\", \"initialTime\" : \"00:00\", \"intervalInHours\" : 24 }, \"node-types\" : [\"fedora-node-types.cnd\", \"file:/opt/fcrepo/config/i8_namespaces.cnd\"] } Finally, we need an actual fcrepo-config.xml to pull this configuration into place. There's nothing to edit in here by default, but pay attention to the p:repositoryConfiguration property of the modeshapeRepofactory bean, which contains the path to the repository.json file we made earlier. If you've placed this somewhere else, you'll need to change it here. /opt/fcrepo/config/fcrepo-config.xml | tomcat:tomcat/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:task=\"http://www.springframework.org/schema/task\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:util=\"http://www.springframework.org/schema/util\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\"> <context:property-placeholder/> <context:annotation-config/> <context:component-scan base-package=\"org.fcrepo\"/> <bean name=\"modeshapeRepofactory\" class=\"org.fcrepo.kernel.modeshape.spring.ModeShapeRepositoryFactoryBean\" p:repositoryConfiguration=\"file:///opt/fcrepo/config/repository.json\" depends-on=\"authenticationProvider\"/> <bean name=\"authenticationProvider\" class=\"org.fcrepo.auth.common.ShiroAuthenticationProvider\"/> <bean name=\"headerProvider\" class=\"org.fcrepo.auth.common.HttpHeaderPrincipalProvider\"> <property name=\"headerName\" value=\"X-Islandora\"/> <property name=\"separator\" value=\",\"/> </bean> <bean name=\"delegatedPrincipalProvider\" class=\"org.fcrepo.auth.common.DelegateHeaderPrincipalProvider\"/> <bean name=\"accessRolesProvider\" class=\"org.fcrepo.auth.webac.WebACRolesProvider\"/> <bean id=\"webACAuthorizingRealm\" class=\"org.fcrepo.auth.webac.WebACAuthorizingRealm\" /> <bean id=\"servletContainerAuthenticatingRealm\" class=\"org.fcrepo.auth.common.ServletContainerAuthenticatingRealm\" /> <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"> <property name=\"realms\"> <util:set set-class=\"java.util.HashSet\"> <ref bean=\"webACAuthorizingRealm\"/> <ref bean=\"servletContainerAuthenticatingRealm\"/> </util:set> </property> </bean> <bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/> <bean id=\"servletContainerAuthFilter\" class=\"org.fcrepo.auth.common.ServletContainerAuthFilter\"/> <bean id=\"webACFilter\" class=\"org.fcrepo.auth.webac.WebACFilter\"/> <bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"> <property name=\"securityManager\" ref=\"securityManager\"/> <property name=\"filterChainDefinitions\"> <value> /** = servletContainerAuthFilter,headerProvider,delegatedPrincipalProvider,webACFilter </value> </property> </bean> <util:list id=\"translationChain\" value-type=\"org.fcrepo.kernel.api.identifiers.InternalIdentifierConverter\"> <bean class=\"org.fcrepo.kernel.modeshape.identifiers.HashConverter\"/> <bean class=\"org.fcrepo.kernel.modeshape.identifiers.NamespaceConverter\"/> </util:list> <bean class=\"org.fcrepo.jms.JMSTopicPublisher\"> <constructor-arg value=\"fedora\"/> </bean> <bean id=\"connectionFactory\" class=\"org.apache.activemq.ActiveMQConnectionFactory\" depends-on=\"jmsBroker\" p:brokerURL=\"vm://${fcrepo.jms.host:localhost}:${fcrepo.dynamic.jms.port:61616}?create=false\"/> <bean name=\"jmsBroker\" class=\"org.apache.activemq.xbean.BrokerFactoryBean\" p:config=\"${fcrepo.activemq.configuration:classpath:/config/activemq.xml}\" p:start=\"true\"/> <bean class=\"org.fcrepo.jms.DefaultMessageFactory\"/> <bean class=\"org.fcrepo.kernel.modeshape.observer.SimpleObserver\"/> <bean name=\"fedoraEventFilter\" class=\"org.fcrepo.kernel.modeshape.observer.DefaultFilter\"/> <bean name=\"fedoraEventMapper\" class=\"org.fcrepo.kernel.modeshape.observer.eventmappings.AllNodeEventsOneEvent\"/> <bean name=\"fedoraInternalEventBus\" class=\"com.google.common.eventbus.EventBus\"/> <bean name=\"rdfNamespaceRegistry\" class=\"org.fcrepo.kernel.api.rdf.RdfNamespaceRegistry\" init-method=\"init\" destroy-method=\"shutdown\"> <property name=\"configPath\" value=\"${fcrepo.namespace.registry:classpath:/namespaces.yml}\" /> <property name=\"monitorForChanges\" value=\"true\" /> </bean> <bean name=\"externalContentPathValidator\" class=\"org.fcrepo.http.api.ExternalContentPathValidator\" init-method=\"init\" destroy-method=\"shutdown\"> <property name=\"configPath\" value=\"${fcrepo.external.content.allowed:#{null}}\" /> <property name=\"monitorForChanges\" value=\"true\" /> </bean> <bean name=\"externalContentHandlerFactory\" class=\"org.fcrepo.http.api.ExternalContentHandlerFactory\"> <property name=\"validator\" ref=\"externalContentPathValidator\" /> </bean> <task:scheduler id=\"taskScheduler\" /> <task:executor id=\"taskExecutor\" pool-size=\"1\" /> <task:annotation-driven executor=\"taskExecutor\" scheduler=\"taskScheduler\" /> <bean class=\"org.modeshape.jcr.ModeShapeEngine\" init-method=\"start\"/> <bean id=\"connectionManager\" class=\"org.apache.http.impl.conn.PoolingHttpClientConnectionManager\" /> <bean class=\"org.fcrepo.http.commons.session.SessionFactory\"/> </beans>","title":"Adding a Fedora Configuration"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#adding-the-fedora-variables-to-java_opts","text":"We need our Tomcat JAVA_OPTS to include references to our repository configuration. /opt/tomcat/bin/setenv.sh Before : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -server -Xmx1500m -Xms1000m\" After : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -Dfcrepo.modeshape.configuration=file:///opt/fcrepo/config/repository.json -Dfcrepo.home=/opt/fcrepo/data -Dfcrepo.spring.configuration=file:///opt/fcrepo/config/fcrepo-config.xml -server -Xmx1500m -Xms1000m\"","title":"Adding the Fedora Variables to JAVA_OPTS"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#ensuring-tomcat-users-are-in-place","text":"While not strictly necessary, we can use the tomcat-users.xml file to give us direct access to the Fedora endpoint. Fedora defines, out of the box, a fedoraAdmin and fedoraUser role that can be reflected in the users list for access. The following file will also include the base tomcat user. As always, these default passwords should likely not stay as the defaults. /opt/tomcat/conf/tomcat-users.xml | tomcat:tomcat/600 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <role rolename=\"tomcat\"/> <role rolename=\"fedoraAdmin\"/> <role rolename=\"fedoraUser\"/> <user username=\"tomcat\" password=\"TOMCAT_PASSWORD\" roles=\"tomcat\"/> <user username=\"fedoraAdmin\" password=\"FEDORA_ADMIN_PASSWORD\" roles=\"fedoraAdmin\"/> <user username=\"fedoraUser\" password=\"FEDORA_USER_PASSWORD\" roles=\"fedoraUser\"/> </tomcat-users> TOMCAT_PASSWORD : tomcat FEDORA_ADMIN_PASSWORD : islandora FEDORA_USER_PASSWORD : islandora","title":"Ensuring Tomcat Users Are In Place"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#downloading-and-placing-the-latest-release","text":"Fedora .war files are packaged up as releases on the official GitHub repository; you can find the latest version at the releases page; the official GitHub repository is labelled as fcrepo4 but does actually contain more recent versions than 4. You should download the most recent stable release. sudo wget -O fcrepo.war FCREPO_WAR_URL sudo mv fcrepo.war /opt/tomcat/webapps sudo chown tomcat:tomcat /opt/tomcat/webapps/fcrepo.war FCREPO_WAR_URL : This can be found at the fcrepo downloads page ; the file you're looking for is: Tagged in green as the 'Latest release' The .war version of the file","title":"Downloading and Placing the Latest Release"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#restarting-the-tomcat-service","text":"As before, restart the Tomcat service to get Fedora up and running. sudo systemctl restart tomcat","title":"Restarting the Tomcat Service"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#syn","text":"","title":"Syn"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#downloading-the-syn-jar-file","text":"A compiled JAR of Syn can be found on the Syn releases page . We\u2019re going to add this to the list libraries accessible to Tomcat. sudo wget -P /opt/tomcat/lib SYN_JAR_URL # Ensure the library has the correct permissions. sudo chown -R tomcat:tomcat /opt/tomcat/lib sudo chmod -R 640 /opt/tomcat/lib SYN_JAR_URL : The latest stable release of the Syn JAR from the releases page . Specifically, the JAR compiled as -all.jar is required.","title":"Downloading the Syn JAR File"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#generating-an-ssl-key-for-syn","text":"For Islandora and Fedora to talk to each other, an SSL key needs to be generated for use with Syn. We\u2019re going to make a spot where such keys can live, and generate one. sudo mkdir /opt/keys sudo openssl genrsa -out \"/opt/keys/syn_private.key\" 2048 sudo openssl rsa -pubout -in \"/opt/keys/syn_private.key\" -out \"/opt/keys/syn_public.key\" sudo chown www-data:www-data /opt/keys/syn*","title":"Generating an SSL Key for Syn"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#placing-the-syn-settings","text":"Syn sites and tokens belong in a settings file that we\u2019re going to reference in Tomcat. /opt/fcrepo/config/syn-settings.xml | tomcat:tomcat/600 <config version='1' header='X-Islandora'> <site algorithm='RS256' encoding='PEM' anonymous='true' default='true' path='/opt/keys/syn_public.key'/> <token user='islandora' roles='fedoraAdmin'>ISLANDORA_SYN_TOKEN</token> </config> ISLANDORA_SYN_TOKEN : islandora This should be a secure generated token rather than this default; it will be configured on the Drupal side later.","title":"Placing the Syn Settings"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#adding-the-syn-valve-to-tomcat","text":"Referencing the valve we\u2019ve created in our syn-settings.xml involves creating a <Valve> entry in Tomcat\u2019s context.xml : /opt/tomcat/conf/context.xml Before : 29 | --> 30 | </Context> After : 29 | --> 30 | <Valve className=\"ca.islandora.syn.valve.SynValve\" pathname=\"/opt/fcrepo/config/syn-settings.xml\"/> 31 | </Context>","title":"Adding the Syn Valve to Tomcat"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#restarting-tomcat","text":"Finally, restart tomcat to apply the new configurations. sudo systemctl restart tomcat","title":"Restarting Tomcat"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#blazegraph-2","text":"","title":"Blazegraph 2"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#creating-a-working-space-for-blazegraph","text":"Blazegraph needs a space for configurations and data; we\u2019re going to create this space in /opt . sudo mkdir -p /opt/blazegraph/data sudo mkdir /opt/blazegraph/conf sudo chown -R tomcat:tomcat /opt/blazegraph","title":"Creating a Working Space for Blazegraph"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#downloading-and-placing-the-blazegraph-war","text":"The Blazegraph .war file can be found in a few different places, but to ensure we\u2019re able to easily wget it, we\u2019re going to use the maven.org repository link to grab it. cd /opt sudo wget -O blazegraph.war BLAZEGRAPH_WARFILE_LINK sudo mv blazegraph.war /opt/tomcat/webapps sudo chown tomcat:tomcat /opt/tomcat/webapps/blazegraph.war BLAZEGRAPH_WAR_URL: You can find a link to this at the Maven repository for Blazegraph ; you\u2019ll want to click the link for the latest version of Blazegraph 2.1.x, then get the link to the .war file within that version folder. Once this is downloaded, give it a moment to expand before moving on to the next step.","title":"Downloading and Placing the Blazegraph WAR"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#configuring-logging","text":"We would like to have an appropriate logging configuration for Blazegraph, which can be useful for looking at incoming traffic and determining if anything has gone wrong with Blazegraph. Our logger isn\u2019t going to be much different than the default logger; it can be made more or less verbose by changing the default WARN levels. There are several other loggers that can be enabled, like a SPARQL query trace or summary query evaluation log; if these are desired they should be added in. Consult the Blazegraph documentation for more details. /opt/blazegraph/conf/log4j.properties | tomcat:tomcat/644 log4j.rootCategory=WARN, dest1 # Loggers. log4j.logger.com.bigdata=WARN log4j.logger.com.bigdata.btree=WARN # Normal data loader (single threaded). #log4j.logger.com.bigdata.rdf.store.DataLoader=INFO # dest1 log4j.appender.dest1=org.apache.log4j.ConsoleAppender log4j.appender.dest1.layout=org.apache.log4j.PatternLayout log4j.appender.dest1.layout.ConversionPattern=%-5p: %F:%L: %m%n #log4j.appender.dest1.layout.ConversionPattern=%-5p: %r %l: %m%n #log4j.appender.dest1.layout.ConversionPattern=%-5p: %m%n #log4j.appender.dest1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n #log4j.appender.dest1.layout.ConversionPattern=%-4r(%d) [%t] %-5p %c(%l:%M) %x - %m%n # Rule execution log. This is a formatted log file (comma delimited). log4j.logger.com.bigdata.relation.rule.eval.RuleLog=INFO,ruleLog log4j.additivity.com.bigdata.relation.rule.eval.RuleLog=false log4j.appender.ruleLog=org.apache.log4j.FileAppender log4j.appender.ruleLog.Threshold=ALL log4j.appender.ruleLog.File=/var/log/blazegraph/rules.log log4j.appender.ruleLog.Append=true log4j.appender.ruleLog.BufferedIO=false log4j.appender.ruleLog.layout=org.apache.log4j.PatternLayout log4j.appender.ruleLog.layout.ConversionPattern=%m","title":"Configuring Logging"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#adding-a-blazegraph-configuration","text":"Our configuration will be built from a few different files that we will eventually reference in JAVA_OPTS and directly apply to Blazegraph; these include most of the functional pieces Blazegraph requires, as well as a generalized configuration for the islandora namespace it will use. As with most large configurations like this, these should likely be tuned to your preferences, and the following files only represent sensible defaults. /opt/blazegraph/conf/RWStore.properties | tomcat:tomcat/644 com.bigdata.journal.AbstractJournal.file=/opt/blazegraph/data/blazegraph.jnl com.bigdata.journal.AbstractJournal.bufferMode=DiskRW com.bigdata.service.AbstractTransactionService.minReleaseAge=1 com.bigdata.journal.Journal.groupCommit=false com.bigdata.btree.writeRetentionQueue.capacity=4000 com.bigdata.btree.BTree.branchingFactor=128 com.bigdata.journal.AbstractJournal.initialExtent=209715200 com.bigdata.journal.AbstractJournal.maximumExtent=209715200 com.bigdata.rdf.sail.truthMaintenance=false com.bigdata.rdf.store.AbstractTripleStore.quads=true com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false com.bigdata.rdf.store.AbstractTripleStore.textIndex=false com.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.NoAxioms com.bigdata.namespace.kb.lex.com.bigdata.btree.BTree.branchingFactor=400 com.bigdata.namespace.kb.spo.com.bigdata.btree.BTree.branchingFactor=1024 com.bigdata.journal.Journal.collectPlatformStatistics=false /opt/blazegraph/conf/blazegraph.properties | tomcat:tomcat/644 com.bigdata.rdf.store.AbstractTripleStore.textIndex=false com.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.OwlAxioms com.bigdata.rdf.sail.isolatableIndices=false com.bigdata.rdf.store.AbstractTripleStore.justify=true com.bigdata.rdf.sail.truthMaintenance=true com.bigdata.rdf.sail.namespace=islandora com.bigdata.rdf.store.AbstractTripleStore.quads=false com.bigdata.namespace.islandora.lex.com.bigdata.btree.BTree.branchingFactor=400 com.bigdata.journal.Journal.groupCommit=false com.bigdata.namespace.islandora.spo.com.bigdata.btree.BTree.branchingFactor=1024 com.bigdata.rdf.store.AbstractTripleStore.geoSpatial=false com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false /opt/blazegraph/conf/inference.nt | tomcat:tomcat/644 <http://pcdm.org/models#memberOf> <http://www.w3.org/2002/07/owl#inverseOf> <http://pcdm.org/models#hasMember> . <http://pcdm.org/models#fileOf> <http://www.w3.org/2002/07/owl#inverseOf> <http://pcdm.org/models#hasFile> .","title":"Adding a Blazegraph Configuration"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#specifying-the-rwstoreproperties-in-java_opts","text":"In order to enable our configuration when Tomcat starts, we need to reference the location of RWStore.properties in the JAVA_OPTS environment variable that Tomcat uses. /opt/tomcat/bin/setenv.sh Before : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -Dfcrepo.modeshape.configuration=file:///opt/fcrepo/config/repository.json -Dfcrepo.home=/opt/fcrepo/data -Dfcrepo.spring.configuration=file:///opt/fcrepo/config/fcrepo-config.xml -server -Xmx1500m -Xms1000m\" After : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -Dfcrepo.modeshape.configuration=file:///opt/fcrepo/config/repository.json -Dfcrepo.home=/opt/fcrepo/data -Dfcrepo.spring.configuration=file:///opt/fcrepo/config/fcrepo-config.xml -Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile=/opt/blazegraph/conf/RWStore.properties -Dlog4j.configuration=file:/opt/blazegraph/conf/log4j.properties -server -Xmx1500m -Xms1000m\"","title":"Specifying the RWStore.properties in JAVA_OPTS"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#restarting-tomcat_1","text":"Finally, restart Tomcat to pick up the changes we\u2019ve made. sudo systemctl restart tomcat","title":"Restarting Tomcat"},{"location":"installation/manual/installing_fedora_syn_and_blazegraph/#installing-blazegraph-namespaces-and-inference","text":"The two other files we created, blazegraph.properties and inference.nt , contain information that Blazegraph requires in order to establish and correctly use the datasets Islandora will send to it. First, we need to create a dataset - contained in blazegraph.properties - and then we need to inform that dataset of the inference set we have contained in inference.nt . curl -X POST -H \"Content-Type: text/plain\" --data-binary @/opt/blazegraph/conf/blazegraph.properties http://localhost:8080/blazegraph/namespace # If this worked correctly, Blazegraph should respond with \"CREATED: islandora\" # to let us know it created the islandora namespace. curl -X POST -H \"Content-Type: text/plain\" --data-binary @/opt/blazegraph/conf/inference.nt http://localhost:8080/blazegraph/namespace/islandora/sparql # If this worked correctly, Blazegraph should respond with some XML letting us # know it added the 2 entries from inference.nt to the namespace.","title":"Installing Blazegraph Namespaces and Inference"},{"location":"installation/manual/installing_karaf_and_alpaca/","text":"Installing Karaf and Alpaca In this section, we will install: Apache ActiveMQ , a messaging server that will be used to handle communication between Alpaca and other components Apache Karaf , the Java application runtime that Alpaca will be deployed in Islandora/Alpaca , a suite of Java middleware applications that will handle communication between various components of Islandora 8 ActiveMQ 5 Installing ActiveMQ In our case, the default installation method for ActiveMQ via apt-get will suffice. sudo apt-get -y install activemq This will give us: A base configuration at /var/lib/activemq/conf A data storage directory at /var/lib/activemq/data The base ActiveMQ installation at /usr/share/activemq An activemq service that will be run on boot A user, activemq , who will be in charge of the ActiveMQ service Karaf 4 Creating a Karaf User Karaf, as well as its processes and service, will be owned by a user in charge of ensuring this portion of the stack is segregated and that the service is running. sudo addgroup karaf sudo adduser karaf --ingroup karaf --home /opt/karaf --shell /usr/bin As always, you will be prompted for a password, which you should create at this time. All other options can be left blank. Downloading and Placing Karaf Since there\u2019s no apt-get installer for Karaf, we\u2019re going to manually download and install it directly from its binary installer. cd /opt sudo wget -O karaf.tar.gz KARAF_TARBALL_LINK sudo tar -xzvf karaf.tar.gz sudo chown -R karaf:karaf KARAF_DIRECTORY sudo mv KARAF_DIRECTORY/* /opt/karaf KARAF_TARBALL_LINK : It\u2019s recommended to get the most recent version of Karaf 4.x. This will depend on the current version of Karaf, which can be found on the Karaf downloads page under \u201cKaraf Runtime\u201d. Like Solr, you can\u2019t directly wget these links, but clicking on the .tar.gz link for the binary distribution will bring you to a list of mirrors, as well as provide you with a recommended mirror you can use here. KARAF_DIRECTORY : This will depend on the exact version being used, but will likely be /opt/apache-karaf-VERSION , where VERSION is the current Karaf version number. Configuring Karaf Logging We\u2019re going to apply some basic logging to our Karaf installation that should suffice for an example. In a production installation, you may want to play around with some of these values for more personally useful logging. sudo mkdir /var/log/karaf sudo chown karaf:karaf /var/log/karaf /opt/karaf/etc/org.pos4j.pax.logging.cfg | karaf:karaf/644 # Root logger log4j.rootLogger=INFO, out, osgi:* log4j.throwableRenderer=org.apache.log4j.OsgiThrowableRenderer # File appender log4j.appender.out=org.apache.log4j.RollingFileAppender log4j.appender.out.layout=org.apache.log4j.PatternLayout log4j.appender.out.layout.ConversionPattern=%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} - %X{bundle.name } - %X{bundle.version} | %m%n log4j.appender.out.file=/var/log/karaf/karaf.log log4j.appender.out.append=true log4j.appender.out.maxFileSize=1MB log4j.appender.out.maxBackupIndex=10 # Camel Logger log4j.appender.camel=org.apache.log4j.RollingFileAppender log4j.appender.camel.layout=org.apache.log4j.PatternLayout log4j.appender.camel.layout.ConversionPattern=%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} - %X{bundle.na me} - %X{bundle.version} | %m%n log4j.appender.camel.file=/var/log/karaf/camel.log log4j.appender.camel.append=false log4j.appender.camel.maxFileSize=1MB log4j.appender.camel.maxBackupIndex=10 log4j.logger.org.apache.camel=INFO, camel # Islandora Logger log4j.appender.islandora=org.apache.log4j.RollingFileAppender log4j.appender.islandora.layout=org.apache.log4j.PatternLayout log4j.appender.islandora.layout.ConversionPattern=%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} - %X{bundl e.name} - %X{bundle.version} | %m%n log4j.appender.islandora.file=/var/log/karaf/islandora.log log4j.appender.islandora.append=false log4j.appender.islandora.maxFileSize=1MB log4j.appender.islandora.maxBackupIndex=10 log4j.logger.ca.islandora.camel=INFO, islandora Creating a setenv.sh Script for Karaf Similar to Tomcat, our Karaf service is going to rely on a setenv shell script to determine environment variables Karaf needs in place when running. For now, this will simply be the path to JAVA_HOME , but this also accepts many other parameters you can find in the default setenv script. /opt/karaf/bin/setenv | karaf:karaf/755 #!/bin/sh export JAVA_HOME=\"PATH_TO_JAVA_HOME\" PATH_TO_JAVA_HOME : This will be the same JAVA_HOME we used when installing Tomcat , and can be found using the same method (i.e., still /usr/lib/jvm/java-8-openjdk-amd64 if that's what it was before). Initializing Karaf We\u2019re going to start Karaf, then run the installer to put our configurations in place and generate a Karaf service. Once these are installed, we\u2019re going to stop Karaf, as from there on out its start/stop management should be handled via that service. sudo -u karaf /opt/karaf/bin/start # You may want to wait a bit for Karaf to start. # If you're not sure whether or not it's running, you can always run: # ps aux | grep karaf # to see if the server is up and running. /opt/karaf/bin/client feature:install wrapper /opt/karaf/bin/client wrapper:install /opt/karaf/bin/stop Creating and Starting the Karaf Service Installing the Karaf wrapper generates several service files that can be used on different types of systems. For this example installation on an Ubuntu 18.04 machine, we want to enable the karaf.service service so that Karaf is properly started on boot. sudo systemctl enable /opt/karaf/bin/karaf.service sudo systemctl start karaf Alpaca 1.0.x Adding the Required Karaf Repositories Karaf features can be installed from several different types of sources, but the fastest and easiest way to do so is from existing repository URLs that we can just plug into Karaf to provide us feature lists prepared and ready for installation. Like most interactions with Karaf, we can add these repositories using its built-in client . Notice These repositories are updated consistently, and their updates include revised dependency lists. Commonly, when repositories are out of date or otherwise mismatched, feature installation can result in an Unable to resolve root: missing requirement error; for this reason, this guide recommends using recently-updated versions of these repositories. That being said, if such errors occur despite installing the latest versions of these features, the maintainer of the features repository should be informed. For the Karaf features we\u2019re going to install, we need a few different repositories to be added to the list: /opt/karaf/bin/client repo-add mvn:org.apache.activemq/activemq-karaf/ACTIVEMQ_KARAF_VERSION/xml/features /opt/karaf/bin/client repo-add mvn:org.apache.camel.karaf/apache-camel/APACHE_CAMEL_VERSION/xml/features /opt/karaf/bin/client repo-add mvn:ca.islandora.alpaca/islandora-karaf/LATEST/xml/features # XXX: This shouldn't be strictly necessary, but appears to be a missing # upstream dependency for some fcrepo features. /opt/karaf/bin/client repo-add mvn:org.apache.jena/jena-osgi-features/JENA_OSGI_VERSION/xml/features ACTIVEMQ_KARAF_VERSION : The latest version of ActiveMQ Karaf 5.x.x; you can find this listed at the activemq-karaf repository page (e.g., 5.15.11 at the time of writing) APACHE_CAMEL_VERSION : The latest version of Apache Camel 2.x.x; you can find this listed at the apache-camel repository page (e.g., 2.25.0 at the time of writing) JENA_OSGI_VERSION : The latest version of the Apache Jena OSGi features; you can find this listed at the jena-osgi-features repository page (e.g., 3.14.0 at the time of writing) Configuring Karaf Features Our installed Karaf features require configuration files to know exactly where to route things coming and going from them. /opt/karaf/etc/ca.islandora.alpaca.http.client.cfg | karaf:karaf/644 token.value=ISLANDORA_SYN_TOKEN ISLANDORA_SYN_TOKEN : This should be the same token that was established during the installation of Syn in your syn-settings.xml file /opt/karaf/etc/org.fcrepo.camel.indexing.triplestore.cfg | karaf:karaf/644 input.stream=activemq:topic:fedora triplestore.reindex.stream=activemq:queue:triplestore.reindex triplestore.baseUrl=http://localhost:8080/blazegraph/namespace/islandora/sparql /opt/karaf/etc/ca.islandora.alpaca.indexing.triplestore.cfg | karaf:karaf/644 error.maxRedeliveries=10 index.stream=activemq:queue:islandora-indexing-triplestore-index delete.stream=activemq:queue:islandora-indexing-triplestore-delete triplestore.baseUrl=http://localhost:8080/blazegraph/namespace/islandora/sparql /opt/karaf/etc/ca.islandora.alpaca.indexing.fcrepo.cfg | karaf:karaf/644 error.maxRedeliveries=5 node.stream=activemq:queue:islandora-indexing-fcrepo-content node.delete.stream=activemq:queue:islandora-indexing-fcrepo-delete media.stream=activemq:queue:islandora-indexing-fcrepo-media file.stream=activemq:queue:islandora-indexing-fcrepo-file file.delete.stream=activemq:queue:islandora-indexing-fcrepo-file-delete milliner.baseUrl=http://localhost/milliner gemini.baseUrl=http://localhost/gemini Blueprinting Karaf Derivative Connectors For those services in Crayfish we have set up to provide derivatives to Islandora resources, we need connector blueprints to tell the derivative connector how to route incoming requests, run conversions, and return outgoing derivatives. Our blueprints are going to look largely similar between services, with only a few properties changing between them. Largely, these mainly just need to match the ActiveMQ queues we established in the previous configuration, and route to the correct Crayfish service. /opt/karaf/deploy/ca.islandora.alpaca.connector.ocr.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.ocr\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-ocr\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/hypercube\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorOCR\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint> /opt/karaf/deploy/ca.islandora.alpaca.connector.houdini.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.houdini\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-houdini\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/houdini/convert\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorHoudini\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint> /opt/karaf/deploy/ca.islandora.alpaca.connector.homarus.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.homarus\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-homarus\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/homarus/convert\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorHomarus\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint> /opt/karaf/deploy/ca.islandora.alpaca.connector.fits.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.fits\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-fits\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/crayfits\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorfits\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint> Installing the Required Karaf Features Before we can configure the features we\u2019re going to use, they need to be installed. Some of these installations may take some time. /opt/karaf/bin/client feature:install camel-blueprint /opt/karaf/bin/client feature:install activemq-blueprint /opt/karaf/bin/client feature:install fcrepo-service-activemq # This again should not be strictly necessary, since this isn't the triplestore # we're using, but is being included here to resolve the aforementioned # missing link in the dependency chain. /opt/karaf/bin/client feature:install jena /opt/karaf/bin/client feature:install fcrepo-camel /opt/karaf/bin/client feature:install fcrepo-indexing-triplestore /opt/karaf/bin/client feature:install islandora-http-client /opt/karaf/bin/client feature:install islandora-indexing-triplestore /opt/karaf/bin/client feature:install islandora-indexing-fcrepo /opt/karaf/bin/client feature:install islandora-connector-derivative Verifying Karaf Components are Running (Optional But Recommended) At this point, Karaf components should be up and running, but it's a good idea to double-check that this is the case. We can do this from within the Karaf client by taking a look at its component list. # Until this point, we've been running Karaf commands from outside; we can hop # into the client, however, and run commands from directly within. /opt/karaf/bin/client # This takes us into the Karaf client so we can run commands. la | grep islandora la | grep fcrepo # It may be a good idea to use this to look up to the other components we # installed. logout For the above la | grep commands, components that are running should be listed as Active .","title":"Installing Karaf and Alpaca"},{"location":"installation/manual/installing_karaf_and_alpaca/#installing-karaf-and-alpaca","text":"","title":"Installing Karaf and Alpaca"},{"location":"installation/manual/installing_karaf_and_alpaca/#in-this-section-we-will-install","text":"Apache ActiveMQ , a messaging server that will be used to handle communication between Alpaca and other components Apache Karaf , the Java application runtime that Alpaca will be deployed in Islandora/Alpaca , a suite of Java middleware applications that will handle communication between various components of Islandora 8","title":"In this section, we will install:"},{"location":"installation/manual/installing_karaf_and_alpaca/#activemq-5","text":"","title":"ActiveMQ 5"},{"location":"installation/manual/installing_karaf_and_alpaca/#installing-activemq","text":"In our case, the default installation method for ActiveMQ via apt-get will suffice. sudo apt-get -y install activemq This will give us: A base configuration at /var/lib/activemq/conf A data storage directory at /var/lib/activemq/data The base ActiveMQ installation at /usr/share/activemq An activemq service that will be run on boot A user, activemq , who will be in charge of the ActiveMQ service","title":"Installing ActiveMQ"},{"location":"installation/manual/installing_karaf_and_alpaca/#karaf-4","text":"","title":"Karaf 4"},{"location":"installation/manual/installing_karaf_and_alpaca/#creating-a-karaf-user","text":"Karaf, as well as its processes and service, will be owned by a user in charge of ensuring this portion of the stack is segregated and that the service is running. sudo addgroup karaf sudo adduser karaf --ingroup karaf --home /opt/karaf --shell /usr/bin As always, you will be prompted for a password, which you should create at this time. All other options can be left blank.","title":"Creating a Karaf User"},{"location":"installation/manual/installing_karaf_and_alpaca/#downloading-and-placing-karaf","text":"Since there\u2019s no apt-get installer for Karaf, we\u2019re going to manually download and install it directly from its binary installer. cd /opt sudo wget -O karaf.tar.gz KARAF_TARBALL_LINK sudo tar -xzvf karaf.tar.gz sudo chown -R karaf:karaf KARAF_DIRECTORY sudo mv KARAF_DIRECTORY/* /opt/karaf KARAF_TARBALL_LINK : It\u2019s recommended to get the most recent version of Karaf 4.x. This will depend on the current version of Karaf, which can be found on the Karaf downloads page under \u201cKaraf Runtime\u201d. Like Solr, you can\u2019t directly wget these links, but clicking on the .tar.gz link for the binary distribution will bring you to a list of mirrors, as well as provide you with a recommended mirror you can use here. KARAF_DIRECTORY : This will depend on the exact version being used, but will likely be /opt/apache-karaf-VERSION , where VERSION is the current Karaf version number.","title":"Downloading and Placing Karaf"},{"location":"installation/manual/installing_karaf_and_alpaca/#configuring-karaf-logging","text":"We\u2019re going to apply some basic logging to our Karaf installation that should suffice for an example. In a production installation, you may want to play around with some of these values for more personally useful logging. sudo mkdir /var/log/karaf sudo chown karaf:karaf /var/log/karaf /opt/karaf/etc/org.pos4j.pax.logging.cfg | karaf:karaf/644 # Root logger log4j.rootLogger=INFO, out, osgi:* log4j.throwableRenderer=org.apache.log4j.OsgiThrowableRenderer # File appender log4j.appender.out=org.apache.log4j.RollingFileAppender log4j.appender.out.layout=org.apache.log4j.PatternLayout log4j.appender.out.layout.ConversionPattern=%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} - %X{bundle.name } - %X{bundle.version} | %m%n log4j.appender.out.file=/var/log/karaf/karaf.log log4j.appender.out.append=true log4j.appender.out.maxFileSize=1MB log4j.appender.out.maxBackupIndex=10 # Camel Logger log4j.appender.camel=org.apache.log4j.RollingFileAppender log4j.appender.camel.layout=org.apache.log4j.PatternLayout log4j.appender.camel.layout.ConversionPattern=%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} - %X{bundle.na me} - %X{bundle.version} | %m%n log4j.appender.camel.file=/var/log/karaf/camel.log log4j.appender.camel.append=false log4j.appender.camel.maxFileSize=1MB log4j.appender.camel.maxBackupIndex=10 log4j.logger.org.apache.camel=INFO, camel # Islandora Logger log4j.appender.islandora=org.apache.log4j.RollingFileAppender log4j.appender.islandora.layout=org.apache.log4j.PatternLayout log4j.appender.islandora.layout.ConversionPattern=%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} - %X{bundl e.name} - %X{bundle.version} | %m%n log4j.appender.islandora.file=/var/log/karaf/islandora.log log4j.appender.islandora.append=false log4j.appender.islandora.maxFileSize=1MB log4j.appender.islandora.maxBackupIndex=10 log4j.logger.ca.islandora.camel=INFO, islandora","title":"Configuring Karaf Logging"},{"location":"installation/manual/installing_karaf_and_alpaca/#creating-a-setenvsh-script-for-karaf","text":"Similar to Tomcat, our Karaf service is going to rely on a setenv shell script to determine environment variables Karaf needs in place when running. For now, this will simply be the path to JAVA_HOME , but this also accepts many other parameters you can find in the default setenv script. /opt/karaf/bin/setenv | karaf:karaf/755 #!/bin/sh export JAVA_HOME=\"PATH_TO_JAVA_HOME\" PATH_TO_JAVA_HOME : This will be the same JAVA_HOME we used when installing Tomcat , and can be found using the same method (i.e., still /usr/lib/jvm/java-8-openjdk-amd64 if that's what it was before).","title":"Creating a setenv.sh Script for Karaf"},{"location":"installation/manual/installing_karaf_and_alpaca/#initializing-karaf","text":"We\u2019re going to start Karaf, then run the installer to put our configurations in place and generate a Karaf service. Once these are installed, we\u2019re going to stop Karaf, as from there on out its start/stop management should be handled via that service. sudo -u karaf /opt/karaf/bin/start # You may want to wait a bit for Karaf to start. # If you're not sure whether or not it's running, you can always run: # ps aux | grep karaf # to see if the server is up and running. /opt/karaf/bin/client feature:install wrapper /opt/karaf/bin/client wrapper:install /opt/karaf/bin/stop","title":"Initializing Karaf"},{"location":"installation/manual/installing_karaf_and_alpaca/#creating-and-starting-the-karaf-service","text":"Installing the Karaf wrapper generates several service files that can be used on different types of systems. For this example installation on an Ubuntu 18.04 machine, we want to enable the karaf.service service so that Karaf is properly started on boot. sudo systemctl enable /opt/karaf/bin/karaf.service sudo systemctl start karaf","title":"Creating and Starting the Karaf Service"},{"location":"installation/manual/installing_karaf_and_alpaca/#alpaca-10x","text":"","title":"Alpaca 1.0.x"},{"location":"installation/manual/installing_karaf_and_alpaca/#adding-the-required-karaf-repositories","text":"Karaf features can be installed from several different types of sources, but the fastest and easiest way to do so is from existing repository URLs that we can just plug into Karaf to provide us feature lists prepared and ready for installation. Like most interactions with Karaf, we can add these repositories using its built-in client . Notice These repositories are updated consistently, and their updates include revised dependency lists. Commonly, when repositories are out of date or otherwise mismatched, feature installation can result in an Unable to resolve root: missing requirement error; for this reason, this guide recommends using recently-updated versions of these repositories. That being said, if such errors occur despite installing the latest versions of these features, the maintainer of the features repository should be informed. For the Karaf features we\u2019re going to install, we need a few different repositories to be added to the list: /opt/karaf/bin/client repo-add mvn:org.apache.activemq/activemq-karaf/ACTIVEMQ_KARAF_VERSION/xml/features /opt/karaf/bin/client repo-add mvn:org.apache.camel.karaf/apache-camel/APACHE_CAMEL_VERSION/xml/features /opt/karaf/bin/client repo-add mvn:ca.islandora.alpaca/islandora-karaf/LATEST/xml/features # XXX: This shouldn't be strictly necessary, but appears to be a missing # upstream dependency for some fcrepo features. /opt/karaf/bin/client repo-add mvn:org.apache.jena/jena-osgi-features/JENA_OSGI_VERSION/xml/features ACTIVEMQ_KARAF_VERSION : The latest version of ActiveMQ Karaf 5.x.x; you can find this listed at the activemq-karaf repository page (e.g., 5.15.11 at the time of writing) APACHE_CAMEL_VERSION : The latest version of Apache Camel 2.x.x; you can find this listed at the apache-camel repository page (e.g., 2.25.0 at the time of writing) JENA_OSGI_VERSION : The latest version of the Apache Jena OSGi features; you can find this listed at the jena-osgi-features repository page (e.g., 3.14.0 at the time of writing)","title":"Adding the Required Karaf Repositories"},{"location":"installation/manual/installing_karaf_and_alpaca/#configuring-karaf-features","text":"Our installed Karaf features require configuration files to know exactly where to route things coming and going from them. /opt/karaf/etc/ca.islandora.alpaca.http.client.cfg | karaf:karaf/644 token.value=ISLANDORA_SYN_TOKEN ISLANDORA_SYN_TOKEN : This should be the same token that was established during the installation of Syn in your syn-settings.xml file /opt/karaf/etc/org.fcrepo.camel.indexing.triplestore.cfg | karaf:karaf/644 input.stream=activemq:topic:fedora triplestore.reindex.stream=activemq:queue:triplestore.reindex triplestore.baseUrl=http://localhost:8080/blazegraph/namespace/islandora/sparql /opt/karaf/etc/ca.islandora.alpaca.indexing.triplestore.cfg | karaf:karaf/644 error.maxRedeliveries=10 index.stream=activemq:queue:islandora-indexing-triplestore-index delete.stream=activemq:queue:islandora-indexing-triplestore-delete triplestore.baseUrl=http://localhost:8080/blazegraph/namespace/islandora/sparql /opt/karaf/etc/ca.islandora.alpaca.indexing.fcrepo.cfg | karaf:karaf/644 error.maxRedeliveries=5 node.stream=activemq:queue:islandora-indexing-fcrepo-content node.delete.stream=activemq:queue:islandora-indexing-fcrepo-delete media.stream=activemq:queue:islandora-indexing-fcrepo-media file.stream=activemq:queue:islandora-indexing-fcrepo-file file.delete.stream=activemq:queue:islandora-indexing-fcrepo-file-delete milliner.baseUrl=http://localhost/milliner gemini.baseUrl=http://localhost/gemini","title":"Configuring Karaf Features"},{"location":"installation/manual/installing_karaf_and_alpaca/#blueprinting-karaf-derivative-connectors","text":"For those services in Crayfish we have set up to provide derivatives to Islandora resources, we need connector blueprints to tell the derivative connector how to route incoming requests, run conversions, and return outgoing derivatives. Our blueprints are going to look largely similar between services, with only a few properties changing between them. Largely, these mainly just need to match the ActiveMQ queues we established in the previous configuration, and route to the correct Crayfish service. /opt/karaf/deploy/ca.islandora.alpaca.connector.ocr.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.ocr\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-ocr\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/hypercube\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorOCR\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint> /opt/karaf/deploy/ca.islandora.alpaca.connector.houdini.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.houdini\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-houdini\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/houdini/convert\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorHoudini\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint> /opt/karaf/deploy/ca.islandora.alpaca.connector.homarus.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.homarus\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-homarus\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/homarus/convert\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorHomarus\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint> /opt/karaf/deploy/ca.islandora.alpaca.connector.fits.blueprint.xml | karaf:karaf/644 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cm=\"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0\" xsi:schemaLocation=\" http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd\"> <cm:property-placeholder id=\"properties\" persistent-id=\"ca.islandora.alpaca.connector.fits\" update-strategy=\"reload\" > <cm:default-properties> <cm:property name=\"error.maxRedeliveries\" value=\"5\"/> <cm:property name=\"in.stream\" value=\"activemq:queue:islandora-connector-fits\"/> <cm:property name=\"derivative.service.url\" value=\"http://localhost/crayfits\"/> </cm:default-properties> </cm:property-placeholder> <reference id=\"broker\" interface=\"org.apache.camel.Component\" filter=\"(osgi.jndi.service.name=fcrepo/Broker)\"/> <bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/> <camelContext id=\"IslandoraConnectorfits\" xmlns=\"http://camel.apache.org/schema/blueprint\"> <package>ca.islandora.alpaca.connector.derivative</package> </camelContext> </blueprint>","title":"Blueprinting Karaf Derivative Connectors"},{"location":"installation/manual/installing_karaf_and_alpaca/#installing-the-required-karaf-features","text":"Before we can configure the features we\u2019re going to use, they need to be installed. Some of these installations may take some time. /opt/karaf/bin/client feature:install camel-blueprint /opt/karaf/bin/client feature:install activemq-blueprint /opt/karaf/bin/client feature:install fcrepo-service-activemq # This again should not be strictly necessary, since this isn't the triplestore # we're using, but is being included here to resolve the aforementioned # missing link in the dependency chain. /opt/karaf/bin/client feature:install jena /opt/karaf/bin/client feature:install fcrepo-camel /opt/karaf/bin/client feature:install fcrepo-indexing-triplestore /opt/karaf/bin/client feature:install islandora-http-client /opt/karaf/bin/client feature:install islandora-indexing-triplestore /opt/karaf/bin/client feature:install islandora-indexing-fcrepo /opt/karaf/bin/client feature:install islandora-connector-derivative","title":"Installing the Required Karaf Features"},{"location":"installation/manual/installing_karaf_and_alpaca/#verifying-karaf-components-are-running-optional-but-recommended","text":"At this point, Karaf components should be up and running, but it's a good idea to double-check that this is the case. We can do this from within the Karaf client by taking a look at its component list. # Until this point, we've been running Karaf commands from outside; we can hop # into the client, however, and run commands from directly within. /opt/karaf/bin/client # This takes us into the Karaf client so we can run commands. la | grep islandora la | grep fcrepo # It may be a good idea to use this to look up to the other components we # installed. logout For the above la | grep commands, components that are running should be listed as Active .","title":"Verifying Karaf Components are Running (Optional But Recommended)"},{"location":"installation/manual/installing_solr/","text":"Installing Solr In this section, we will install: Apache Solr 8 , the search engine used to index and find Drupal content search_api_solr , the Solr implementation of Drupal's search API Solr 8 Downloading and Placing Solr The Solr binaries can be found at the Solr downloads page ; the most recent stable release of Solr 8 should be used. # While generally we download tarballs as .tar.gz files without version # information, the Solr installer is a bit particular in that it expects a .tgz # file with the same name as the extracted folder it contains. It's odd, and we # can't really get around it. wget SOLR_DOWNLOAD_LINK tar -xzvf SOLR_TARBALL SOLR_DOWNLOAD_LINK : This will depend on a few different things, not least of all the current version of Solr. The link to the .tgz for the binary on the downloads page will take you to a list of mirrors that Solr can be downloaded from, and provide you with a preferred mirror at the top. This preferred mirror should be used as the SOLR_DOWNLOAD_LINK . SOLR_TARBALL : The filename that was downloaded, e.g., solr-8.3.0.tgz Running the Solr Installer Solr includes an installer that does most of the heavy lifting of ensuring we have a Solr user, a location where Solr lives, and configurations in place to ensure it\u2019s running on boot. sudo UNTARRED_SOLR_FOLDER/bin/install_solr_service.sh SOLR_TARBALL UNTARRED_SOLR_FOLDER : This will likely simply be solr-VERSION , where VERSION is the version number that was downloaded. The port that Solr runs on can potentially be configured at ths point, but we'll expect it to be running on 8983 . Increasing the Open File Limit (Optional) Solr's installation guide recommends that you increase the open file limit so that operations aren't disrupted while Solr is trying to access things in its index. This limit can be increased while the system is running, but doing so won't persist after a reboot. You can hard-increase this limit using your system's sysctl file: /etc/sysctl.conf Before : 77 | #fs.protected_symlinks=0 After : 77 | #fs.protected_symlinks=0 78 | fs.file-max = 65535 Then apply your new configuration. sudo sysctl -p Creating a New Solr Core Initially, our new Solr core will contain a configuration copied from the example included with the installation, so that we have something to work with when we configure this on the Drupal side. We\u2019ll later update this with generated configurations we create in Drupal. cd /opt/solr sudo mkdir -p /var/solr/data/SOLR_CORE/conf sudo cp -r example/files/conf/* /var/solr/data/SOLR_CORE/conf sudo chown -R solr:solr /var/solr sudo -u solr bin/solr create -c SOLR_CORE -p 8983 SOLR_CORE : islandora8 Installing search_api_solr Rather than use an out-of-the-box configuration that won\u2019t be suitable for our purposes, we\u2019re going to use the Drupal search_api_solr module to generate one for us. This will also require us to install the module so we can create these configurations using Drush. cd /opt/drupal sudo -u www-data composer require drupal/search_api_solr:^3.0 drush -y en search_api_solr Configuring search_api_solr Before we can create configurations to use with Solr, the core we created earlier needs to be referenced in Drupal. Log in to the Drupal site at /user using the sitewide administrator username and password, then navigate to /admin/config/search/search-api/add-server . Fill out the server addition form using the following options: SERVER_NAME : islandora8 This is completely arbitrary, and is simply used to differentiate this search server configuration from all others. Write down or otherwise pay attention to the machine_name generated next to the server name you type in; this will be used in the next step. As a recap for this configuration: Server name should be an arbitrary identifier for this server Enabled should be checked Backend should be set to Solr Under CONFIGURE SOLR BACKEND , Solr Connector should be set to Standard Under CONFIGURE STANDARD SOLR CONNECTOR : HTTP protocol is simply set to http since we've set this up on the same machine Drupal lives on. On a production installation, Solr should likely be installed behind an HTTPS connection. Solr host can be set to localhost since, again, this is set up on the same machine Drupal lives on. On a production installation, this may vary, especially if parts of the installation live on different severs Solr port should be set to the port Solr was installed on, which is 8983 by default Solr path should be set to the configured path to the instance of Solr; in a default installation, there is only one Solr instance, and it lives at / Solr core should be the name of the Solr core you created earlier, which is why it's listed as SOLR_CORE here Under ADVANCED SERVER CONFIGURATION , solr.install.dir should be set to the path where we installed Solr, which this guide has established at /opt/solr Click Save to create the server configuration. Notice You can ignore the error about an incompatible Solr schema; we're going to set this up in the next step. In fact, if you refresh the page after restarting Solr in the next step, you should see the error disappear. Generating and Applying Solr Configurations Now that our core is in place and our Drupal-side configurations exist, we\u2019re ready to generate Solr configuration files to connect this site to our search engine. cd /opt/drupal drush solr-gsc SERVER_MACHINE_NAME /opt/drupal/solrconfig.zip unzip -d ~/solrconfig solrconfig.zip sudo cp ~/solrconfig/* /var/solr/data/SOLR_CORE/conf sudo systemctl restart solr SERVER_MACHINE_NAME : This should be the machine_name that was automatically generated when creating the configuration in the above step. Adding an Index In order for content to be indexed back into Solr, a search index needs to be added to our server. Navigate to /admin/config/search/search-api/add-index and check off the things you'd like to be indexed. Notice You should come back here later and reconfigure this after completing the last step in this guide. The default indexing configuration is pretty permissive, and you may want to restrict, for example, indexed content to just Islandora-centric bundles. This guide doesn't set up the index's fields either, which are going to be almost wholly dependent on the needs of your installation. Once you complete that configuration later on, re-index Solr from the configuration page of the index we're creating here. Click Save to add your index and kick off indexing of existing items.","title":"Installing Solr"},{"location":"installation/manual/installing_solr/#installing-solr","text":"","title":"Installing Solr"},{"location":"installation/manual/installing_solr/#in-this-section-we-will-install","text":"Apache Solr 8 , the search engine used to index and find Drupal content search_api_solr , the Solr implementation of Drupal's search API","title":"In this section, we will install:"},{"location":"installation/manual/installing_solr/#solr-8","text":"","title":"Solr 8"},{"location":"installation/manual/installing_solr/#downloading-and-placing-solr","text":"The Solr binaries can be found at the Solr downloads page ; the most recent stable release of Solr 8 should be used. # While generally we download tarballs as .tar.gz files without version # information, the Solr installer is a bit particular in that it expects a .tgz # file with the same name as the extracted folder it contains. It's odd, and we # can't really get around it. wget SOLR_DOWNLOAD_LINK tar -xzvf SOLR_TARBALL SOLR_DOWNLOAD_LINK : This will depend on a few different things, not least of all the current version of Solr. The link to the .tgz for the binary on the downloads page will take you to a list of mirrors that Solr can be downloaded from, and provide you with a preferred mirror at the top. This preferred mirror should be used as the SOLR_DOWNLOAD_LINK . SOLR_TARBALL : The filename that was downloaded, e.g., solr-8.3.0.tgz","title":"Downloading and Placing Solr"},{"location":"installation/manual/installing_solr/#running-the-solr-installer","text":"Solr includes an installer that does most of the heavy lifting of ensuring we have a Solr user, a location where Solr lives, and configurations in place to ensure it\u2019s running on boot. sudo UNTARRED_SOLR_FOLDER/bin/install_solr_service.sh SOLR_TARBALL UNTARRED_SOLR_FOLDER : This will likely simply be solr-VERSION , where VERSION is the version number that was downloaded. The port that Solr runs on can potentially be configured at ths point, but we'll expect it to be running on 8983 .","title":"Running the Solr Installer"},{"location":"installation/manual/installing_solr/#increasing-the-open-file-limit-optional","text":"Solr's installation guide recommends that you increase the open file limit so that operations aren't disrupted while Solr is trying to access things in its index. This limit can be increased while the system is running, but doing so won't persist after a reboot. You can hard-increase this limit using your system's sysctl file: /etc/sysctl.conf Before : 77 | #fs.protected_symlinks=0 After : 77 | #fs.protected_symlinks=0 78 | fs.file-max = 65535 Then apply your new configuration. sudo sysctl -p","title":"Increasing the Open File Limit (Optional)"},{"location":"installation/manual/installing_solr/#creating-a-new-solr-core","text":"Initially, our new Solr core will contain a configuration copied from the example included with the installation, so that we have something to work with when we configure this on the Drupal side. We\u2019ll later update this with generated configurations we create in Drupal. cd /opt/solr sudo mkdir -p /var/solr/data/SOLR_CORE/conf sudo cp -r example/files/conf/* /var/solr/data/SOLR_CORE/conf sudo chown -R solr:solr /var/solr sudo -u solr bin/solr create -c SOLR_CORE -p 8983 SOLR_CORE : islandora8","title":"Creating a New Solr Core"},{"location":"installation/manual/installing_solr/#installing-search_api_solr","text":"Rather than use an out-of-the-box configuration that won\u2019t be suitable for our purposes, we\u2019re going to use the Drupal search_api_solr module to generate one for us. This will also require us to install the module so we can create these configurations using Drush. cd /opt/drupal sudo -u www-data composer require drupal/search_api_solr:^3.0 drush -y en search_api_solr","title":"Installing search_api_solr"},{"location":"installation/manual/installing_solr/#configuring-search_api_solr","text":"Before we can create configurations to use with Solr, the core we created earlier needs to be referenced in Drupal. Log in to the Drupal site at /user using the sitewide administrator username and password, then navigate to /admin/config/search/search-api/add-server . Fill out the server addition form using the following options: SERVER_NAME : islandora8 This is completely arbitrary, and is simply used to differentiate this search server configuration from all others. Write down or otherwise pay attention to the machine_name generated next to the server name you type in; this will be used in the next step. As a recap for this configuration: Server name should be an arbitrary identifier for this server Enabled should be checked Backend should be set to Solr Under CONFIGURE SOLR BACKEND , Solr Connector should be set to Standard Under CONFIGURE STANDARD SOLR CONNECTOR : HTTP protocol is simply set to http since we've set this up on the same machine Drupal lives on. On a production installation, Solr should likely be installed behind an HTTPS connection. Solr host can be set to localhost since, again, this is set up on the same machine Drupal lives on. On a production installation, this may vary, especially if parts of the installation live on different severs Solr port should be set to the port Solr was installed on, which is 8983 by default Solr path should be set to the configured path to the instance of Solr; in a default installation, there is only one Solr instance, and it lives at / Solr core should be the name of the Solr core you created earlier, which is why it's listed as SOLR_CORE here Under ADVANCED SERVER CONFIGURATION , solr.install.dir should be set to the path where we installed Solr, which this guide has established at /opt/solr Click Save to create the server configuration. Notice You can ignore the error about an incompatible Solr schema; we're going to set this up in the next step. In fact, if you refresh the page after restarting Solr in the next step, you should see the error disappear.","title":"Configuring search_api_solr"},{"location":"installation/manual/installing_solr/#generating-and-applying-solr-configurations","text":"Now that our core is in place and our Drupal-side configurations exist, we\u2019re ready to generate Solr configuration files to connect this site to our search engine. cd /opt/drupal drush solr-gsc SERVER_MACHINE_NAME /opt/drupal/solrconfig.zip unzip -d ~/solrconfig solrconfig.zip sudo cp ~/solrconfig/* /var/solr/data/SOLR_CORE/conf sudo systemctl restart solr SERVER_MACHINE_NAME : This should be the machine_name that was automatically generated when creating the configuration in the above step.","title":"Generating and Applying Solr Configurations"},{"location":"installation/manual/installing_solr/#adding-an-index","text":"In order for content to be indexed back into Solr, a search index needs to be added to our server. Navigate to /admin/config/search/search-api/add-index and check off the things you'd like to be indexed. Notice You should come back here later and reconfigure this after completing the last step in this guide. The default indexing configuration is pretty permissive, and you may want to restrict, for example, indexed content to just Islandora-centric bundles. This guide doesn't set up the index's fields either, which are going to be almost wholly dependent on the needs of your installation. Once you complete that configuration later on, re-index Solr from the configuration page of the index we're creating here. Click Save to add your index and kick off indexing of existing items.","title":"Adding an Index"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/","text":"Installing Tomcat and Cantaloupe In this section, we will install: Tomcat 8 , the Java servlet container that will serve up some Java applications on various endpoints, including, importantly, Fedora Cantaloupe 4 , the image tileserver - running in Tomcat - that will be used to serve up large images in a web-accessible fashion Tomcat 8 Installing OpenJDK 8 Tomcat runs in a Java runtime environment, so we'll need one to continue. In our case, OpenJDK 8 is open-source, free to use, and can fairly simply be installed using apt-get : sudo apt-get -y install openjdk-8-jdk openjdk-8-jre The installation of OpenJDK via apt-get establishes it as the de-facto Java runtime environment to be used on the system, so no further configuration is required. The resultant location of the java JRE binary (and therefore, the correct value of JAVA_HOME when it\u2019s referenced) will vary based on the specifics of the machine it\u2019s being installed on; that being said, you can find its exact location using update-alternatives : update-alternatives --list java Creating a tomcat User Apache Tomcat, and all its processes, will be owned and managed by a specific user for the purposes of keeping parts of the stack segregated and accountable. sudo addgroup tomcat sudo adduser tomcat --ingroup tomcat --home /opt/tomcat --shell /usr/bin You will be prompted to create a password for the tomcat user; all the other information as part of the adduser command can be ignored. Downloading and Placing Tomcat 8 Tomcat 8 itself can be installed in several different ways; while it\u2019s possible to install via apt-get , this doesn\u2019t give us a great deal of control over exactly how we\u2019re going to run and manage it; as a critical part of the stack, it is beneficial for our purposes to have a good frame of reference for the inner workings of Tomcat. We\u2019re going to download the latest version of Tomcat to /opt and set it up so that it runs automatically. Bear in mind that with the following commands, this is going to be entirely relative to the current version of Tomcat 8, which we\u2019ll try to mitigate as we go. cd /opt sudo wget -O tomcat.tar.gz TOMCAT_TARBALL_LINK sudo tar -zxvf tomcat.tar.gz sudo mv /opt/TOMCAT_DIRECTORY/* /opt/tomcat sudo chown -R tomcat:tomcat /opt/tomcat TOMCAT_TARBALL_LINK : No default can be provided here; you should navigate to the Tomcat 8 downloads page and grab the link to the latest .tar.gz file under the \u201cCore\u201d section of \u201cBinary Distributions\u201d. It is highly recommended to grab the latest version of Tomcat 8, as it will come with associated security patches and fixes. TOMCAT_DIRECTORY : This will also depend entirely on the exact version of tomcat downloaded - for example, apache-tomcat-8.5.47 . Again, ls /opt can be used to find this. Creating a setenv.sh Script When Tomcat runs, some configuration needs to be pre-established as a series of environment variables that will be used by the script that runs it. /opt/tomcat/bin/setenv.sh | tomcat:tomcat/755 export CATALINA_HOME=\"/opt/tomcat\" export JAVA_HOME=\"PATH_TO_JAVA_HOME\" export JAVA_OPTS=\"-Djava.awt.headless=true -server -Xmx1500m -Xms1000m\" PATH_TO_JAVA_HOME : This will vary a bit depending on the environment, but will likely live in /usr/lib/jvm somewhere (e.g., /usr/lib/jvm/java-8-openjdk-amd64 for an installation on a machine with an AMD processor); again, in an Ubunutu environment you can check a part of this using update-alternatives --list java , which will give you the path to the JRE binary within the Java home Creating the Tomcat Service Tomcat includes two shell scripts we\u2019re going to make use of - startup.sh and shutdown.sh - which are light wrappers on top of a third script, catalina.sh , which manages spinning up and shutting down the Tomcat server. Ubuntu 18.04 uses systemctl to manage services; we\u2019re going to create a .service file that can run these shell scripts. /etc/systemd/system/tomcat.service | root:root/755 [Unit] Description=Tomcat [Service] Type=forking ExecStart=/opt/tomcat/bin/startup.sh ExecStop=/opt/tomcat/bin/shutdown.sh SyslogIdentifier=tomcat [Install] WantedBy=multi-user.target Enabling and Starting Tomcat We\u2019re going to both enable and start Tomcat. Enabling Tomcat will ensure that it starts on boot, the timing of which is defined by the [Install] section\u2019s WantedBy statement, which specifies what it should start after. This is separate from starting it, which we need to do now in order to get Tomcat up and running without requiring a reboot. sudo systemctl enable tomcat sudo systemctl start tomcat We can check that Tomcat has started by running systemctl status tomcat | grep Active ; we should see that Tomcat is active (running) , which is the correct result of startup.sh finishing its run successfully. Installing Cantaloupe 4 Stopping the Tomcat service Before we start working with Cantaloupe, we should stop Tomcat; otherwise, Cantaloupe will automatically be deployed from its .war file, and we\u2019d like everything to be in place before the deployment. sudo systemctl stop tomcat Downloading and Placing the Cantaloupe WAR Releases of Cantaloupe live on the Cantaloupe release page ; the latest version can be found here as a .zip file. sudo wget -O /opt/cantaloupe.zip CANTALOUPE_RELEASE_URL sudo unzip /opt/cantaloupe.zip sudo cp CANTALOUPE_DIR/CANTALOUPE_WAR /opt/tomcat/webapps/cantaloupe.war sudo chown tomcat:tomcat /opt/tomcat/webapps/cantaloupe.war CANTALOUPE_RELEASE_URL : It\u2019s recommended we grab the latest version of Cantaloupe 4. This can be found on the above-linked release page, as the .zip version; for example, https://github.com/cantaloupe-project/cantaloupe/releases/download/v4.1.4/cantaloupe-4.1.4.zip CANTALOUPE_DIR : This will depend on the exact version of Cantaloupe downloaded; in the above example release, this would be cantaloupe-4.1.4 CANTALOUPE_WAR : This will also depend on the exact version of Cantaloupe downloaded; in the above example release, this would be cantaloupe-4.1.4.war Creating a Cantaloupe Configuration Cantaloupe pulls its configuration from a file called cantaloupe.properties ; there are also some other files that can contain instructions for Cantaloupe while it\u2019s running; specifically, we\u2019re going to copy over the delegates.rb file, which can also contain custom configuration. We won\u2019t make use of this file; we\u2019re just copying it over for demonstration purposes. Creating these files from scratch is not recommended; rather, we\u2019re going to take the default cantaloupe configurations and plop them into their own folder so we can work with them. sudo mkdir /opt/cantaloupe_config sudo cp CANTALOUPE_DIR/cantaloupe.properties.sample /opt/cantaloupe_config/cantaloupe.properties sudo cp CANTALOUPE_DIR/delegates.rb.sample /opt/cantaloupe_config/delegates.rb The out-of-the-box configuration will work fine for our purposes, but it\u2019s highly recommended that you take a look through the cantaloupe.properties and see what changes can be made; specifically, logging to actual logfiles isn\u2019t set up by default, so you may want to take a peek at the log.application.SyslogAppender or log.application.RollingFileAppender , as well as changing the logging level. Defining the Cantaloupe Configuration Location Now that we have a Cantaloupe configuration, we need to make a change to Tomcat\u2019s JAVA_OPTS so that its location can be referenced when Tomcat spins it up. This will involve changing the setenv.sh created when setting up Tomcat. /opt/tomcat/bin/setenv.sh Before : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -server -Xmx1500m -Xms1000m\" After : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -server -Xmx1500m -Xms1000m\" Starting the Tomcat Service After Cantaloupe has been completely provisioned, we\u2019re ready to switch Tomcat back on so that Cantaloupe automatically deploys with the established configuration. sudo systemctl start tomcat","title":"Installing Tomcat and Cantaloupe"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#installing-tomcat-and-cantaloupe","text":"","title":"Installing Tomcat and Cantaloupe"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#in-this-section-we-will-install","text":"Tomcat 8 , the Java servlet container that will serve up some Java applications on various endpoints, including, importantly, Fedora Cantaloupe 4 , the image tileserver - running in Tomcat - that will be used to serve up large images in a web-accessible fashion","title":"In this section, we will install:"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#tomcat-8","text":"","title":"Tomcat 8"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#installing-openjdk-8","text":"Tomcat runs in a Java runtime environment, so we'll need one to continue. In our case, OpenJDK 8 is open-source, free to use, and can fairly simply be installed using apt-get : sudo apt-get -y install openjdk-8-jdk openjdk-8-jre The installation of OpenJDK via apt-get establishes it as the de-facto Java runtime environment to be used on the system, so no further configuration is required. The resultant location of the java JRE binary (and therefore, the correct value of JAVA_HOME when it\u2019s referenced) will vary based on the specifics of the machine it\u2019s being installed on; that being said, you can find its exact location using update-alternatives : update-alternatives --list java","title":"Installing OpenJDK 8"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#creating-a-tomcat-user","text":"Apache Tomcat, and all its processes, will be owned and managed by a specific user for the purposes of keeping parts of the stack segregated and accountable. sudo addgroup tomcat sudo adduser tomcat --ingroup tomcat --home /opt/tomcat --shell /usr/bin You will be prompted to create a password for the tomcat user; all the other information as part of the adduser command can be ignored.","title":"Creating a tomcat User"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#downloading-and-placing-tomcat-8","text":"Tomcat 8 itself can be installed in several different ways; while it\u2019s possible to install via apt-get , this doesn\u2019t give us a great deal of control over exactly how we\u2019re going to run and manage it; as a critical part of the stack, it is beneficial for our purposes to have a good frame of reference for the inner workings of Tomcat. We\u2019re going to download the latest version of Tomcat to /opt and set it up so that it runs automatically. Bear in mind that with the following commands, this is going to be entirely relative to the current version of Tomcat 8, which we\u2019ll try to mitigate as we go. cd /opt sudo wget -O tomcat.tar.gz TOMCAT_TARBALL_LINK sudo tar -zxvf tomcat.tar.gz sudo mv /opt/TOMCAT_DIRECTORY/* /opt/tomcat sudo chown -R tomcat:tomcat /opt/tomcat TOMCAT_TARBALL_LINK : No default can be provided here; you should navigate to the Tomcat 8 downloads page and grab the link to the latest .tar.gz file under the \u201cCore\u201d section of \u201cBinary Distributions\u201d. It is highly recommended to grab the latest version of Tomcat 8, as it will come with associated security patches and fixes. TOMCAT_DIRECTORY : This will also depend entirely on the exact version of tomcat downloaded - for example, apache-tomcat-8.5.47 . Again, ls /opt can be used to find this.","title":"Downloading and Placing Tomcat 8"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#creating-a-setenvsh-script","text":"When Tomcat runs, some configuration needs to be pre-established as a series of environment variables that will be used by the script that runs it. /opt/tomcat/bin/setenv.sh | tomcat:tomcat/755 export CATALINA_HOME=\"/opt/tomcat\" export JAVA_HOME=\"PATH_TO_JAVA_HOME\" export JAVA_OPTS=\"-Djava.awt.headless=true -server -Xmx1500m -Xms1000m\" PATH_TO_JAVA_HOME : This will vary a bit depending on the environment, but will likely live in /usr/lib/jvm somewhere (e.g., /usr/lib/jvm/java-8-openjdk-amd64 for an installation on a machine with an AMD processor); again, in an Ubunutu environment you can check a part of this using update-alternatives --list java , which will give you the path to the JRE binary within the Java home","title":"Creating a setenv.sh Script"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#creating-the-tomcat-service","text":"Tomcat includes two shell scripts we\u2019re going to make use of - startup.sh and shutdown.sh - which are light wrappers on top of a third script, catalina.sh , which manages spinning up and shutting down the Tomcat server. Ubuntu 18.04 uses systemctl to manage services; we\u2019re going to create a .service file that can run these shell scripts. /etc/systemd/system/tomcat.service | root:root/755 [Unit] Description=Tomcat [Service] Type=forking ExecStart=/opt/tomcat/bin/startup.sh ExecStop=/opt/tomcat/bin/shutdown.sh SyslogIdentifier=tomcat [Install] WantedBy=multi-user.target","title":"Creating the Tomcat Service"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#enabling-and-starting-tomcat","text":"We\u2019re going to both enable and start Tomcat. Enabling Tomcat will ensure that it starts on boot, the timing of which is defined by the [Install] section\u2019s WantedBy statement, which specifies what it should start after. This is separate from starting it, which we need to do now in order to get Tomcat up and running without requiring a reboot. sudo systemctl enable tomcat sudo systemctl start tomcat We can check that Tomcat has started by running systemctl status tomcat | grep Active ; we should see that Tomcat is active (running) , which is the correct result of startup.sh finishing its run successfully.","title":"Enabling and Starting Tomcat"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#installing-cantaloupe-4","text":"","title":"Installing Cantaloupe 4"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#stopping-the-tomcat-service","text":"Before we start working with Cantaloupe, we should stop Tomcat; otherwise, Cantaloupe will automatically be deployed from its .war file, and we\u2019d like everything to be in place before the deployment. sudo systemctl stop tomcat","title":"Stopping the Tomcat service"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#downloading-and-placing-the-cantaloupe-war","text":"Releases of Cantaloupe live on the Cantaloupe release page ; the latest version can be found here as a .zip file. sudo wget -O /opt/cantaloupe.zip CANTALOUPE_RELEASE_URL sudo unzip /opt/cantaloupe.zip sudo cp CANTALOUPE_DIR/CANTALOUPE_WAR /opt/tomcat/webapps/cantaloupe.war sudo chown tomcat:tomcat /opt/tomcat/webapps/cantaloupe.war CANTALOUPE_RELEASE_URL : It\u2019s recommended we grab the latest version of Cantaloupe 4. This can be found on the above-linked release page, as the .zip version; for example, https://github.com/cantaloupe-project/cantaloupe/releases/download/v4.1.4/cantaloupe-4.1.4.zip CANTALOUPE_DIR : This will depend on the exact version of Cantaloupe downloaded; in the above example release, this would be cantaloupe-4.1.4 CANTALOUPE_WAR : This will also depend on the exact version of Cantaloupe downloaded; in the above example release, this would be cantaloupe-4.1.4.war","title":"Downloading and Placing the Cantaloupe WAR"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#creating-a-cantaloupe-configuration","text":"Cantaloupe pulls its configuration from a file called cantaloupe.properties ; there are also some other files that can contain instructions for Cantaloupe while it\u2019s running; specifically, we\u2019re going to copy over the delegates.rb file, which can also contain custom configuration. We won\u2019t make use of this file; we\u2019re just copying it over for demonstration purposes. Creating these files from scratch is not recommended; rather, we\u2019re going to take the default cantaloupe configurations and plop them into their own folder so we can work with them. sudo mkdir /opt/cantaloupe_config sudo cp CANTALOUPE_DIR/cantaloupe.properties.sample /opt/cantaloupe_config/cantaloupe.properties sudo cp CANTALOUPE_DIR/delegates.rb.sample /opt/cantaloupe_config/delegates.rb The out-of-the-box configuration will work fine for our purposes, but it\u2019s highly recommended that you take a look through the cantaloupe.properties and see what changes can be made; specifically, logging to actual logfiles isn\u2019t set up by default, so you may want to take a peek at the log.application.SyslogAppender or log.application.RollingFileAppender , as well as changing the logging level.","title":"Creating a Cantaloupe Configuration"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#defining-the-cantaloupe-configuration-location","text":"Now that we have a Cantaloupe configuration, we need to make a change to Tomcat\u2019s JAVA_OPTS so that its location can be referenced when Tomcat spins it up. This will involve changing the setenv.sh created when setting up Tomcat. /opt/tomcat/bin/setenv.sh Before : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -server -Xmx1500m -Xms1000m\" After : 3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dcantaloupe.config=/opt/cantaloupe_config/cantaloupe.properties -server -Xmx1500m -Xms1000m\"","title":"Defining the Cantaloupe Configuration Location"},{"location":"installation/manual/installing_tomcat_and_cantaloupe/#starting-the-tomcat-service","text":"After Cantaloupe has been completely provisioned, we\u2019re ready to switch Tomcat back on so that Cantaloupe automatically deploys with the established configuration. sudo systemctl start tomcat","title":"Starting the Tomcat Service"},{"location":"installation/manual/introduction/","text":"Introduction Notice The manual installation guide is not intended to describe the Islandora 8 installation but rather an Islandora 8 installation. The server created using this guide is not hardened, will not be easily scalable, and the components may not be configured in a way you consider easy to work with. A production instance of Islandora 8 should be installed and maintained by a professional with an understanding of Linux and server administration. This guide will contain generalized steps on installation and configuration of the various components, but will contain specific example commands for executing these steps on an Ubuntu 18.04 Server. Some Prerequisite Knowledge This guide assumes the user has some knowledge: A general idea of how to work on the command-line of a Linux server using Bash. Commands are described in detail, but servers are volatile, and knowledge is still assumed in case anything happens outside of your expectations. An understanding of how to modify files from the command line. Configurations will often need to be created or modified in order to get things up and running. This might involve using an application like nano or vi / vim , or creating these files locally and uploading them to the server. It should also generally be assumed that most of these configuration files will have to be created or edited using sudo , and that permissions and ownership may need to be specified on these files. Conventions Used in This Guide Chronological Organization The steps in this guide are listed in chronological order of installation and configuration. Some sections will reference variables and rely on components installed in previous sections. It does not account for skipping over or otherwise changing the order of installation steps; bear this in mind if you decide to do things out of the provided order. Replacement Variables It is expected that the person setting up the site may want to use different usernames, passwords, and other such variables than the ones presented by default in this guide. Additionally, some defaults can't be provided, such as up-to-date version information for externally-provided components. In such cases, the replacement variables will be placed in all capital letters, and a description of the variables, any possible defaults, and how to get up-to-date information, will be listed below. Bash Commands Notice Command blocks are always assumed to start at the home folder of the user originally created during the server installation. They are never run as root ; if root access is required, sudo will be specified, and if files are created belonging to root that should not belong to root , chmod and chown will be run against them immediately afterwards to ensure correct permissions. If commands need to be run from a different working directory, an absolute path will be specified to use with cd . If you're concerned about whether or not a code block can be run from your current working directory, run cd ~ before executing any commands in it. Commands to be run on the command line will be placed in code blocks, with one command per line, and any replacement variables below, e.g., sudo run --this-command python3 run.py /this/other/command --with-param PARAMETER PARAMETER : some_sensible_default , perhaps with an explanation of why, or how to determine alternatives Editing Files In Place When an individual file needs to be modified in place (as opposed to replacing it outright), a Before and After quote will be provided that identifies one or more lines in the file, what the default installed version of that file looks like on that line, and what the line should look like after it has been modified, like so: /path/to/file_being_modified Before : 174 | Here is what line 174 in the file looked like before 175 | And here is what the following line looked like in the file before After : 174 | Here is what line 174 should look like after modification 175 | And here is what the following line should look like after modification: VARIABLE VARIABLE : some_value , perhaps with an explanation of why It should be noted that configuration files and the like are subject to change by the organizations that maintain their respective applications; this guide generally recommends installing the latest version of these applications, as these generally include security updates. It is expected that the implementer will be able to search through a file and find specific lines in the case where the maintaining organization has moved it in a subsequent patch. In most cases, configuration files will be provided outright to avoid these scenarios. Adding or Replacing Files When a file needs to be added or replaced, it will be described in three sections: A line that describes the path to the file, as well as the owner, group, and umask for the file; it is assumed that the person following the guide will use chmod and chown appropriately to apply the owner, group, and umask The entire contents of the file in a code block, including any portions that need to be replaced with specific values Those replacement values /the/path/to/some/file.php | owner:group/umask <?php /** * Here is the entire contents of a PHP file */ function do_something($to_this) { $to_this += THE_NUMBER_TO_ADD_TO_THIS; } ?> THE_NUMBER_TO_ADD_TO_THIS : 12, perhaps with an explanation of why, or other numbers that may be appropriate Troubleshooting The most common issues you will likely run into when manually provisioning a server are: Files or directories are not owned by the user who needs access to them, and can therefore not be written to. Check the ownership of files using ls -la , and ensure their ownership using chown USER for files, and chown -R USER for directories Replacement variables were left in place in files specified by the guide. Ensure any replacement variables such as server addresses and passwords are swapped out when writing files to the server For any other issues, don't hesitate to email the mailing list to ask for help. If you think that a part of the installation documentation is incorrect or could be improved, please create an issue in the documentation issues queue and give it a documentation tag. Bear in mind that this guide is built for Ubuntu 18.04 and attempts to give generalized instructions; you will likely naturally encounter situations where your own environment needs to differ from the guide.","title":"Introduction"},{"location":"installation/manual/introduction/#introduction","text":"Notice The manual installation guide is not intended to describe the Islandora 8 installation but rather an Islandora 8 installation. The server created using this guide is not hardened, will not be easily scalable, and the components may not be configured in a way you consider easy to work with. A production instance of Islandora 8 should be installed and maintained by a professional with an understanding of Linux and server administration. This guide will contain generalized steps on installation and configuration of the various components, but will contain specific example commands for executing these steps on an Ubuntu 18.04 Server.","title":"Introduction"},{"location":"installation/manual/introduction/#some-prerequisite-knowledge","text":"This guide assumes the user has some knowledge: A general idea of how to work on the command-line of a Linux server using Bash. Commands are described in detail, but servers are volatile, and knowledge is still assumed in case anything happens outside of your expectations. An understanding of how to modify files from the command line. Configurations will often need to be created or modified in order to get things up and running. This might involve using an application like nano or vi / vim , or creating these files locally and uploading them to the server. It should also generally be assumed that most of these configuration files will have to be created or edited using sudo , and that permissions and ownership may need to be specified on these files.","title":"Some Prerequisite Knowledge"},{"location":"installation/manual/introduction/#conventions-used-in-this-guide","text":"","title":"Conventions Used in This Guide"},{"location":"installation/manual/introduction/#chronological-organization","text":"The steps in this guide are listed in chronological order of installation and configuration. Some sections will reference variables and rely on components installed in previous sections. It does not account for skipping over or otherwise changing the order of installation steps; bear this in mind if you decide to do things out of the provided order.","title":"Chronological Organization"},{"location":"installation/manual/introduction/#replacement-variables","text":"It is expected that the person setting up the site may want to use different usernames, passwords, and other such variables than the ones presented by default in this guide. Additionally, some defaults can't be provided, such as up-to-date version information for externally-provided components. In such cases, the replacement variables will be placed in all capital letters, and a description of the variables, any possible defaults, and how to get up-to-date information, will be listed below.","title":"Replacement Variables"},{"location":"installation/manual/introduction/#bash-commands","text":"Notice Command blocks are always assumed to start at the home folder of the user originally created during the server installation. They are never run as root ; if root access is required, sudo will be specified, and if files are created belonging to root that should not belong to root , chmod and chown will be run against them immediately afterwards to ensure correct permissions. If commands need to be run from a different working directory, an absolute path will be specified to use with cd . If you're concerned about whether or not a code block can be run from your current working directory, run cd ~ before executing any commands in it. Commands to be run on the command line will be placed in code blocks, with one command per line, and any replacement variables below, e.g., sudo run --this-command python3 run.py /this/other/command --with-param PARAMETER PARAMETER : some_sensible_default , perhaps with an explanation of why, or how to determine alternatives","title":"Bash Commands"},{"location":"installation/manual/introduction/#editing-files-in-place","text":"When an individual file needs to be modified in place (as opposed to replacing it outright), a Before and After quote will be provided that identifies one or more lines in the file, what the default installed version of that file looks like on that line, and what the line should look like after it has been modified, like so: /path/to/file_being_modified Before : 174 | Here is what line 174 in the file looked like before 175 | And here is what the following line looked like in the file before After : 174 | Here is what line 174 should look like after modification 175 | And here is what the following line should look like after modification: VARIABLE VARIABLE : some_value , perhaps with an explanation of why It should be noted that configuration files and the like are subject to change by the organizations that maintain their respective applications; this guide generally recommends installing the latest version of these applications, as these generally include security updates. It is expected that the implementer will be able to search through a file and find specific lines in the case where the maintaining organization has moved it in a subsequent patch. In most cases, configuration files will be provided outright to avoid these scenarios.","title":"Editing Files In Place"},{"location":"installation/manual/introduction/#adding-or-replacing-files","text":"When a file needs to be added or replaced, it will be described in three sections: A line that describes the path to the file, as well as the owner, group, and umask for the file; it is assumed that the person following the guide will use chmod and chown appropriately to apply the owner, group, and umask The entire contents of the file in a code block, including any portions that need to be replaced with specific values Those replacement values /the/path/to/some/file.php | owner:group/umask <?php /** * Here is the entire contents of a PHP file */ function do_something($to_this) { $to_this += THE_NUMBER_TO_ADD_TO_THIS; } ?> THE_NUMBER_TO_ADD_TO_THIS : 12, perhaps with an explanation of why, or other numbers that may be appropriate","title":"Adding or Replacing Files"},{"location":"installation/manual/introduction/#troubleshooting","text":"The most common issues you will likely run into when manually provisioning a server are: Files or directories are not owned by the user who needs access to them, and can therefore not be written to. Check the ownership of files using ls -la , and ensure their ownership using chown USER for files, and chown -R USER for directories Replacement variables were left in place in files specified by the guide. Ensure any replacement variables such as server addresses and passwords are swapped out when writing files to the server For any other issues, don't hesitate to email the mailing list to ask for help. If you think that a part of the installation documentation is incorrect or could be improved, please create an issue in the documentation issues queue and give it a documentation tag. Bear in mind that this guide is built for Ubuntu 18.04 and attempts to give generalized instructions; you will likely naturally encounter situations where your own environment needs to differ from the guide.","title":"Troubleshooting"},{"location":"installation/manual/preparing_a_webserver/","text":"Preparing a LAPP Server In this section, we will install: Apache 2 , the webserver that will deliver webpages to end users PHP 7 , the runtime code interpreter that Drupal will use to generate webpages and other services via apache, as well as that Drush and Composer will use to run tasks from the command line Several modules for PHP 7 which are required to run the PHP code that Drupal and other applications will be executing PostgreSQL 10 , the database that Drupal will use for storage (as well as other applications down the line) Apache 2 Install Apache 2 Apache can typically be installed and configured outright by your operating system\u2019s package manager: sudo apt-get -y install apache2 apache2-utils This will install: A systemd service that will ensure Apache can be stopped and started, and will run when the machine is powered on A set of Apache configurations in /etc/apache2 , including the basic configuration, ports configuration, enabled mods, and enabled sites An Apache webroot in /var/www/html , configured to be the provided server on port :80 in /etc/apache2/sites-enabled/000-default.conf ; we\u2019ll make changes and additions to this file later A user and group, www-data , which we will use to read/write web documents. Enable Apache Mods We\u2019re going to enable a couple of Apache mods that Drupal highly recommends installing, and which are de-facto considered required by Islandora: sudo a2enmod ssl sudo a2enmod rewrite sudo systemctl restart apache2 Add the Current User to the www-data Group Since the user we are currently logged in as is going to work quite a bit inside the Drupal directory, we want to give it group permissions to anything the www-data group has access to. When we run composer , www-data will also be caching data in our own home directory, so we want this group modification to go in both directions. N.B. This code block uses backticks , not single quotes; this is an important distinction as backticks have special meaning in bash . sudo usermod -a -G www-data `whoami` sudo usermod -a -G `whoami` www-data # Immediately log back in to apply the new group. sudo su `whoami` PHP 7.2 Install PHP 7.2 PHP can generally be easily installed using your operating system\u2019s package manager, though whether or not the version you\u2019ll be given is up to date depends entirely on whether or not that package manager is kept up-to-date. We\u2019re going to enable both PHP 7.2, as well as the myriad modules we require, simultaneously: sudo apt-get -y install php7.2 php7.2-cli php7.2-common php7.2-curl php7.2-dev php7.2-gd php7.2-imap php7.2-json php7.2-mbstring php7.2-opcache php7.2-xml php7.2-yaml php7.2-zip libapache2-mod-php7.2 php-pgsql php-redis php-xdebug unzip This will install a series of PHP configurations and mods in /etc/php/7.2 , including: A mods-available folder (from which everything is typically enabled by default) A configuration for PHP when run from Apache in the apache2 folder A configuration for PHP when run from the command line - including when run via Drush - in the cli folder unzip , which is important for PHP\u2019s zip module to function correctly despite it not being a direct dependency of the module. We will also need to unzip some things later, so this is convenient to have in place early in the installation process. PostgreSQL 10 Install PostgreSQL 10 PostgreSQL can generally be easily installed using your operating system\u2019s package manager. It is typically sensible to install the version the system recognizes as up-to-date; Ubuntu 18.04 sees this as version 10. We\u2019re simply going to install the database software: sudo apt-get -y install postgresql This will install: A user at the system level named postgres ; this will be the only user, by default, that has permission to run the psql binary and have access to Postgres configurations A binary executable at /usr/bin/psql , which anyone - even root - will get kicked out of the moment they run it, since only the postgres user has permission to run any Postgres commands A series of configurations that live in /etc/postgresql/10/main which can be used to modify how PostgreSQL works. Configure Postgresql 10 For Use With Drupal A modification needs to be made to the PostgreSQL configuration in order for Drupal to properly install and function. This change can be made to the main configuration file at /etc/postgresql/10/main/postgresql.conf : Before : 558 | #bytea_output = \u2018hex\u2019 # hex, escape After : 558 | bytea_output = \u2018escape\u2019 The postgresql service should be restarted to accept the new configuration: sudo systemctl restart postgresql","title":"Preparing a LAPP Webserver"},{"location":"installation/manual/preparing_a_webserver/#preparing-a-lapp-server","text":"","title":"Preparing a LAPP Server"},{"location":"installation/manual/preparing_a_webserver/#in-this-section-we-will-install","text":"Apache 2 , the webserver that will deliver webpages to end users PHP 7 , the runtime code interpreter that Drupal will use to generate webpages and other services via apache, as well as that Drush and Composer will use to run tasks from the command line Several modules for PHP 7 which are required to run the PHP code that Drupal and other applications will be executing PostgreSQL 10 , the database that Drupal will use for storage (as well as other applications down the line)","title":"In this section, we will install:"},{"location":"installation/manual/preparing_a_webserver/#apache-2","text":"","title":"Apache 2"},{"location":"installation/manual/preparing_a_webserver/#install-apache-2","text":"Apache can typically be installed and configured outright by your operating system\u2019s package manager: sudo apt-get -y install apache2 apache2-utils This will install: A systemd service that will ensure Apache can be stopped and started, and will run when the machine is powered on A set of Apache configurations in /etc/apache2 , including the basic configuration, ports configuration, enabled mods, and enabled sites An Apache webroot in /var/www/html , configured to be the provided server on port :80 in /etc/apache2/sites-enabled/000-default.conf ; we\u2019ll make changes and additions to this file later A user and group, www-data , which we will use to read/write web documents.","title":"Install Apache 2"},{"location":"installation/manual/preparing_a_webserver/#enable-apache-mods","text":"We\u2019re going to enable a couple of Apache mods that Drupal highly recommends installing, and which are de-facto considered required by Islandora: sudo a2enmod ssl sudo a2enmod rewrite sudo systemctl restart apache2","title":"Enable Apache Mods"},{"location":"installation/manual/preparing_a_webserver/#add-the-current-user-to-the-www-data-group","text":"Since the user we are currently logged in as is going to work quite a bit inside the Drupal directory, we want to give it group permissions to anything the www-data group has access to. When we run composer , www-data will also be caching data in our own home directory, so we want this group modification to go in both directions. N.B. This code block uses backticks , not single quotes; this is an important distinction as backticks have special meaning in bash . sudo usermod -a -G www-data `whoami` sudo usermod -a -G `whoami` www-data # Immediately log back in to apply the new group. sudo su `whoami`","title":"Add the Current User to the www-data Group"},{"location":"installation/manual/preparing_a_webserver/#php-72","text":"","title":"PHP 7.2"},{"location":"installation/manual/preparing_a_webserver/#install-php-72","text":"PHP can generally be easily installed using your operating system\u2019s package manager, though whether or not the version you\u2019ll be given is up to date depends entirely on whether or not that package manager is kept up-to-date. We\u2019re going to enable both PHP 7.2, as well as the myriad modules we require, simultaneously: sudo apt-get -y install php7.2 php7.2-cli php7.2-common php7.2-curl php7.2-dev php7.2-gd php7.2-imap php7.2-json php7.2-mbstring php7.2-opcache php7.2-xml php7.2-yaml php7.2-zip libapache2-mod-php7.2 php-pgsql php-redis php-xdebug unzip This will install a series of PHP configurations and mods in /etc/php/7.2 , including: A mods-available folder (from which everything is typically enabled by default) A configuration for PHP when run from Apache in the apache2 folder A configuration for PHP when run from the command line - including when run via Drush - in the cli folder unzip , which is important for PHP\u2019s zip module to function correctly despite it not being a direct dependency of the module. We will also need to unzip some things later, so this is convenient to have in place early in the installation process.","title":"Install PHP 7.2"},{"location":"installation/manual/preparing_a_webserver/#postgresql-10","text":"","title":"PostgreSQL 10"},{"location":"installation/manual/preparing_a_webserver/#install-postgresql-10","text":"PostgreSQL can generally be easily installed using your operating system\u2019s package manager. It is typically sensible to install the version the system recognizes as up-to-date; Ubuntu 18.04 sees this as version 10. We\u2019re simply going to install the database software: sudo apt-get -y install postgresql This will install: A user at the system level named postgres ; this will be the only user, by default, that has permission to run the psql binary and have access to Postgres configurations A binary executable at /usr/bin/psql , which anyone - even root - will get kicked out of the moment they run it, since only the postgres user has permission to run any Postgres commands A series of configurations that live in /etc/postgresql/10/main which can be used to modify how PostgreSQL works.","title":"Install PostgreSQL 10"},{"location":"installation/manual/preparing_a_webserver/#configure-postgresql-10-for-use-with-drupal","text":"A modification needs to be made to the PostgreSQL configuration in order for Drupal to properly install and function. This change can be made to the main configuration file at /etc/postgresql/10/main/postgresql.conf : Before : 558 | #bytea_output = \u2018hex\u2019 # hex, escape After : 558 | bytea_output = \u2018escape\u2019 The postgresql service should be restarted to accept the new configuration: sudo systemctl restart postgresql","title":"Configure Postgresql 10 For Use With Drupal"},{"location":"islandora/drupal-bundle-configurations/","text":"Drupal Bundle Configurations In Islandora 8, content models are primarily created using content types (also known as node bundles) and media bundles. Bundles are defined by YAML configuration files. To create new content models , one would create the needed content types and media bundles via UI, then export the yml files related for those bundles using Configuration Synchronization ( http://localhost:8000/admin/config/development/configuration ) or Features . An understanding about the structure of a bundle and various configuration files used to define it helps in creating and updating it. Content types and media bundles can be thought of as web forms consisting of fields. Drupal provides widgets to define the behavior of a field and field storage to define how the data is stored in the database. Drupal provides various display modes to show the forms to user when they are editing (Manage form display) or viewing (Manage display). A content model is packaged as a module for installation. All yml files are put in config/install folder of the module. Note that not all content models would contain media bundles. The following files define the bundles themselves. It contains some metadata about the bundle and lists its dependencies. node.type.your_content_type.yml media_entity.bundle.your_media_bundle.yml The following files define the fields attached to the bundle forms. There must be one config file for each field in your bundle, except for the default drupal fields. field.field.node.your_content_type.field_name1.yml field.field.node.your_content_type.field_name2.yml ... field.field.media.your_media_bundle.field_name1.yml field.field.media.your_media_bundle.field_name2.yml If the new bundle contains new fields, then field storage configurations for the newly created fields would be needed as well. Note that if you reused existing fields, storage definitions should not be defined again. Storage config contains information about the number of values allowed for that field (cardinality). field.storage.node.field_new_name3.yml field.storage.media.field__new_name3.yml There is a configuration file for each combination of bundle / display mode when managing form displays. Usually, form displays will have default and inline modes. core.entity_form_display.media.your_media_bundle.default.yml core.entity_form_display.media.your_media_bundle.inline.yml --- core.entity_form_display.node.your_content_type.default.yml core.entity_form_display.node.your_content_type.inline.yml There is a configuration file for each combination of bundle / display mode when managing displays. Usually, displays will have default and teaser modes for content types and default and content modes for media bundles. core.entity_view_display.media.your_media_bundle.default.yml core.entity_view_display.media.your_media_bundle.content.yml --- core.entity_view_display.node.your_content_type.default.yml core.entity_view_display.node.your_content_type.teaser.yml In addition, Islandora needs a RDF mapping to express the content in RDF and to sync to fedora. There will be one RDF mapping per bundle. rdf.mapping.media.your_media_bundle.yml rdf.mapping.node.your_content_type.yml","title":"Drupal Bundle Configurations"},{"location":"islandora/drupal-bundle-configurations/#drupal-bundle-configurations","text":"In Islandora 8, content models are primarily created using content types (also known as node bundles) and media bundles. Bundles are defined by YAML configuration files. To create new content models , one would create the needed content types and media bundles via UI, then export the yml files related for those bundles using Configuration Synchronization ( http://localhost:8000/admin/config/development/configuration ) or Features . An understanding about the structure of a bundle and various configuration files used to define it helps in creating and updating it. Content types and media bundles can be thought of as web forms consisting of fields. Drupal provides widgets to define the behavior of a field and field storage to define how the data is stored in the database. Drupal provides various display modes to show the forms to user when they are editing (Manage form display) or viewing (Manage display). A content model is packaged as a module for installation. All yml files are put in config/install folder of the module. Note that not all content models would contain media bundles. The following files define the bundles themselves. It contains some metadata about the bundle and lists its dependencies. node.type.your_content_type.yml media_entity.bundle.your_media_bundle.yml The following files define the fields attached to the bundle forms. There must be one config file for each field in your bundle, except for the default drupal fields. field.field.node.your_content_type.field_name1.yml field.field.node.your_content_type.field_name2.yml ... field.field.media.your_media_bundle.field_name1.yml field.field.media.your_media_bundle.field_name2.yml If the new bundle contains new fields, then field storage configurations for the newly created fields would be needed as well. Note that if you reused existing fields, storage definitions should not be defined again. Storage config contains information about the number of values allowed for that field (cardinality). field.storage.node.field_new_name3.yml field.storage.media.field__new_name3.yml There is a configuration file for each combination of bundle / display mode when managing form displays. Usually, form displays will have default and inline modes. core.entity_form_display.media.your_media_bundle.default.yml core.entity_form_display.media.your_media_bundle.inline.yml --- core.entity_form_display.node.your_content_type.default.yml core.entity_form_display.node.your_content_type.inline.yml There is a configuration file for each combination of bundle / display mode when managing displays. Usually, displays will have default and teaser modes for content types and default and content modes for media bundles. core.entity_view_display.media.your_media_bundle.default.yml core.entity_view_display.media.your_media_bundle.content.yml --- core.entity_view_display.node.your_content_type.default.yml core.entity_view_display.node.your_content_type.teaser.yml In addition, Islandora needs a RDF mapping to express the content in RDF and to sync to fedora. There will be one RDF mapping per bundle. rdf.mapping.media.your_media_bundle.yml rdf.mapping.node.your_content_type.yml","title":"Drupal Bundle Configurations"},{"location":"islandora/rdf-mapping/","text":"RDF Generation Summary In Islandora, the JSON-LD Module transforms nodes (or media, or taxonomy terms) into the RDF that is synced into Fedora and the Triplestore. It uses RDF mappings, a concept defined by the RDF Module , and exposes them through the REST API at ?_format=jsonld . Background A quick overview of JSON-LD, the RDF module, and the REST API. The JSON-LD Syntax JSON-LD is a syntax which can be used to express RDF (like Turtle, or RDF XML), that is written in JSON, because devs like JSON and it's web-friendly. The JSON-LD syntax was designed for including Linked Data within HTML of web pages (similar to microdata or RDFa). Instead of nesting the RDF predicates within existing HTML tags as RDFa does, JSON-LD lets you put a solid blob of Linked Data inside a <script> tag. JSON-LD can also function as a standalone document, which is how we're using it. RDF (Drupal Module) The RDF Module is part of Drupal Core, but has no official documentation. The RDF Module embeds RDFa, a form of linked data, within the Drupal-generated HTML when you load the web page for a node, media, or taxonomy term. Official line is that this will allow Google to provide \"rich snippets\" such as star-ratings, contact info, and business hours. As an example of Drupal-provided RDFa: <h1 class=\"page-header\"> <span property=\"schema:title\">My cat</span> </h1> The property=\"schema:title\" is markup generated by Drupal's RDF module that identifies the value \"My cat\" as the schema.org title of this page. A node's fields (such as field_tags ) and properties (such as author ) can be mapped to RDF according to a bundle-specific \"mapping\" that is stored within Drupal. In Drupal8-ese, RDF mappings are configuration entities. Drupal doesn't have a good UI for editing RDF mappings, but you can create, read, and update them as YAML files using Drupal's Configuration Synchronization interface (see section below on How to Edit an RDF Mapping).. REST API The pattern of using ?_format= to get a different representation of content is provided by the RESTful Web Services (rest) module. It allows other services to interact with Drupal entities through HTTP requests ( GET , POST , PATCH , and DELETE ). Which operations are allowed, and with what formats (such as xml , json , and jsonld ) is configured at admin/config/services/rest/ . Note that only jsonld uses RDF mappings; the json and xml formats expose a structured object based on how Drupal sees the entity. Access to these alternate formats throught the REST API corresponds to permissions on the entity, so anyone with access content permission can view the JSON-LD version of that content. This is new as of Drupal 8.2 . For more information on interacting with Drupal entities via REST requests, see An Introduction to RESTful Web Services in Drupal 8 . JSON-LD Module Using the RDF mapping configurations provided by the RDF module, the JSON-LD Module exposes the RDF-mapped entity in JSON-LD, through the REST API, at node/[nid]?_format=jsonld (for nodes; for media and terms, at media/[mid]?_format=jsonld and taxonomy/term/[tid]?_format=jsonld ). The JSON-LD module will only work with mappings that include a value under types (which maps to rdf:type - see below, under Structure of an RDF Mapping). The JSON-LD module provides a hook so other modules can alter the entity before it gets mapped. The islandora module uses this hook to trigger any \"Map URI to Predicate\" and \"Alter JSON-LD Type\" reactions that are configured in Contexts. islandora_defaults provides the two Contexts - \"All Media\" and \"Content\" - that configure these to occur on Media and Repository Item nodes. The JSON-LD module adds RDF datatypes to the RDF values, and includes a mapping of Drupal field types to RDF datatypes. The JSON-LD module provides a hook to alter its Drupal field type to RDF datatype mapping. The JSON-LD module has a configuration option that can cause the ?_format=jsonld to be part of, or not part of, the URIs of Drupal objects. On an out-of-the-box islandora-playbook, this string is stripped, but by default on a fresh install of the jsonld module, it is not. RDF Mappings In an out-of-the-box islandora-playbook, the RDF mappings that exist were loaded from config files, and correspond to the rdf.mapping.[...].yml files located in: [drupal modules directory]/islandora/modules/islandora_core_feature/config/install/ (media and taxonomy terms) [drupal modules directory]/islandora_defaults/config/install/ ( repository_item and the islandora_access vocabulary) [drupal modules directory]/controlled_access_terms/modules/controlled_access_terms_defaults/config/install/ (the default corporate_body , family , geo_location , person , resource_type and subject vocabularies) [drupal web root]/core/profiles/standard/config/install/ (articles, pages, comments, and tags). Once loaded by modules, configuration .yml files are not live so editing them will not change the existing configuration . However, for modules that are Features, it is possible to re-import the changed configuration files at admin/config/development/features (todo: link to further reading on Features). How to edit an RDF Mapping Once loaded, RDF mappings can be customized for the needs of a particular site through Drupal's Configuration Synchronization UI at admin/config/development/configuration . They can be exported, modified, and re-imported one-at-a-time by choosing the \"Single Item\" option on the Export/Import tabs. You can also create new RDF mappings (e.g. for a custom content type) and load them through this interface, by copying an existing mapping and changing the appropriate values. Contributed module for RDF Mappings A custom module rdfui exists, and is installed-but-not-enabled on boxes provisioned by the islandora-playbook. We don't use it because it is very rudimentary and limited to the schema.org vocabulary. We have an open ticket to develop a UI to support RDF mappings to any ontology. Contributions welcome. A number of namespaces such as ldp , ebucore , pcdm , are premis are registered in islandora.module using hook_rdf_namespaces() . To register your own namespaces, you will need to create a custom module that implements that hook. If you import a configuration that uses a namespace that is not registered, bad things will happen silently. Structure of an RDF Mapping Below is an example of an RDF mapping as a .yml (YAML) file. It is the current version of the RDF mapping of the Repository Item ( islandora_object ) bundle, provided by islandora_defaults and exportable as rdf.mapping.node.islandora_object.yml ). The top level key types specifies the rdf:type of the resource or content model. field_model , a required field of Islandora objects, also gets mapped to rdf:type through an arcane back-end process. The top level key fieldMappings specifies fields attached to that bundle and their RDF property mappings. One field can be mapped to more than one RDF property. It is a simple flat list. Mapping Types mapping_type: : There are several mapping types which are provided out of the box. - rel - standing for relationship, expresses a relationship between two resources - property - the default, or if a relationship is not provided, expresses the relationship between a resource and some literal text. Datatype Callbacks datatype_callback : This is a custom function that transforms the output of the field. There are some provided to us by Drupal and some added by Islandora, such as: - Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value which converts dates to Iso format - Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough which converts a referenced entity to the URI on the entity (which is configurable with the link_field argument An example usage of the Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough is as follows: field_subject: properties: - 'dcterms:subject' datatype_callback: callable: 'Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough' arguments: link_field: 'field_authority_link' Which would convert a reference to the subject's taxonomy term entity to a reference to the URI provided in field_authority_link of that subject's taxonomy term entity. Sample RDF Mapping langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_defaults module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_created: properties: - 'dc:created' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_issued: properties: - 'dc:issued' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' field_extent: properties: - 'dc:extent' field_identifier: properties: - 'dc:identifier' field_member_of: properties: - 'pcdm:memberOf' mapping_type: rel field_resource_type: properties: - 'dc:type' mapping_type: rel field_rights: properties: - 'dc:rights' field_subject: properties: - 'dc:subject' mapping_type: rel field_weight: properties: - 'co:index' title: properties: - 'dc:title' created: properties: - 'schema:dateCreated' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' changed: properties: - 'schema:dateModified' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' uid: properties: - 'schema:author' mapping_type: rel Sample JSON-LD { \"@graph\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/8\", \"@type\":[ \"http:\\/\\/pcdm.org\\/models#Object\" ], \"http:\\/\\/purl.org\\/dc\\/terms\\/title\":[ { \"@value\":\"lasmomias de uninpahu\", \"@language\":\"fa\" } ], \"http:\\/\\/schema.org\\/author\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/en\\/user\\/1\" } ], \"http:\\/\\/schema.org\\/dateCreated\":[ { \"@value\":\"2019-06-04T14:32:05+00:00\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime\" } ], \"http:\\/\\/schema.org\\/dateModified\":[ { \"@value\":\"2019-06-04T17:02:51+00:00\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/description\":[ { \"@value\":\"mpermmbklmh\", \"@language\":\"fa\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/created\":[ { \"@value\":\"2015-10-15\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\" }, { \"@value\":\"2015-10-15\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#date\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/extent\":[ { \"@value\":\"1 item\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\" } ], \"http:\\/\\/pcdm.org\\/models#memberOf\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/7\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/type\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/subject\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27\" } ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/en\\/user\\/1\", \"@type\":[ \"http:\\/\\/schema.org\\/Person\" ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/7\", \"@type\":[ \"http:\\/\\/pcdm.org\\/models#Object\" ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3\", \"@type\":[ \"http:\\/\\/schema.org\\/Thing\" ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27\", \"@type\":[ \"http:\\/\\/schema.org\\/Thing\" ] } ] }","title":"RDF Generation"},{"location":"islandora/rdf-mapping/#rdf-generation","text":"","title":"RDF Generation"},{"location":"islandora/rdf-mapping/#summary","text":"In Islandora, the JSON-LD Module transforms nodes (or media, or taxonomy terms) into the RDF that is synced into Fedora and the Triplestore. It uses RDF mappings, a concept defined by the RDF Module , and exposes them through the REST API at ?_format=jsonld .","title":"Summary"},{"location":"islandora/rdf-mapping/#background","text":"A quick overview of JSON-LD, the RDF module, and the REST API.","title":"Background"},{"location":"islandora/rdf-mapping/#the-json-ld-syntax","text":"JSON-LD is a syntax which can be used to express RDF (like Turtle, or RDF XML), that is written in JSON, because devs like JSON and it's web-friendly. The JSON-LD syntax was designed for including Linked Data within HTML of web pages (similar to microdata or RDFa). Instead of nesting the RDF predicates within existing HTML tags as RDFa does, JSON-LD lets you put a solid blob of Linked Data inside a <script> tag. JSON-LD can also function as a standalone document, which is how we're using it.","title":"The JSON-LD Syntax"},{"location":"islandora/rdf-mapping/#rdf-drupal-module","text":"The RDF Module is part of Drupal Core, but has no official documentation. The RDF Module embeds RDFa, a form of linked data, within the Drupal-generated HTML when you load the web page for a node, media, or taxonomy term. Official line is that this will allow Google to provide \"rich snippets\" such as star-ratings, contact info, and business hours. As an example of Drupal-provided RDFa: <h1 class=\"page-header\"> <span property=\"schema:title\">My cat</span> </h1> The property=\"schema:title\" is markup generated by Drupal's RDF module that identifies the value \"My cat\" as the schema.org title of this page. A node's fields (such as field_tags ) and properties (such as author ) can be mapped to RDF according to a bundle-specific \"mapping\" that is stored within Drupal. In Drupal8-ese, RDF mappings are configuration entities. Drupal doesn't have a good UI for editing RDF mappings, but you can create, read, and update them as YAML files using Drupal's Configuration Synchronization interface (see section below on How to Edit an RDF Mapping)..","title":"RDF (Drupal Module)"},{"location":"islandora/rdf-mapping/#rest-api","text":"The pattern of using ?_format= to get a different representation of content is provided by the RESTful Web Services (rest) module. It allows other services to interact with Drupal entities through HTTP requests ( GET , POST , PATCH , and DELETE ). Which operations are allowed, and with what formats (such as xml , json , and jsonld ) is configured at admin/config/services/rest/ . Note that only jsonld uses RDF mappings; the json and xml formats expose a structured object based on how Drupal sees the entity. Access to these alternate formats throught the REST API corresponds to permissions on the entity, so anyone with access content permission can view the JSON-LD version of that content. This is new as of Drupal 8.2 . For more information on interacting with Drupal entities via REST requests, see An Introduction to RESTful Web Services in Drupal 8 .","title":"REST API"},{"location":"islandora/rdf-mapping/#json-ld-module","text":"Using the RDF mapping configurations provided by the RDF module, the JSON-LD Module exposes the RDF-mapped entity in JSON-LD, through the REST API, at node/[nid]?_format=jsonld (for nodes; for media and terms, at media/[mid]?_format=jsonld and taxonomy/term/[tid]?_format=jsonld ). The JSON-LD module will only work with mappings that include a value under types (which maps to rdf:type - see below, under Structure of an RDF Mapping). The JSON-LD module provides a hook so other modules can alter the entity before it gets mapped. The islandora module uses this hook to trigger any \"Map URI to Predicate\" and \"Alter JSON-LD Type\" reactions that are configured in Contexts. islandora_defaults provides the two Contexts - \"All Media\" and \"Content\" - that configure these to occur on Media and Repository Item nodes. The JSON-LD module adds RDF datatypes to the RDF values, and includes a mapping of Drupal field types to RDF datatypes. The JSON-LD module provides a hook to alter its Drupal field type to RDF datatype mapping. The JSON-LD module has a configuration option that can cause the ?_format=jsonld to be part of, or not part of, the URIs of Drupal objects. On an out-of-the-box islandora-playbook, this string is stripped, but by default on a fresh install of the jsonld module, it is not.","title":"JSON-LD Module"},{"location":"islandora/rdf-mapping/#rdf-mappings","text":"In an out-of-the-box islandora-playbook, the RDF mappings that exist were loaded from config files, and correspond to the rdf.mapping.[...].yml files located in: [drupal modules directory]/islandora/modules/islandora_core_feature/config/install/ (media and taxonomy terms) [drupal modules directory]/islandora_defaults/config/install/ ( repository_item and the islandora_access vocabulary) [drupal modules directory]/controlled_access_terms/modules/controlled_access_terms_defaults/config/install/ (the default corporate_body , family , geo_location , person , resource_type and subject vocabularies) [drupal web root]/core/profiles/standard/config/install/ (articles, pages, comments, and tags). Once loaded by modules, configuration .yml files are not live so editing them will not change the existing configuration . However, for modules that are Features, it is possible to re-import the changed configuration files at admin/config/development/features (todo: link to further reading on Features).","title":"RDF Mappings"},{"location":"islandora/rdf-mapping/#how-to-edit-an-rdf-mapping","text":"Once loaded, RDF mappings can be customized for the needs of a particular site through Drupal's Configuration Synchronization UI at admin/config/development/configuration . They can be exported, modified, and re-imported one-at-a-time by choosing the \"Single Item\" option on the Export/Import tabs. You can also create new RDF mappings (e.g. for a custom content type) and load them through this interface, by copying an existing mapping and changing the appropriate values. Contributed module for RDF Mappings A custom module rdfui exists, and is installed-but-not-enabled on boxes provisioned by the islandora-playbook. We don't use it because it is very rudimentary and limited to the schema.org vocabulary. We have an open ticket to develop a UI to support RDF mappings to any ontology. Contributions welcome. A number of namespaces such as ldp , ebucore , pcdm , are premis are registered in islandora.module using hook_rdf_namespaces() . To register your own namespaces, you will need to create a custom module that implements that hook. If you import a configuration that uses a namespace that is not registered, bad things will happen silently.","title":"How to edit an RDF Mapping"},{"location":"islandora/rdf-mapping/#structure-of-an-rdf-mapping","text":"Below is an example of an RDF mapping as a .yml (YAML) file. It is the current version of the RDF mapping of the Repository Item ( islandora_object ) bundle, provided by islandora_defaults and exportable as rdf.mapping.node.islandora_object.yml ). The top level key types specifies the rdf:type of the resource or content model. field_model , a required field of Islandora objects, also gets mapped to rdf:type through an arcane back-end process. The top level key fieldMappings specifies fields attached to that bundle and their RDF property mappings. One field can be mapped to more than one RDF property. It is a simple flat list.","title":"Structure of an RDF Mapping"},{"location":"islandora/rdf-mapping/#mapping-types","text":"mapping_type: : There are several mapping types which are provided out of the box. - rel - standing for relationship, expresses a relationship between two resources - property - the default, or if a relationship is not provided, expresses the relationship between a resource and some literal text.","title":"Mapping Types"},{"location":"islandora/rdf-mapping/#datatype-callbacks","text":"datatype_callback : This is a custom function that transforms the output of the field. There are some provided to us by Drupal and some added by Islandora, such as: - Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value which converts dates to Iso format - Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough which converts a referenced entity to the URI on the entity (which is configurable with the link_field argument An example usage of the Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough is as follows: field_subject: properties: - 'dcterms:subject' datatype_callback: callable: 'Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough' arguments: link_field: 'field_authority_link' Which would convert a reference to the subject's taxonomy term entity to a reference to the URI provided in field_authority_link of that subject's taxonomy term entity.","title":"Datatype Callbacks"},{"location":"islandora/rdf-mapping/#sample-rdf-mapping","text":"langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_defaults module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_created: properties: - 'dc:created' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_issued: properties: - 'dc:issued' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' field_extent: properties: - 'dc:extent' field_identifier: properties: - 'dc:identifier' field_member_of: properties: - 'pcdm:memberOf' mapping_type: rel field_resource_type: properties: - 'dc:type' mapping_type: rel field_rights: properties: - 'dc:rights' field_subject: properties: - 'dc:subject' mapping_type: rel field_weight: properties: - 'co:index' title: properties: - 'dc:title' created: properties: - 'schema:dateCreated' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' changed: properties: - 'schema:dateModified' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' uid: properties: - 'schema:author' mapping_type: rel","title":"Sample RDF Mapping"},{"location":"islandora/rdf-mapping/#sample-json-ld","text":"{ \"@graph\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/8\", \"@type\":[ \"http:\\/\\/pcdm.org\\/models#Object\" ], \"http:\\/\\/purl.org\\/dc\\/terms\\/title\":[ { \"@value\":\"lasmomias de uninpahu\", \"@language\":\"fa\" } ], \"http:\\/\\/schema.org\\/author\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/en\\/user\\/1\" } ], \"http:\\/\\/schema.org\\/dateCreated\":[ { \"@value\":\"2019-06-04T14:32:05+00:00\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime\" } ], \"http:\\/\\/schema.org\\/dateModified\":[ { \"@value\":\"2019-06-04T17:02:51+00:00\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/description\":[ { \"@value\":\"mpermmbklmh\", \"@language\":\"fa\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/created\":[ { \"@value\":\"2015-10-15\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\" }, { \"@value\":\"2015-10-15\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#date\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/extent\":[ { \"@value\":\"1 item\", \"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\" } ], \"http:\\/\\/pcdm.org\\/models#memberOf\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/7\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/type\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3\" } ], \"http:\\/\\/purl.org\\/dc\\/terms\\/subject\":[ { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27\" } ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/en\\/user\\/1\", \"@type\":[ \"http:\\/\\/schema.org\\/Person\" ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/7\", \"@type\":[ \"http:\\/\\/pcdm.org\\/models#Object\" ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3\", \"@type\":[ \"http:\\/\\/schema.org\\/Thing\" ] }, { \"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27\", \"@type\":[ \"http:\\/\\/schema.org\\/Thing\" ] } ] }","title":"Sample JSON-LD"},{"location":"technical-documentation/adding_format_jsonld/","text":"Drupal requires the use of a _format query parameter to get alternate representations of a node/media. By default, Islandora deploys with the jsonld module and the Milliner microservice. These two components are configured to strip this _format query parameter off of the end of URIs. This means that when your content is indexed in Fedora, the triplestore, etc... it's URI will be something like http://localhost:8000/node/1 and not http://localhost:8000/node/1?_format=jsonld . Pre-1.0 installations. If you are using a very early version of Islandora 8 (pre-release), then you may have URIs with _format=jsonld at the end of them. If you update to newer code, you will need to ensure that your site is configured to add ?_format=jsonld back to the URLs if you want to maintain consistency. If you don't do this, you can end up with two copies of your objects in your Fedora repository (one with and one without ?_format=jsonld ). You will also have two sets of triples in your triplestore. Adding ?_format=jsonld to your URIs To turn the ?_format parameter back on: Go to admin/config/search/jsonld and confirm the \"Remove jsonld parameter from @ids\" checkbox is unchecked . Add strip_format_jsonld: false to your Milliner config. If you deployed using the default Islandora-playbook this file would be located at /var/www/html/Crayfish/Milliner/cfg/config.yaml . If you are using Islandora-playbook and are provisioning new environments for your older Islandora 8, you'll want to lock down the variables in your inventory that control this config. crayfish_milliner_strip_format_jsonld: true webserver_app_jsonld_remove_format: 1","title":"Adding back ?_format=jsonld"},{"location":"technical-documentation/adding_format_jsonld/#pre-10-installations","text":"If you are using a very early version of Islandora 8 (pre-release), then you may have URIs with _format=jsonld at the end of them. If you update to newer code, you will need to ensure that your site is configured to add ?_format=jsonld back to the URLs if you want to maintain consistency. If you don't do this, you can end up with two copies of your objects in your Fedora repository (one with and one without ?_format=jsonld ). You will also have two sets of triples in your triplestore.","title":"Pre-1.0 installations."},{"location":"technical-documentation/adding_format_jsonld/#adding-_formatjsonld-to-your-uris","text":"To turn the ?_format parameter back on: Go to admin/config/search/jsonld and confirm the \"Remove jsonld parameter from @ids\" checkbox is unchecked . Add strip_format_jsonld: false to your Milliner config. If you deployed using the default Islandora-playbook this file would be located at /var/www/html/Crayfish/Milliner/cfg/config.yaml . If you are using Islandora-playbook and are provisioning new environments for your older Islandora 8, you'll want to lock down the variables in your inventory that control this config. crayfish_milliner_strip_format_jsonld: true webserver_app_jsonld_remove_format: 1","title":"Adding ?_format=jsonld to your URIs"},{"location":"technical-documentation/alpaca_tips/","text":"Alpaca Tips Alpaca is event-driven middleware based on Apache Camel for Islandora Currently, Alpaca ships with four event-driven components which are being run with Apache Karaf - islandora-connector-derivative - islandora-http-client - islandora-indexing-fcrepo - islandora-indexing-triplestore islandora-connector-derivative This service receives requests from Drupal when it wants to create derivatives and passes that request along to a microservice in Crayfish . When it receives the derivative file back from the microservice, it passes the file back to Drupal. islandora-http-client This service overrides the default http client with Islandora specific configuration. islandora-indexing-fcrepo This service receives requests from Drupal in response to write operations on entities. These requests are passed along to Milliner microservice in Crayfish to convert Drupal entities into Fedora resources and communicate with Fedora (via Chullo ). islandora-indexing-triplestore This service receives requests from Drupal on indexing and deleting in order to persist/delete content in the triplestore. Steps for developing with Alpaca Clone the Alpaca github repository Alpaca into /home/karaf in your vagrant vm (assuming you're developing with islandora-playbook ) i. git clone https://github.com/Islandora/Alpaca.git Modify java files as needed. Run sudo ./gradlew clean build install from /home/karaf/Alpaca to rebuild the jar's. (This process runs the tests as well.) Start the karaf client- run ./bin/client in /opt/karaf . Run feature:list | grep islandora to see all the features from islandora. Run feature:uninstall featurename on each of those (inserting the name of the feature for featurename). An example might be feature:uninstall islandora-indexing-fcrepo Run repo-list to see all of the repositories installed. Run repo-remove the one that says islandora. It might look something like repo-remove islandora-karaf-1.0.1 . Add your new, local features file (that was made when you ran step 3). It should be somewhere like /home/karaf/Alpaca/karaf/build/resources/main/features.xml and would be added with repo-add file:/home/karaf/Alpaca/karaf/build/resources/main/features.xml . Run feature:list | grep islandora should reveal the uninstalled features. Run feature:install featurename on each of those. If you encounter an issues, check the logs in /opt/karaf/data/log/karaf.log You may need to uncomment the line #org.ops4j.pax.url.mvn.localRepository in the /opt/karaf/etc/org.ops4j.pax.url.mvn.cfg file in order to be able to find the local jars","title":"Alpaca Tips"},{"location":"technical-documentation/alpaca_tips/#alpaca-tips","text":"Alpaca is event-driven middleware based on Apache Camel for Islandora Currently, Alpaca ships with four event-driven components which are being run with Apache Karaf - islandora-connector-derivative - islandora-http-client - islandora-indexing-fcrepo - islandora-indexing-triplestore","title":"Alpaca Tips"},{"location":"technical-documentation/alpaca_tips/#islandora-connector-derivative","text":"This service receives requests from Drupal when it wants to create derivatives and passes that request along to a microservice in Crayfish . When it receives the derivative file back from the microservice, it passes the file back to Drupal.","title":"islandora-connector-derivative"},{"location":"technical-documentation/alpaca_tips/#islandora-http-client","text":"This service overrides the default http client with Islandora specific configuration.","title":"islandora-http-client"},{"location":"technical-documentation/alpaca_tips/#islandora-indexing-fcrepo","text":"This service receives requests from Drupal in response to write operations on entities. These requests are passed along to Milliner microservice in Crayfish to convert Drupal entities into Fedora resources and communicate with Fedora (via Chullo ).","title":"islandora-indexing-fcrepo"},{"location":"technical-documentation/alpaca_tips/#islandora-indexing-triplestore","text":"This service receives requests from Drupal on indexing and deleting in order to persist/delete content in the triplestore.","title":"islandora-indexing-triplestore"},{"location":"technical-documentation/alpaca_tips/#steps-for-developing-with-alpaca","text":"Clone the Alpaca github repository Alpaca into /home/karaf in your vagrant vm (assuming you're developing with islandora-playbook ) i. git clone https://github.com/Islandora/Alpaca.git Modify java files as needed. Run sudo ./gradlew clean build install from /home/karaf/Alpaca to rebuild the jar's. (This process runs the tests as well.) Start the karaf client- run ./bin/client in /opt/karaf . Run feature:list | grep islandora to see all the features from islandora. Run feature:uninstall featurename on each of those (inserting the name of the feature for featurename). An example might be feature:uninstall islandora-indexing-fcrepo Run repo-list to see all of the repositories installed. Run repo-remove the one that says islandora. It might look something like repo-remove islandora-karaf-1.0.1 . Add your new, local features file (that was made when you ran step 3). It should be somewhere like /home/karaf/Alpaca/karaf/build/resources/main/features.xml and would be added with repo-add file:/home/karaf/Alpaca/karaf/build/resources/main/features.xml . Run feature:list | grep islandora should reveal the uninstalled features. Run feature:install featurename on each of those. If you encounter an issues, check the logs in /opt/karaf/data/log/karaf.log You may need to uncomment the line #org.ops4j.pax.url.mvn.localRepository in the /opt/karaf/etc/org.ops4j.pax.url.mvn.cfg file in order to be able to find the local jars","title":"Steps for developing with Alpaca"},{"location":"technical-documentation/checking-coding-standards/","text":"Checking Code Style Before opening a pull request, you should check your code style. If you are using the Vagrant , you can run phpcs within the Drupal installation directory (on the Vagrant, that is /var/www/html/drupal ) or from within the web directory ( /var/www/html/drupal/web ) as follows: from within Drupal's root directory: ./vendor/bin/phpcs --standard=./vendor/drupal/coder/coder_sniffer/Drupal modules/contrib/my_module , where modules/contrib/my_module is the relative or full path to the PHP file you want to check. from within Drupal's web directory: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal yourfile , where yourfile is the relative or full path to the PHP file you want to check. In both cases: the path to the coding standard file can be relative to where you are running it from, e.g. when in web : --standard=../vendor/drupal/coder/coder_sniffer/Drupal you can specify a single file to check, or a directory path; in the latter case, all files in that directory will be checked. Islandora 8 runs phpcs in its Travis continuous integration environment, and there, it specifies which files to ignore and which files to check. It is a good idea for developers to specify the same options when running phpcs locally, prior to opening a pull request. For example (running phpcs from the within Drupal's web directory), you should use the following --ignore and --extensions options: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal --ignore=*.md --extensions=php,module,inc,install,test,profile,theme,css,info modules/contrib/my_module","title":"Checking Coding Standards"},{"location":"technical-documentation/checking-coding-standards/#checking-code-style","text":"Before opening a pull request, you should check your code style. If you are using the Vagrant , you can run phpcs within the Drupal installation directory (on the Vagrant, that is /var/www/html/drupal ) or from within the web directory ( /var/www/html/drupal/web ) as follows: from within Drupal's root directory: ./vendor/bin/phpcs --standard=./vendor/drupal/coder/coder_sniffer/Drupal modules/contrib/my_module , where modules/contrib/my_module is the relative or full path to the PHP file you want to check. from within Drupal's web directory: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal yourfile , where yourfile is the relative or full path to the PHP file you want to check. In both cases: the path to the coding standard file can be relative to where you are running it from, e.g. when in web : --standard=../vendor/drupal/coder/coder_sniffer/Drupal you can specify a single file to check, or a directory path; in the latter case, all files in that directory will be checked. Islandora 8 runs phpcs in its Travis continuous integration environment, and there, it specifies which files to ignore and which files to check. It is a good idea for developers to specify the same options when running phpcs locally, prior to opening a pull request. For example (running phpcs from the within Drupal's web directory), you should use the following --ignore and --extensions options: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal --ignore=*.md --extensions=php,module,inc,install,test,profile,theme,css,info modules/contrib/my_module","title":"Checking Code Style"},{"location":"technical-documentation/diagram/","text":"Islandora 8 Architecture Diagram Diagram prepared by Bethany Seeger based on work done by Gavin Morris Components Islandora The following components are microservices developed and maintained by the Islandora community. They are bundled under Islandora Crayfish : FITS - A Symfony 4 Microservice to retrieve FITS data and persist it as a Drupal media node. Works with Islandora FITS Gemini - A path mapping service for Islandora 8. Gemini is what links content created in Drupal to data stored in Fedora. Homarus - Provides FFmpeg as a microservice for generating video and audio derivatives. Houdini - ImageMagick as a microservice for generating image-based derivatives, including thumbnails. Hypercube - Tesseract as a microservice for OCR. Milliner - A microservice that converts Drupal entities into Fedora resources. Recast - A microservice that remaps Drupal URIs to add Fedora to Fedora links based on associated Drupal URIs in RDF. Other Open Source The following components are deployed with Islandora, but are developed and maintained by other open source projects: Apache - The Apache HTTP Server, colloquially called Apache, is a free and open-source cross-platform web server software. Provides the environment in which Islandora 8 and its components run. ActiveMQ - Apache ActiveMQ is an open source message broker written in Java together with a full Java Message Service client. Karaf - A modular open source OSGi runtime environment. Tomcat - an open-source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and WebSocket technologies. Tomcat provides a \"pure Java\" HTTP web server environment in which Java code can run. Solr - An open-source enterprise-search platform. Solr is the default search and discover layer of Islandora 8, and a key component in some methods for migration from Islandora 7 to 8 Blazegraph - Blazegraph is a triplestore and graph database. Cantaloupe - an open-source dynamic image server for on-demand generation of derivatives of high-resolution source images. Used in Islandora 8 to support IIIF Drupal - Drupal is an open source content management system, and the heart of Islandora 8. All user and site-building aspects of Islandora 8 are experienced through Drupal as a graphical user interface. Fedora - A robust, modular, open source repository system for the management and dissemination of digital content. The default smart storage for Islandora 8. Matomo - Matomo, formerly Piwik, is a free and open source web analytics application. It provides usage statistics and a rich dashboard for Islandora 8. MySQL - MySQL is an open-source relational database management system. Used as a Drupal database in Islandora 8, it can be easily replaced with other database management systems such as PostgreSQL Triplestore - See Blazegraph.","title":"Architecture Diagram"},{"location":"technical-documentation/diagram/#islandora-8-architecture-diagram","text":"Diagram prepared by Bethany Seeger based on work done by Gavin Morris","title":"Islandora 8 Architecture Diagram"},{"location":"technical-documentation/diagram/#components","text":"","title":"Components"},{"location":"technical-documentation/diagram/#islandora","text":"The following components are microservices developed and maintained by the Islandora community. They are bundled under Islandora Crayfish : FITS - A Symfony 4 Microservice to retrieve FITS data and persist it as a Drupal media node. Works with Islandora FITS Gemini - A path mapping service for Islandora 8. Gemini is what links content created in Drupal to data stored in Fedora. Homarus - Provides FFmpeg as a microservice for generating video and audio derivatives. Houdini - ImageMagick as a microservice for generating image-based derivatives, including thumbnails. Hypercube - Tesseract as a microservice for OCR. Milliner - A microservice that converts Drupal entities into Fedora resources. Recast - A microservice that remaps Drupal URIs to add Fedora to Fedora links based on associated Drupal URIs in RDF.","title":"Islandora"},{"location":"technical-documentation/diagram/#other-open-source","text":"The following components are deployed with Islandora, but are developed and maintained by other open source projects: Apache - The Apache HTTP Server, colloquially called Apache, is a free and open-source cross-platform web server software. Provides the environment in which Islandora 8 and its components run. ActiveMQ - Apache ActiveMQ is an open source message broker written in Java together with a full Java Message Service client. Karaf - A modular open source OSGi runtime environment. Tomcat - an open-source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and WebSocket technologies. Tomcat provides a \"pure Java\" HTTP web server environment in which Java code can run. Solr - An open-source enterprise-search platform. Solr is the default search and discover layer of Islandora 8, and a key component in some methods for migration from Islandora 7 to 8 Blazegraph - Blazegraph is a triplestore and graph database. Cantaloupe - an open-source dynamic image server for on-demand generation of derivatives of high-resolution source images. Used in Islandora 8 to support IIIF Drupal - Drupal is an open source content management system, and the heart of Islandora 8. All user and site-building aspects of Islandora 8 are experienced through Drupal as a graphical user interface. Fedora - A robust, modular, open source repository system for the management and dissemination of digital content. The default smart storage for Islandora 8. Matomo - Matomo, formerly Piwik, is a free and open source web analytics application. It provides usage statistics and a rich dashboard for Islandora 8. MySQL - MySQL is an open-source relational database management system. Used as a Drupal database in Islandora 8, it can be easily replaced with other database management systems such as PostgreSQL Triplestore - See Blazegraph.","title":"Other Open Source"},{"location":"technical-documentation/docs-build/","text":"Introduction This documentation is built using mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the Markdown format, and it all resides in the docs directory in the repository. The organization of the documentation is controlled by the mkdocs.yml in the root of the repository. Prerequisites You will need to have mkdocs installed locally, as well as the mkdocs theme. Install mkdocs : sudo -H pip install mkdocs Install material theme: sudo -H pip install mkdocs-material Build and Deploy documentation Make sure you have all the submodules: git submodule update --init --recursive Documentation is build by running to the following command in the root of the repository: mkdocs build --clean This command will create a static site folder in the root of the repository. You can preview any changes you have made to the documentation by running the following command: mkdocs serve And then visiting http://localhost:8111 in your browser. To deploy documentation to GitHub Pages, issue the following command: mkdocs gh-deploy --clean","title":"How to Build Documentation"},{"location":"technical-documentation/docs-build/#introduction","text":"This documentation is built using mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the Markdown format, and it all resides in the docs directory in the repository. The organization of the documentation is controlled by the mkdocs.yml in the root of the repository.","title":"Introduction"},{"location":"technical-documentation/docs-build/#prerequisites","text":"You will need to have mkdocs installed locally, as well as the mkdocs theme. Install mkdocs : sudo -H pip install mkdocs Install material theme: sudo -H pip install mkdocs-material","title":"Prerequisites"},{"location":"technical-documentation/docs-build/#build-and-deploy-documentation","text":"Make sure you have all the submodules: git submodule update --init --recursive Documentation is build by running to the following command in the root of the repository: mkdocs build --clean This command will create a static site folder in the root of the repository. You can preview any changes you have made to the documentation by running the following command: mkdocs serve And then visiting http://localhost:8111 in your browser. To deploy documentation to GitHub Pages, issue the following command: mkdocs gh-deploy --clean","title":"Build and Deploy documentation"},{"location":"technical-documentation/drupal-project/","text":"Introduction Islandora 8 makes use of drupal-project , a composer template for Drupal projects. We augment it with Islandora specific changes, and need to occasionally pull in upstream changes. The process below outlines how we will do it in a consistent manner. Pull in upstream changes Clone a fork of our fork to your or your institution's GitHub organization: git clone fork Add the drupal-composer repository as a remote: git remote add upstream https://github.com/drupal-composer/drupal-project.git Fetch everything: git fetch --all Create a branch to pull in changes that is based off the Islandora 8.x-1.x branch: git checkout -b sync-upstream Rebase upstream changes: git rebase upstream/8.x (fix any merge conflicts, and then git rebase --continue ) Push to your fork: git push origin sync-upstream Create pull request","title":"Updating drupal-project"},{"location":"technical-documentation/drupal-project/#introduction","text":"Islandora 8 makes use of drupal-project , a composer template for Drupal projects. We augment it with Islandora specific changes, and need to occasionally pull in upstream changes. The process below outlines how we will do it in a consistent manner.","title":"Introduction"},{"location":"technical-documentation/drupal-project/#pull-in-upstream-changes","text":"Clone a fork of our fork to your or your institution's GitHub organization: git clone fork Add the drupal-composer repository as a remote: git remote add upstream https://github.com/drupal-composer/drupal-project.git Fetch everything: git fetch --all Create a branch to pull in changes that is based off the Islandora 8.x-1.x branch: git checkout -b sync-upstream Rebase upstream changes: git rebase upstream/8.x (fix any merge conflicts, and then git rebase --continue ) Push to your fork: git push origin sync-upstream Create pull request","title":"Pull in upstream changes"},{"location":"technical-documentation/flysystem/","text":"Flysystem Islandora uses Flysystem and the associated Drupal module to persist binary files to Fedora instead of keeping a copy in both Drupal and Fedora. Background \" Flysystem is a filesystem abstraction library for PHP\" which allows applications to read from and write to a variety of data source beyond the local file system, such as an SFTP server , Amazon S3 , and Zip files provided an Adapter is available to support it. Flysystem Adapters extend a single class implementing League\\Flysystem\\FilesystemInterface although some separate adapter traits for common actions and properties, such as the StreamedCopyTrait, are available. The Drupal Flysystem module extends Flysystem to work within the Drupal filesystem structure. Drupal flysystem plugins include a Flysystem adapter (if not provided by default or in another library) and a class implementing Drupal\\flysystem\\Plugin\\FlysystemPluginInterface which instantiates the Flysystem adapter based on the Drupal site's configuration. The Drupal Flysystem module uses flysystem stream wrappers to define filesystem descriptors which are configured in the site's settings.php file. The configurations including the filesystem prefix, adapter (driver), and any adapter-specific configurations such as API endpoints and authorization information. Islandora's Implementation The Plugin and Adapter Islandora 8 implements a Flysystem adapter and a Drupal Flysystem plugin . The Flysystem adapter acts as an intermediary between the Flysystem filesystem API and Fedora, translating requests and responses between them. The adapter interacts with Fedora using an instance of the Chullo Fedora API it receives from the Drupal Flysystem plugin. The Drupal Flysystem plugin's main responsibility is to instantiate the Chullo Fedora API object with the proper authentication and pass it to the Flysystem adapter. To authenticate with Fedora the plugin adds a handler to the Chullo's Guzzle client which adds a JWT authentication header to each request. The Fedora Flysystem adapter does not use Gemini to map the relationship between Drupal URIs and Fedora URIs, so they are indexed separately using the \"files_in_fedora\" Context which triggers the \"Index Fedora File in Gemini\" and \"Delete Fedora File in Gemini\" actions as appropriate. Configuration The fedora file system is configured in the site's settings.php file. An example configuration can be seen in the claw-playbook web server role's drupal tasks : $settings['flysystem'] = [ 'fedora' => [ 'driver' => 'fedora', 'config' => [ 'root' => 'http://localhost:8080/fcrepo/rest/', ], ], ]; The configuration array's top-level key is the name of the Drupal stream wrapper, which also serves as the filesystem prefix. Any Drupal file path using \"fedora://\" will use this Flysystem adapter. Drupal will translate this prefix to the site's domain plus \"_flystem/fedora/\". For example, using the default configuration provided by the claw-playbook, a file stored at \"fedora://test.tif\" will persist to Fedora with the URI \"http://localhost:8080/fcrepo/rest/test.tif\" and will be accessible from the Drupal URL \"http://localhost:8000/_flysystem/fedora/test.tif\". The 'driver' value 'fedora' corresponds to the plugin's machine name . The 'config' section contains all the adapter-specific configurations. In this case, the only thing configured for the site is the Fedora REST end-point. (Change this value to match your own Fedora's location, if needed.) The JWT is configured separately. Other examples of Drupal Flysystem configurations can be seen in the module's README . Islandora is configured to have all Media use the Fedora file system by default in the islandora_core_feature. For example, the field storage uri_scheme setting for field_media_image (and the other media types) is \"fedora\". This can also be viewed in the UI on the field's \"Field settings\" page; e.g. http://localhost:8000/admin/structure/media/manage/image/fields/media.image.field_media_image/storage , look for \"Upload destination\" and see that \"Flysystem: fedora\" is selected. However, there are methods for saving files that can explicitly set a different filesystem than the default. Migrations can explicitly set which file system a file is saved to and Islandora can emit events that also specify which file system a derivative should be saved to. Derivatives As hinted in the previous section, Islandora, by default saves derivatives to the Drupal public file system. For example, if I upload a Tiff to a repository item as a File Media with the term \"Original File\", the \"Image Original File\" ( image_original_file ) Context is triggered. This fires the 'image_generate_a_service_file_from_an_original_file' action which emits an event using the 'public' scheme (file system) . To make Islandora save future derivatives to Fedora instead of to Drupal, change the corresponding action's \"File system\" setting ('scheme' in the corresponding config file) to 'fedora' instead of 'public'.","title":"Flysystem"},{"location":"technical-documentation/flysystem/#flysystem","text":"Islandora uses Flysystem and the associated Drupal module to persist binary files to Fedora instead of keeping a copy in both Drupal and Fedora.","title":"Flysystem"},{"location":"technical-documentation/flysystem/#background","text":"\" Flysystem is a filesystem abstraction library for PHP\" which allows applications to read from and write to a variety of data source beyond the local file system, such as an SFTP server , Amazon S3 , and Zip files provided an Adapter is available to support it. Flysystem Adapters extend a single class implementing League\\Flysystem\\FilesystemInterface although some separate adapter traits for common actions and properties, such as the StreamedCopyTrait, are available. The Drupal Flysystem module extends Flysystem to work within the Drupal filesystem structure. Drupal flysystem plugins include a Flysystem adapter (if not provided by default or in another library) and a class implementing Drupal\\flysystem\\Plugin\\FlysystemPluginInterface which instantiates the Flysystem adapter based on the Drupal site's configuration. The Drupal Flysystem module uses flysystem stream wrappers to define filesystem descriptors which are configured in the site's settings.php file. The configurations including the filesystem prefix, adapter (driver), and any adapter-specific configurations such as API endpoints and authorization information.","title":"Background"},{"location":"technical-documentation/flysystem/#islandoras-implementation","text":"","title":"Islandora's Implementation"},{"location":"technical-documentation/flysystem/#the-plugin-and-adapter","text":"Islandora 8 implements a Flysystem adapter and a Drupal Flysystem plugin . The Flysystem adapter acts as an intermediary between the Flysystem filesystem API and Fedora, translating requests and responses between them. The adapter interacts with Fedora using an instance of the Chullo Fedora API it receives from the Drupal Flysystem plugin. The Drupal Flysystem plugin's main responsibility is to instantiate the Chullo Fedora API object with the proper authentication and pass it to the Flysystem adapter. To authenticate with Fedora the plugin adds a handler to the Chullo's Guzzle client which adds a JWT authentication header to each request. The Fedora Flysystem adapter does not use Gemini to map the relationship between Drupal URIs and Fedora URIs, so they are indexed separately using the \"files_in_fedora\" Context which triggers the \"Index Fedora File in Gemini\" and \"Delete Fedora File in Gemini\" actions as appropriate.","title":"The Plugin and Adapter"},{"location":"technical-documentation/flysystem/#configuration","text":"The fedora file system is configured in the site's settings.php file. An example configuration can be seen in the claw-playbook web server role's drupal tasks : $settings['flysystem'] = [ 'fedora' => [ 'driver' => 'fedora', 'config' => [ 'root' => 'http://localhost:8080/fcrepo/rest/', ], ], ]; The configuration array's top-level key is the name of the Drupal stream wrapper, which also serves as the filesystem prefix. Any Drupal file path using \"fedora://\" will use this Flysystem adapter. Drupal will translate this prefix to the site's domain plus \"_flystem/fedora/\". For example, using the default configuration provided by the claw-playbook, a file stored at \"fedora://test.tif\" will persist to Fedora with the URI \"http://localhost:8080/fcrepo/rest/test.tif\" and will be accessible from the Drupal URL \"http://localhost:8000/_flysystem/fedora/test.tif\". The 'driver' value 'fedora' corresponds to the plugin's machine name . The 'config' section contains all the adapter-specific configurations. In this case, the only thing configured for the site is the Fedora REST end-point. (Change this value to match your own Fedora's location, if needed.) The JWT is configured separately. Other examples of Drupal Flysystem configurations can be seen in the module's README . Islandora is configured to have all Media use the Fedora file system by default in the islandora_core_feature. For example, the field storage uri_scheme setting for field_media_image (and the other media types) is \"fedora\". This can also be viewed in the UI on the field's \"Field settings\" page; e.g. http://localhost:8000/admin/structure/media/manage/image/fields/media.image.field_media_image/storage , look for \"Upload destination\" and see that \"Flysystem: fedora\" is selected. However, there are methods for saving files that can explicitly set a different filesystem than the default. Migrations can explicitly set which file system a file is saved to and Islandora can emit events that also specify which file system a derivative should be saved to.","title":"Configuration"},{"location":"technical-documentation/flysystem/#derivatives","text":"As hinted in the previous section, Islandora, by default saves derivatives to the Drupal public file system. For example, if I upload a Tiff to a repository item as a File Media with the term \"Original File\", the \"Image Original File\" ( image_original_file ) Context is triggered. This fires the 'image_generate_a_service_file_from_an_original_file' action which emits an event using the 'public' scheme (file system) . To make Islandora save future derivatives to Fedora instead of to Drupal, change the corresponding action's \"File system\" setting ('scheme' in the corresponding config file) to 'fedora' instead of 'public'.","title":"Derivatives"},{"location":"technical-documentation/install-enable-drupal-modules/","text":"Downloading and Enabling Drupal Modules and Themes Islandora 8 can make use of majority of the Drupal 8 modules and themes . Common use cases have been documented in the Islandora 8 Cookbook . There are several ways to download and install Drupal modules. Please refer to this guide on Drupal.org. Composer is the recommended method to install and update drupal modules and themes in Islandora 8. $ composer require \"<vendor>/<package>:<version>\" # Example $ composer require \"islandora/islandora_defaults:1.0.0\" In the Islandora 8 playbook , you can add a Drupal module's or theme's machine name to the drupal_composer_dependencies variable here . To enable the Drupal module or theme, add the module machine name to the drupal_enable_modules variable as well. For modules that require additional steps, additional tasks may need to be added to the Ansible playbook. Re-provisioning your instance via Ansible will install the module.","title":"Installing Modules"},{"location":"technical-documentation/install-enable-drupal-modules/#downloading-and-enabling-drupal-modules-and-themes","text":"Islandora 8 can make use of majority of the Drupal 8 modules and themes . Common use cases have been documented in the Islandora 8 Cookbook . There are several ways to download and install Drupal modules. Please refer to this guide on Drupal.org. Composer is the recommended method to install and update drupal modules and themes in Islandora 8. $ composer require \"<vendor>/<package>:<version>\" # Example $ composer require \"islandora/islandora_defaults:1.0.0\" In the Islandora 8 playbook , you can add a Drupal module's or theme's machine name to the drupal_composer_dependencies variable here . To enable the Drupal module or theme, add the module machine name to the drupal_enable_modules variable as well. For modules that require additional steps, additional tasks may need to be added to the Ansible playbook. Re-provisioning your instance via Ansible will install the module.","title":"Downloading and Enabling Drupal Modules and Themes"},{"location":"technical-documentation/jwt/","text":"Islandora uses JWT tokens to authenticate communication between its components. RSA private public key pair is used to sign and verify JWT tokens. The process of issuing JWT tokens using RSA private key is handled by the Drupal jwt module. The private public RSA pair needed by JWT authentication mechanism is generated in the web server. By default, claw playbook places the keys in /opt/islandora/auth . Crayfish and Tomcat/Karaf need the public key to verify the JWT token. By default, they are put in the following locations: /var/www/html/Crayfish/public.key , /etc/tomcat8/public.key . If you are deploying Crayfish and Karaf/Tomcat components to different servers, ensure that web server public.key files are in the expected locations. Note that the connection need to be over SSL or an encrypted channel for this communication to be secure. Otherwise, a third party can capture your token and get access to your servers. The JWT tokens expiration time is configurable via Islandora core settings: http://localhost:8000/admin/config/islandora/core . Currently it is recommend to set the JWT Expiry to the maximum expected time for a job, including batch jobs.","title":"JWT Authentication"},{"location":"technical-documentation/migrate-7x/","text":"Migrating from Islandora 7.x to Islandora 8 (YouTube Video) Nov 21, 2019 For tools to migrate into Islandora 8 from an existing Islandora 7 instance, please see migrate_7x_claw","title":"Islandora 7"},{"location":"technical-documentation/migrate-7x/#migrating-from-islandora-7x-to-islandora-8-youtube-video","text":"Nov 21, 2019 For tools to migrate into Islandora 8 from an existing Islandora 7 instance, please see migrate_7x_claw","title":"Migrating from Islandora 7.x to Islandora 8 (YouTube Video)"},{"location":"technical-documentation/migrate-csv/","text":"Table of Contents Summary Introduction Dependencies Overview Installation Ingesting Files Anatomy of a migration Source Process Destination The Process Section in Depth Running the File Migration Ingesting Nodes Complex Fields Running the node migration Migrating Media What have we learned Where to go from here Summary This tutorial introduces you to the Drupal 8 Migrate tools available to create Islandora content. Whether you will eventually use CSVs or other sources (such as XML or directly from a 7.x Islandora) this tutorial should be useful as it covers the basics and mechanics of migration. This tutorial uses the configurations and code available in the migrate_islandora_csv module which, when enabled, will create three example migrations ready for you to use with the Migrate API. Each migration comes from one of the files in the config/install folder. We'll walk through them in detail below. The module is also uses Features which allows you to make changes to the configuration files and sync those changes into your Drupal site. A note on using Features This tutorial (and Islandora in general) makes heavy use of Features, which is an easy way to ship and install Drupal configuration. However, after enabling a Feature module, the code in that module's directory is no longer \"live\", as the configuration now resides in the Drupal database. If you change code in the YAML files, it will not take effect until you re-import the Feature. There is a walkthrough in the \"Configuration\" section of the Migrate 7.x to 8 tutorial. Sample CSV and images are also included in the module as a convenience so they are easily available on the Drupal server running the migration. (This is not the recommended method for making files available to Drupal in a real migration.) The module also contains a Migrate process plugin that transforms strings into associative arrays. This is useful for populating multiple Linked Agent fields. (See \" Typed Relation \" for more information on the Linked Agent field.) It will be available when this module is enabled, and the node migration uses it. It was written generically and will hopefully become part of Migrate Plus, but for now it is here. When you are ready to create your actual migrations, the contents of this repository can function as a template for you to create the YAML files defining your own migrations. Introduction Why CSV? CSV files (whether separated by commas, tabs, or other delimiters) are easy to understand and work with, and there's good tooling available for using them with Drupal 8's Migrate API . The Drupal contrib module migrate_source_csv provides a source plugin that reads from a CSV file, and migrate_plus provides more tools and flexibility for creating migrations, including the ability to create customized migrations using YAML and package them up as Features . In this tutorial, we'll be inspecting each migration file in detail before running it. You'll start out by migrating the images themselves first, and then you'll create various Drupal entities to describe the files from the metadata in the CSV. It's not as scary as it sounds (especially since this module contains the data we'll be using in a data directory), but you will need a few things before beginning: An instance of Islandora 8. Use Islandora 8 playbook to spin up an environment pre-loaded with all the modules you need (except this one) Some basic command line skills. You won't need to know much, but you'll have to vagrant ssh into the box, navigate into Drupal, and use git and drush , etc... If you can copy/paste into a terminal, you'll survive. A big part of this tutorial relies on the islandora_defaults and controlled_access_terms_defaults features, which define the default metadata profile for Islandora (which we'll be migrating into). You're not required to use the islandora_defaults or controlled_access_terms_defaults for your repository, but for the purposes of demonstration, it saves you a lot of user interface administrivia so you can focus just on the learning how to migrate. By the time you are done with this exercise, you'll be able to easily apply your knowledge to migrate using any custom metadata profile you can build using Drupal. Overview The Migrate API is the main way to ingest batches of data into Drupal (and because Islandora 8 is Drupal, into Islandora). The Migrate module only provides the framework, it's up to you to create the rules that take data from a source , through a process (i.e. a mapping) to a destination . A set of these rules is called a \"migration\". It has to be set up (as a Configuration Entity, either by importing a YAML file or by installing a Feature) and then it has to be run. Once a migration has been run, it will have created (or updated) a bunch of Drupal entities of one type - whether that's taxonomy terms, nodes, files, etc. Since an Object in Islandora 8 is made up of several different Drupal entities that refer to each other, it's going to take multiple migrations to create an Islandora object, and it's important to perform these migrations in a sensible order. A basic Islandora object is at minimum: - a file, which holds the actual binary contents of an item - a node, which holds the descriptive metadata for an item and makes it discoverable - a media, which holds technical metadata and references the file and the node, linking the two together. Therefore, each row in your CSV must contain enough information to create these. Using multiple sources for object components While this tutorial uses a single CSV to describe all the parts of an islandora object, a site can use multiple sources (CSV or otherwise) to migrate the various parts. The only requirements then is to have keys in place matching the parts together. For example, a 'files.csv' can use paths that serve as file identifiers and 'metadata.csv' can use an object identifier. As long as the source for the media migration has the key values for the file and metadata migrations (the file paths and object identifiers, respectively, in this example), we can create the necessary links between the object's components. This is very useful when you need to migrate multiple media/file pairs associated with a single node, such as pre-processed derivatives that need to be migrated. Buried in your descriptive metadata are often references to other things which aren't repository items themselves, but records still need to be kept for them. Authors, publishers, universities, places, etc... can be modeled as Drupal Entities, so that they can be referenced by other Entities. So there's the potential to have a lot of different entity types described in a single row in a CSV. In this tutorial, we're working with islandora_defaults and controlled_access_terms entities, and will be migrating six entity types using the three migrations included in this module. - file - node - media - subject - person - corporate_body We can do this because subjects, persons, and corporate bodies are (in this example) represented by simple 'name' strings. We create them on the fly, as if we were adding new tags to a tag vocabulary. If we wanted to model subjects, people, or corporate bodies as entities with multiple fields (first name, last name, date, subheadings, URI, etc.) then we would need up to six migrations. Migrations follow the Extract-Transform-Load pattern . You extract the information from a source, process the data to transform it into the format you need, and load it into the destination system (i.e. Drupal). Migrations are stored in Drupal as configuration, which means they can be represented in YAML, transferred to and from different sites, and are compatible with Drupal's configuration synchronization tools. And the structure of each YAML file is arranged to follow the Extract-Transform-Load pattern. To perform the migrations, we'll be using drush . We will be able to run each of the file, node, and media migrations separately or all at once in a group. We will also learn how to roll back a migration in case it didn't go as planned. The sample migrations here will give us a chance to show off some techniques for working with multi-valued fields, entity reference fields, and complex field types like controlled_access_terms 's typed_relation field. We'll also see how the migrate framework can help de-duplicate, and at the same time, linked data-ize :tm: your data by looking up previously migrated entities. So hold on to your hats. First, let's get this module onto your Islandora instance. Installation From your islandora-playbook directory, issue the following commands to enable this module: - vagrant ssh to open a shell in your Islandora instance. - cd /var/www/html/drupal/web/modules/contrib to get to your modules directory. - git clone https://github.com/Islandora/migrate_islandora_csv to clone down the repository from GitHub. - drush en -y migrate_islandora_csv to enable the module, installing the migrations as configuration. Optionally, flush the cache ( drush cr ), so the migrations become visible in the GUI at Manage > Structure > Migrations > migrate_islandora_csv (http://localhost:8000/admin/structure/migrate/manage/migrate_islandora_csv/migrations) Now lets go migrate some files. Caution As you saw, you can git clone into the modules directory, but if you're installing a custom module that's intended to stay installed for the long term (unlike a migration feature, which you should probably uninstall and delete when you're done with it) then you may want to check with your devops folks and use Composer instead. However, using Git directly allows you to be more flexible when iterating and testing. Ingesting Files To migrate files (i.e. just the raw binaries) from a CSV, you need: - a column in the CSV containing paths to the files you wish to ingest, and - the files need to be accessible from the server that's running Drupal so that the Migrate framework can find them. This tutorial assumes you're working with the sample images provided in the module, which will be located at /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images . When you're migrating for real, the files will have to be uploaded or otherwise made accessible to the server before this point. Open up the CSV file at data/migration.csv and you'll see a file column containing paths to the sample images. You can use your favorite shell-based utility to open it at /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv , or browse to it on GitHub, or just look at it pasted below as this tutorial does not require you to edit the files. file /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Nails Nails Nails.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Free Smells.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Nothing to See Here.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Call For Champagne.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/This Must Be The Place.jpg Open up the \"files\" migration at config/install/migrate_plus.migration.file.yml . You'll see the following migration config: id: file label: Import Image Files migration_group: migrate_islandora_csv source: plugin: csv path: '/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv' delimiter: ',' # 1 means you have a header row, 0 means you don't header_row_count: 1 # Each migration needs a unique key per row in the CSV. Here we're using the file path. keys: - file # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'. constants: # Islandora uses Flysystem and stream wrappers to work with files. What we're really saying here is # to put these files in Fedora in a 'csv_migration' folder. It doesn't matter if the directory # doesn't exist yet, it will get created for you automatically. destination_dir: 'fedora://csv_migration' process: ## # The following two fields are temporary, and just used to generate a destination for the file. ## # Hack the file name out of the full path provided in the 'file' column. filename: - plugin: callback callable: pathinfo source: file - plugin: extract index: - basename # Construct the destination URI using the file name. destination: plugin: concat delimiter: / source: - constants/destination_dir - '@filename' ## # Here's where we copy the file over and set the URI of the file entity. ## uri: plugin: file_copy source: - file # The source column in the CSV - '@destination' # The destination entry from above destination: # These are Drupal 'image' entities we're making, not just plain 'file' entities. plugin: 'entity:file' type: image Anatomy of a Migration It seems like a lot to take in at first, but there's a pattern to Drupal migrations. They always contain core identification information and three key sections: source , process , and destination . And these sections correspond exactly to Extract, Transform, and Load. Identification The first section of a migration contains metadata for Drupal about the migration itself. The id parameter is the machine name of this migration, and must not conflict with existing migrations. Note: use alphanumeric characters and underscores. Hyphens (-) will cause the migration to fail. The label is a human-readable string to identify this migration, and the migration_group is where this migration will be grouped in the GUI. Source The source section configures a Drupal source plugin that will extract the data. A source plugin provides \"rows\" of data to processing plugins so that they can be worked on. In this case, we're using the csv source plugin, which very literally uses rows, however you can have source plugins that work with other data formats like XML and JSON. Look at the config from this section. source: plugin: csv path: '/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv' delimiter: ',' header_row_count: 1 keys: - file constants: destination_dir: 'fedora://csv_migration' You can see we provide a path to its location, what delimiter to use, if it uses a header row, and which column contains a unique key for each entry. Constants can also be defined here (more on those later). Process We're going to dive into the details of this step below, but in summary: the process section is where we extract the desired bits from that row, transform them as desired, and populate them into an associative array. This section is a series of named steps, that call one or more process plugins. These plugins are executed in sequence, with the results getting passed from one to the next, forming a pipeline. By the end of the step, you have transformed some element of data (perhaps through text manipulation, concatenation, etc...) into the form that Drupal is expecting. The resulting value gets associated with the name of the step. If the name of a step is the same as a field or property name on the target entity, the migrated entity will have that value for that field or property. This is how you can apply metadata from the CSV to an entity. If the step name is not the name of a field or property on the target entity, the migrate framework assumes it's a temporary value you're using as part of more complex logic. It won't wind up on the entity when the migration is done, but it will be available for you to use within other process plugins. You can always spot when a temporary value is being used by the fact that it's prefixed with an @ and surrounded by quotes. You can also pass constants into process plugins, which are prefixed with constants/ . Destination The destination section contains the configuration that describes what gets loaded into Drupal. destination: plugin: 'entity:file' type: image You can create any type of content entity in Drupal. In this case, we're making file entities. Specifically, we're making images, which are a special type of file entity that's provided by core Drupal. The Process Section in Depth In the process section of the migration, we're copying the images over into a Drupal file system and setting the uri property on the corresponding File entity. uri: plugin: file_copy source: - file - '@destination' To do this, we're using the file_copy process plugin. But first, we have to know where a file is located and where it should be copied to. We know where the file resides, we have that in the CSV's file column. But we're going to have to do some string manipulation in order to generate the new location where we want the file copied. We're trying to convert something like /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Free Smells.jpg to fedora://csv_migration/Free Smells.jpg . The URI we're constructing is a stream wrapper of the form scheme://path/to/file . Islandora uses Flysystem , which allows for integration with many different types of filesystems, both remote and local. With Flysystem , the scheme part of the URI is the name of a filesystem. By default, Fedora is exposed using the scheme fedora:// . So by setting uri to fedora://csv_migration/Free Smells.jpg , we're saying \"put Free Smells.jpg in the csv_migration directory in Fedora.\" Now, to perform this string manipulation in PHP, we'd do something like $info = pathinfo($filepath); $filename = $info['basename']; $destination = \"fedora://csv_migration/\" . $filename; We will mimic this exactly in the process section of our migration config. Just like we declare variables and call functions with PHP code, we can make entries in the process section to store the output of Drupal process plugins. We'll build up a destination \"variable\" using a filename \"variable\" and pass it into the file_copy process plugin. To start, we'll get the filename using two process plugins, which do the same steps as the first two lines of the PHP above: filename: - plugin: callback callable: pathinfo source: file - plugin: extract index: - basename The first process plugin, callback , lets you execute any PHP function that takes a single input and returns an output. It's not as flexible as making your own custom process plugin, but it's still pretty useful in a lot of situations. Here we're using it to call pathinfo() , telling it to use the file column in the CSV as input. We pass the resulting array from pathinfo() to the extract process plugin, which pulls data out of arrays using the keys you provide it under index . Now that we have the file name, we have to prepend it with fedora://csv_migration/ to make the destination URI. In our PHP code above, we used . to concatenate the strings. In the migration framework, we use the concat process plugin. You provide it with two or more strings to concatenate, as well as a delimiter. destination: plugin: concat delimiter: / source: - constants/destination_dir - '@filename' In our PHP code, we concatenated the $filename variable with a string literal. In our process plugin, we can provide the variable, e.g. the output of the filename process step, by prefixing it with an @ . We can't, however, pass in fedora://csv_migration directly as a string. At first glance, you might think something like this would work, but it totally doesn't: # Can't do this. Won't work at all. destination: plugin: concat delimiter: / source: - 'fedora://csv_migration' - '@filename' That's because the migrate framework only interprets source values as names of columns from the CSV or names of other process steps. Even if they're wrapped in quotes. It will never try to use the string directly as a value. To circumvent this, we declare a constant in the source section of the migration config. constants: destination_dir: 'fedora://csv_migration' This constant can be referenced as constants/destination_dir and passed into the concat process plugin as a source . There are a lot more process plugins available through the (core) Migrate and Migrate Plus modules, and they are documented on Drupal.org . Running the File Migration Migrations can be executed via drush using the migrate:import command. You specify which migration to run by using the id defined in its YAML. You also need to set parameters to tell Drush who you are and what your site's URL is. Failing to do so will result in derivatives not being generated and malformed/improper RDF. So don't forget them! To run the file migration from the command line, make sure you're within /var/www/html/drupal/web (or any subdirectory) and enter drush -y --userid=1 --uri=localhost:8000 migrate:import file If you've already run the migration before, but want to re-run it for any reason, use the --update flag. drush -y --userid=1 --uri=localhost:8000 migrate:import file --update You may have noticed that migrations can be grouped, and that they define a migration_group in their configuration. You can execute an entire group of migrations using the --group flag. For example, to run the entire group defined in this module drush -y --userid=1 --uri=localhost:8000 migrate:import --group migrate_islandora_csv You can also use the migrate:rollback command to delete all migrated entities. Like migrate:import , it also respects the --group flag and --uri parameter. So to rollback everything we just did: drush -y --uri=localhost:8000 migrate:rollback --group migrate_islandora_csv If something goes bad during development, sometimes migrations can get stuck in a bad state. Use the migrate:reset command to put a migration back to Idle . For example, with the file migration, use drush -y --uri=localhost:8000 migrate:reset file Make sure you've run (and not rolled back) the file migration. It should tell you that it successfully created 5 files. You can confirm its success by visiting http://localhost:8000/admin/content/files. You should see 5 images of neon signs in the list. Ingesting Nodes Those five images are nice, but we need something to hold their descriptive metadata and show them off. We use nodes in Drupal to do this, and that means we have another migration file to work with. Nestled in with our nodes' descriptive metadata, though, are more Drupal entities, and we're going to generate them on the fly while we're making nodes. While we're doing it, we'll see how to use pipe delimited strings for multiple values as well as how to handle typed_relation fields that are provided by controlled_access_terms . Open up /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/config/install/migrate_plus.migration.node.yml and check it out. # Uninstall this config when the feature is uninstalled dependencies: enforced: module: - migrate_islandora_csv id: node label: Import Nodes from CSV migration_group: migrate_islandora_csv source: plugin: csv path: modules/contrib/migrate_islandora_csv/data/migration.csv # 1 means you have a header row, 0 means you don't header_row_count: 1 # Each migration needs a unique key per row in the csv. Here we're using the file path. keys: - file # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'. constants: # We're tagging our nodes as Images model: Image # Everything gets created as admin uid: 1 # Set fields using values from the CSV process: title: title uid: constants/uid # We use the skip_on_empty plugin because # not every row in the CSV has subtitle filled # in. field_alternative_title: plugin: skip_on_empty source: subtitle method: process field_description: description # Dates are EDTF strings field_edtf_date: issued # Make the object an 'Image' field_model: plugin: entity_lookup source: constants/model entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_models # Split up our pipe-delimited string of # subjects, and generate terms for each. field_subject: - plugin: skip_on_empty source: subject method: process - plugin: explode delimiter: '|' - plugin: entity_generate entity_type: taxonomy_term value_key: name bundle_key: vid bundle: subject # If you have multiple values of a complex # field, iterate over them using sub_process. # But sub_process requires structured data # i.e. an associative array, not a string # or list of strings. To turn strings into # associative arrays, use the custom # process plugin str_to_assoc. # Extract a list of names from the column # called photographer, and transform it into # an array of associative arrays. photographers: - source: photographer plugin: skip_on_empty method: process - plugin: explode delimiter: '|' - plugin: str_to_assoc key: 'name' # Iterate over the array of associative arrays. # We create the taxonomy terms here so that we # can specify the bundle - other columns which # might feed into Linked Agent may contain # corporate bodies or families. The resulting # array contains the resulting term id (tid) # under the key 'target_id'. # We also add a key-value pair # 'rel_type' => 'relators:pht'. Other columns # might use different relators. linked_agent_pht: plugin: sub_process source: '@photographers' process: target_id: plugin: entity_generate source: name entity_type: taxonomy_term value_key: name bundle_key: vid bundle: person rel_type: plugin: default_value default_value: 'relators:pht' # Extract an array of names from the column # called provider providers: - source: provider plugin: skip_on_empty method: process - plugin: explode delimiter: '|' - plugin: str_to_assoc key: 'name' # Generate/lookup taxonomy terms in the # corporate body vocab, and add the relator. linked_agent_prv: plugin: sub_process source: '@providers' process: target_id: plugin: entity_generate source: name entity_type: taxonomy_term value_key: name bundle_key: vid bundle: 'corporate_body' rel_type: plugin: default_value default_value: 'relators:prv' # Write to the linked agent field. In this case # we first want to merge the info from the # photographer and provider columns. Since we # already prepared our structured array using # the components of the typed_relation field as # keys ('target_id' and 'rel_type'), we can just # pass this array into field_linked_agent. field_linked_agent: plugin: merge source: - '@linked_agent_pht' - '@linked_agent_prv' # We're making nodes destination: plugin: 'entity:node' default_bundle: islandora_object The Breakdown The source section looks mostly the same other than some different constants we're defining - the string \"Image\" (no quotes needed) and the drupal ID of the user who will be assigned as the author. If values contained special characters such as colons, quotes would be needed. If you look at the process section, you can see we're taking the title , description , and issued columns from the CSV and applying them directly to the migrated nodes without any manipulation. title: title field_description: description field_edtf_date: issued For subtitle , we're passing it through the skip_on_empty process plugin because not every row in our CSV has a subtitle entry. It's very useful when you have spotty data, and you'll end up using it a lot. The method: process bit tells the migrate framework only skip that particular field if the value is empty, and not to skip the whole row. It's important, so don't forget it. The full YAML for setting field_alternative_title from subtitle looks like this: field_alternative_title: plugin: skip_on_empty source: subtitle method: process Now here's where things get interesting. We can look up other entities to populate entity reference fields. For example, all Repository Items have an entity reference field that holds a taxonomy term from the islandora_models vocabulary. All of our examples are images, so we'll look up the Image model in the vocabulary since it already exists (it gets made for you when you use islandora-playbook). We use the entity_lookup process plugin to do this. field_model: plugin: entity_lookup source: constants/model entity_type: taxonomy_term # 'name' is the string value of the term, e.g. 'Original file', 'Thumbnail'. value_key: name bundle_key: vid bundle: islandora_models The entity_lookup process plugin looks up an entity based on the configuration you give it. You use the entity_type , bundle_key , and bundle configurations to limit which entities you search through. entity_type is, as you'd suspect, the type of entity: node, media, file, taxonomy_term, etc... bundle_key tells the migrate framework which property holds the bundle of the entity, and bundle is the actual bundle id you want to restrict by. In this case we specify the vid (vocabulary id) has to be islandora_models - which is the machine name of the vocabulary we're interested in. In this plugin, source is the value to search for - in this case we're looking for the string \"Image\", which we've defined as a constant. And we're comparing it to the name field on each term by setting the value_key config. This approach applies the same taxonomy term to all objects. If you want to assign a taxonomy term at the node level (that is, potentially a different term for each node) rather than to all the nodes being imported, you can use a configuration as illustrated next. In this example, we have a column in our CSV input file with the header 'model', which we define as the source of the field_model values: field_model: plugin: entity_lookup # 'model' is the header of a field in our input CSV that contains the string value of the taxonomy term. source: model entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_models If you're not sure that the entities you're looking up already exist, you can use the entity_generate plugin, which takes the same config, but will create a new entity if the lookup fails. We use this plugin to create subject taxonomy terms that we tag our nodes with. A node can have multiple subjects, so we've encoded them in the CSV as pipe delimited strings. subject Neon signs|Night Neon signs|Night|Funny Neon signs|Night Drinking|Neon signs Neon signs We can hack those apart easily enough. In PHP we'd do something like $subjects = explode($string, '|'); $terms = []; foreach ($subjects as $name) { $terms[] = \\Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->create([ ... 'vid' => 'subject', 'name' => $name, ... ]); } $node->set('field_subject', $terms); With process plugins, that logic looks like field_subject: - plugin: skip_on_empty source: subject method: process - plugin: explode delimiter: '|' - plugin: entity_generate entity_type: taxonomy_term value_key: name bundle_key: vid bundle: subject Here we've got a small pipeline that uses the skip_on_empty process plugin, which we've already seen, followed by explode . The explode process plugin operates exactly like its PHP counterpart, taking an array and a delimiter as input. The combination of skip_on_empty and explode behave like a foreach loop on the explode results. If we have an empty string, nothing happens. If there's one or more pipe delimited subject names in the string, then entity_generate gets called for each name that's found. The entity_generate process plugin will try to look up a subject by name, and if that fails, it creates one using the name and saves a reference to it in the node. So entity_generate is actually smarter than our pseudo-code above, because it can be run over and over again and it won't duplicate entities. :champagne: Complex Fields Some fields don't hold just a single type of value. In other words, not everything is just text, numbers, or references. Using Drupal 8's Typed Data API , fields can hold groups of named values with different types. Consider a field that holds an RGB color. You could set it with PHP like so: $node->set('field_color', ['R' => 255, 'G' => 255, 'B' => 255]); You could even have a multi-valued color field, and do something like this $node->set('field_color', [ ['R' => 0, 'G' => 0, 'B' => 0], ['R' => 255, 'G' => 255, 'B' => 255], ]); In the migrate framework, you have two options for handling these types of fields. You can build up the full array they're expecting, which is difficult and requires a custom process plugin. Or, if you only have one value going into a complex field, you can set each named component in the field with separate process pipelines. In controlled_access_terms , we define a new field type of typed_relation , which is an entity reference coupled with a MARC relator. It expects an associative array that looks like this: [ 'target_id' => 1, 'rel_type' => 'relators:ctb'] The target_id portion takes an entity id, and rel_type takes the predicate for the MARC relator we want to use to describe the relationship the entity has with the repository item. This example would reference taxonomy_term 1 and give it the relator for \"Contributor\". If we have a single name to deal with, we can set those values in YAML, accessing field_linked_agent/target_id and field_linked_agent/rel_type independently. field_linked_agent/target_id: plugin: entity_generate source: photographer entity_type: taxonomy_term value_key: name bundle_key: vid bundle: person field_linked_agent/rel_type: constants/relator Here we're looking at the photographer column in the CSV, which contains the names of the photographers that captured these images. Since we know these are photographers, and not publishers or editors, we can bake in the relator constant we set to relators:pht in the source section of the migration. So all that's left to do is to set the taxonomy term's id via entity_generate . If the lookup succeeds, the id is returned. If it fails, a term is created and its id is returned. In the end, by using the / syntax to set properties on complex fields, everything gets wrapped up into that nice associative array structure for you automatically. However, if you have multiple names, and/or multiple columns that contain values that will go into the same typed_relation field, you do need to build up a full array of structured data. We start by extracting the values in the photographer column, and busting them into a list. (In this case, given the sample data, the lists will all have length 1). Then, we use a custom process plugin to make each value the value in an associative array (see example data below). photographers: - source: photographer plugin: skip_on_empty method: process - plugin: explode delimiter: '|' - plugin: str_to_assoc key: 'name' So, if we started with a column containing 'Alice|Bob|Charlie' at the end of this pipeline, the photographers temporary variable would contain [ ['name' => 'Alice'], ['name' => 'Bob'], ['name' => 'Charlie] ] Next, we use the sub_process plugin. It takes an array of associative arrays (as seen above) and iterates over them. From within subprocess' process parameter, you can access only what's defined in that associative array. Here, when we do our entity_generate lookup, our source is name , the (only) key in that array. linked_agent_pht: plugin: sub_process source: '@photographers' process: target_id: plugin: entity_generate source: name entity_type: taxonomy_term value_key: name bundle_key: vid bundle: person rel_type: plugin: default_value default_value: 'relators:pht' Within sub_process , we cannot access the temporary variables or constants that we've created in the outer migration. This is why we use the default_value plugin when for the rel_type . It would have been simpler to define a constant as we did with 'Image', but we wouldn't be able to access it. The output of this pipeline is now formatted as the structured data expected by a typed_relation field: [ ['target_id' => 42, 'rel_type' => 'relators:pht' ], ['target_id' => 43, 'rel_type' => 'relators:pht' ], ['target_id' => 44, 'rel_type' => 'relators:pht' ], ] The final step will be to assign this array to the Linked Agent field. But first, we repeat the process for another column, which contains names that have a different relator, and a different bundle. Finally, we merge the two temporary variables and pass the result to field_linked_agent . We don't have to assign the sub-components of field_linked_agent here, because this is already the structured data it is looking for. field_linked_agent: plugin: merge source: - '@linked_agent_pht' - '@linked_agent_prv' Clear as mud? Great. Now let's run that migration. Running the node migration Like with the file migration, run drush -y --userid=1 --uri=http://localhost:8000 migrate:import node from anywhere within the Drupal installation directory will fire off the migration. Go to http://localhost:8000/admin/content and you should see five new nodes. Click on one, though, and you'll see it's just a stub with metadata. The CSV metadata is there, links to other entities like subjects and photographers are there, but there's no trace of the corresponding files. Here's where media entities come into play. Migrating Media Media entities are Drupal's solution for fieldable files. Since you can't put fields on a file, what you can do is wrap the file with a Media entity. In addition to a reference to the file (binary), technical metadata and structural metadata for the file go on the Media entity (e.g. MIME type, file size, resolution). Media also have a few special fields that are required for Islandora, field_media_of and field_use , which denote what node owns the media and what role the media serves, respectively. Since the Media entity references both the file it wraps and the node that owns it, Media entities act as a bridge between files and nodes, tying them together. And to do this, we make use of one last process plugin, migration_lookup . Open up /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/config/install/migrate_plus.migration.media.yml and give it a look. # Uninstall this config when the feature is uninstalled dependencies: enforced: module: - migrate_islandora_csv id: media label: Import Media from CSV migration_group: migrate_islandora_csv source: plugin: csv path: modules/contrib/migrate_islandora_csv/data/migration.csv # 1 means you have a header row, 0 means you don't header_row_count: 1 # Each migration needs a unique key per row in the csv. Here we're using the file path. keys: - file # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'. constants: # We're tagging our media as Original Files use: Original File # Everything gets created as admin uid: 1 process: name: title uid: constants/uid # Make the media an 'Original File' field_media_use: plugin: entity_lookup source: constants/use entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_media_use # Lookup the migrated file in the file migration. field_media_image: plugin: migration_lookup source: file migration: file no_stub: true # Lookup the migrated node in the node migration field_media_of: plugin: migration_lookup source: file migration: node no_stub: true destination: # These are 'image' media we're making. plugin: 'entity:media' default_bundle: image migration_dependencies: required: - migrate_plus.migration.file - migrate_plus.migration.node optional: { } The Breakdown Compared to the other migrations, this one is very straightforward. There's no string or array manipulation in YAML, and at most there's only one process plugin per field. Title and user are set directly, with no processing required name: title uid: constants/uid The field_media_use field is a tag that's used to denote the purpose of a file with regard to the node it belongs to. E.g. is this the original file? a lower quality derivative? thumbnail? etc... In many ways it bears a resemblance to DSID in Islandora 7.x. Like field_model with nodes, the vocabulary already exists in your Islandora install, so all you have to do is look it up with the entity_lookup plugin. # Make the media an 'Original File' field_media_use: plugin: entity_lookup source: constants/use entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_media_use The field_media_image and field_media_of fields are how the media binds a file to a node. You could use entity_lookup or entity_generate , but we've already migrated them and can very easily look them up by the id assigned to them during migration. But what's the benefit of doing so? The entity_lookup and entity_generate process plugins do the job fine, right? The main advantage of using migration_lookup and defining migrations whenever possible, is that migrated entities can be rolled back. If you were to hop into your console and execute drush -y --uri=http://localhost:8000 migrate:rollback --group migrate_islandora_csv Your nodes, media, and files would all be gone. But your subjects and photographers would remain. If you want to truly and cleanly roll back every entity in a migration, you need to define those migrations and use migration_lookup to set entity reference fields. Running the media migration Run drush -y --uri=http://localhost:8000 migrate:import media from anywhere within the Drupal installation directory. You should now be able to see the media files attached to the nodes you created earlier. At this point, you might want to create derivatives, such as thumbnails, using the appropriate Drupal actions on the main content admin window. What have we learned? If you've made it all the way to the end here, then you've learned that you can migrate files and CSV metadata into Islandora using only YAML files. You've seen how to transform data with pipelines of processing plugins and can handle numeric, text, and entity reference fields. You can handle multiple values for fields, and even more complicated things like typed_relation fields. And as big as this walkthrough was, we're only scratching the surface of what can be done with the Migrate API. Where to go from here? There's certainly more you can do with Drupal 8's Migrate API. There's a plethora of source and processing plugins out there that can handle pretty much anything you throw at it. XML and JSON are fair game. You can also request sources using HTTP, so you can always point it at an existing systems REST API and go from there. If you can't make the Migrate API's existing workflow make the necessary changes to your data, you can expand its capabilities by writing your own process plugins. Reading the Drupal.org documentation on the Migrate API would be a good place to start. But really the best thing to do is try and get your data into Islandora! We intend to create a boilerplate branch of this repository that will allow you to clone down a migration template, ready for you to customize to fit your data. And as you assemble it into CSV format, keep in mind that if you have more than just names for things like subjects and authors, that you can always make more CSVs. Think of it like maintaining tables in an SQL database. Each CSV has unique keys, so you can lookup/join entities between CSVs using those keys. And you can still pipe-delimit the keys like we did in our example to handle multi-valued fields. In some repositories, these CSVs can be used to make bulk updates to metadata. Just make your changes to maintain the CSVs, then run the migration(s) again with the --update flag. This will not always be efficient, as you'll update every entity, even if it didn't change. But, by breaking down your CSVs per collection or object type, you could keep them small enough to use this process for a small repository. There is also a tool for migrating directly from an Islandora 7.x to Islandora 8 ( migrate_7x_claw ), using Solr, XPaths, and Fedora calls to pull files and objects directly into Islandora 8. It may be worth checking out, and/or using in conjunction with a CSV migration.","title":"CSV"},{"location":"technical-documentation/migrate-csv/#table-of-contents","text":"Summary Introduction Dependencies Overview Installation Ingesting Files Anatomy of a migration Source Process Destination The Process Section in Depth Running the File Migration Ingesting Nodes Complex Fields Running the node migration Migrating Media What have we learned Where to go from here","title":"Table of Contents"},{"location":"technical-documentation/migrate-csv/#summary","text":"This tutorial introduces you to the Drupal 8 Migrate tools available to create Islandora content. Whether you will eventually use CSVs or other sources (such as XML or directly from a 7.x Islandora) this tutorial should be useful as it covers the basics and mechanics of migration. This tutorial uses the configurations and code available in the migrate_islandora_csv module which, when enabled, will create three example migrations ready for you to use with the Migrate API. Each migration comes from one of the files in the config/install folder. We'll walk through them in detail below. The module is also uses Features which allows you to make changes to the configuration files and sync those changes into your Drupal site. A note on using Features This tutorial (and Islandora in general) makes heavy use of Features, which is an easy way to ship and install Drupal configuration. However, after enabling a Feature module, the code in that module's directory is no longer \"live\", as the configuration now resides in the Drupal database. If you change code in the YAML files, it will not take effect until you re-import the Feature. There is a walkthrough in the \"Configuration\" section of the Migrate 7.x to 8 tutorial. Sample CSV and images are also included in the module as a convenience so they are easily available on the Drupal server running the migration. (This is not the recommended method for making files available to Drupal in a real migration.) The module also contains a Migrate process plugin that transforms strings into associative arrays. This is useful for populating multiple Linked Agent fields. (See \" Typed Relation \" for more information on the Linked Agent field.) It will be available when this module is enabled, and the node migration uses it. It was written generically and will hopefully become part of Migrate Plus, but for now it is here. When you are ready to create your actual migrations, the contents of this repository can function as a template for you to create the YAML files defining your own migrations.","title":"Summary"},{"location":"technical-documentation/migrate-csv/#introduction","text":"Why CSV? CSV files (whether separated by commas, tabs, or other delimiters) are easy to understand and work with, and there's good tooling available for using them with Drupal 8's Migrate API . The Drupal contrib module migrate_source_csv provides a source plugin that reads from a CSV file, and migrate_plus provides more tools and flexibility for creating migrations, including the ability to create customized migrations using YAML and package them up as Features . In this tutorial, we'll be inspecting each migration file in detail before running it. You'll start out by migrating the images themselves first, and then you'll create various Drupal entities to describe the files from the metadata in the CSV. It's not as scary as it sounds (especially since this module contains the data we'll be using in a data directory), but you will need a few things before beginning: An instance of Islandora 8. Use Islandora 8 playbook to spin up an environment pre-loaded with all the modules you need (except this one) Some basic command line skills. You won't need to know much, but you'll have to vagrant ssh into the box, navigate into Drupal, and use git and drush , etc... If you can copy/paste into a terminal, you'll survive. A big part of this tutorial relies on the islandora_defaults and controlled_access_terms_defaults features, which define the default metadata profile for Islandora (which we'll be migrating into). You're not required to use the islandora_defaults or controlled_access_terms_defaults for your repository, but for the purposes of demonstration, it saves you a lot of user interface administrivia so you can focus just on the learning how to migrate. By the time you are done with this exercise, you'll be able to easily apply your knowledge to migrate using any custom metadata profile you can build using Drupal.","title":"Introduction"},{"location":"technical-documentation/migrate-csv/#overview","text":"The Migrate API is the main way to ingest batches of data into Drupal (and because Islandora 8 is Drupal, into Islandora). The Migrate module only provides the framework, it's up to you to create the rules that take data from a source , through a process (i.e. a mapping) to a destination . A set of these rules is called a \"migration\". It has to be set up (as a Configuration Entity, either by importing a YAML file or by installing a Feature) and then it has to be run. Once a migration has been run, it will have created (or updated) a bunch of Drupal entities of one type - whether that's taxonomy terms, nodes, files, etc. Since an Object in Islandora 8 is made up of several different Drupal entities that refer to each other, it's going to take multiple migrations to create an Islandora object, and it's important to perform these migrations in a sensible order. A basic Islandora object is at minimum: - a file, which holds the actual binary contents of an item - a node, which holds the descriptive metadata for an item and makes it discoverable - a media, which holds technical metadata and references the file and the node, linking the two together. Therefore, each row in your CSV must contain enough information to create these. Using multiple sources for object components While this tutorial uses a single CSV to describe all the parts of an islandora object, a site can use multiple sources (CSV or otherwise) to migrate the various parts. The only requirements then is to have keys in place matching the parts together. For example, a 'files.csv' can use paths that serve as file identifiers and 'metadata.csv' can use an object identifier. As long as the source for the media migration has the key values for the file and metadata migrations (the file paths and object identifiers, respectively, in this example), we can create the necessary links between the object's components. This is very useful when you need to migrate multiple media/file pairs associated with a single node, such as pre-processed derivatives that need to be migrated. Buried in your descriptive metadata are often references to other things which aren't repository items themselves, but records still need to be kept for them. Authors, publishers, universities, places, etc... can be modeled as Drupal Entities, so that they can be referenced by other Entities. So there's the potential to have a lot of different entity types described in a single row in a CSV. In this tutorial, we're working with islandora_defaults and controlled_access_terms entities, and will be migrating six entity types using the three migrations included in this module. - file - node - media - subject - person - corporate_body We can do this because subjects, persons, and corporate bodies are (in this example) represented by simple 'name' strings. We create them on the fly, as if we were adding new tags to a tag vocabulary. If we wanted to model subjects, people, or corporate bodies as entities with multiple fields (first name, last name, date, subheadings, URI, etc.) then we would need up to six migrations. Migrations follow the Extract-Transform-Load pattern . You extract the information from a source, process the data to transform it into the format you need, and load it into the destination system (i.e. Drupal). Migrations are stored in Drupal as configuration, which means they can be represented in YAML, transferred to and from different sites, and are compatible with Drupal's configuration synchronization tools. And the structure of each YAML file is arranged to follow the Extract-Transform-Load pattern. To perform the migrations, we'll be using drush . We will be able to run each of the file, node, and media migrations separately or all at once in a group. We will also learn how to roll back a migration in case it didn't go as planned. The sample migrations here will give us a chance to show off some techniques for working with multi-valued fields, entity reference fields, and complex field types like controlled_access_terms 's typed_relation field. We'll also see how the migrate framework can help de-duplicate, and at the same time, linked data-ize :tm: your data by looking up previously migrated entities. So hold on to your hats. First, let's get this module onto your Islandora instance.","title":"Overview"},{"location":"technical-documentation/migrate-csv/#installation","text":"From your islandora-playbook directory, issue the following commands to enable this module: - vagrant ssh to open a shell in your Islandora instance. - cd /var/www/html/drupal/web/modules/contrib to get to your modules directory. - git clone https://github.com/Islandora/migrate_islandora_csv to clone down the repository from GitHub. - drush en -y migrate_islandora_csv to enable the module, installing the migrations as configuration. Optionally, flush the cache ( drush cr ), so the migrations become visible in the GUI at Manage > Structure > Migrations > migrate_islandora_csv (http://localhost:8000/admin/structure/migrate/manage/migrate_islandora_csv/migrations) Now lets go migrate some files. Caution As you saw, you can git clone into the modules directory, but if you're installing a custom module that's intended to stay installed for the long term (unlike a migration feature, which you should probably uninstall and delete when you're done with it) then you may want to check with your devops folks and use Composer instead. However, using Git directly allows you to be more flexible when iterating and testing.","title":"Installation"},{"location":"technical-documentation/migrate-csv/#ingesting-files","text":"To migrate files (i.e. just the raw binaries) from a CSV, you need: - a column in the CSV containing paths to the files you wish to ingest, and - the files need to be accessible from the server that's running Drupal so that the Migrate framework can find them. This tutorial assumes you're working with the sample images provided in the module, which will be located at /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images . When you're migrating for real, the files will have to be uploaded or otherwise made accessible to the server before this point. Open up the CSV file at data/migration.csv and you'll see a file column containing paths to the sample images. You can use your favorite shell-based utility to open it at /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv , or browse to it on GitHub, or just look at it pasted below as this tutorial does not require you to edit the files. file /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Nails Nails Nails.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Free Smells.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Nothing to See Here.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Call For Champagne.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/This Must Be The Place.jpg Open up the \"files\" migration at config/install/migrate_plus.migration.file.yml . You'll see the following migration config: id: file label: Import Image Files migration_group: migrate_islandora_csv source: plugin: csv path: '/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv' delimiter: ',' # 1 means you have a header row, 0 means you don't header_row_count: 1 # Each migration needs a unique key per row in the CSV. Here we're using the file path. keys: - file # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'. constants: # Islandora uses Flysystem and stream wrappers to work with files. What we're really saying here is # to put these files in Fedora in a 'csv_migration' folder. It doesn't matter if the directory # doesn't exist yet, it will get created for you automatically. destination_dir: 'fedora://csv_migration' process: ## # The following two fields are temporary, and just used to generate a destination for the file. ## # Hack the file name out of the full path provided in the 'file' column. filename: - plugin: callback callable: pathinfo source: file - plugin: extract index: - basename # Construct the destination URI using the file name. destination: plugin: concat delimiter: / source: - constants/destination_dir - '@filename' ## # Here's where we copy the file over and set the URI of the file entity. ## uri: plugin: file_copy source: - file # The source column in the CSV - '@destination' # The destination entry from above destination: # These are Drupal 'image' entities we're making, not just plain 'file' entities. plugin: 'entity:file' type: image","title":"Ingesting Files"},{"location":"technical-documentation/migrate-csv/#anatomy-of-a-migration","text":"It seems like a lot to take in at first, but there's a pattern to Drupal migrations. They always contain core identification information and three key sections: source , process , and destination . And these sections correspond exactly to Extract, Transform, and Load.","title":"Anatomy of a Migration"},{"location":"technical-documentation/migrate-csv/#identification","text":"The first section of a migration contains metadata for Drupal about the migration itself. The id parameter is the machine name of this migration, and must not conflict with existing migrations. Note: use alphanumeric characters and underscores. Hyphens (-) will cause the migration to fail. The label is a human-readable string to identify this migration, and the migration_group is where this migration will be grouped in the GUI.","title":"Identification"},{"location":"technical-documentation/migrate-csv/#source","text":"The source section configures a Drupal source plugin that will extract the data. A source plugin provides \"rows\" of data to processing plugins so that they can be worked on. In this case, we're using the csv source plugin, which very literally uses rows, however you can have source plugins that work with other data formats like XML and JSON. Look at the config from this section. source: plugin: csv path: '/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv' delimiter: ',' header_row_count: 1 keys: - file constants: destination_dir: 'fedora://csv_migration' You can see we provide a path to its location, what delimiter to use, if it uses a header row, and which column contains a unique key for each entry. Constants can also be defined here (more on those later).","title":"Source"},{"location":"technical-documentation/migrate-csv/#process","text":"We're going to dive into the details of this step below, but in summary: the process section is where we extract the desired bits from that row, transform them as desired, and populate them into an associative array. This section is a series of named steps, that call one or more process plugins. These plugins are executed in sequence, with the results getting passed from one to the next, forming a pipeline. By the end of the step, you have transformed some element of data (perhaps through text manipulation, concatenation, etc...) into the form that Drupal is expecting. The resulting value gets associated with the name of the step. If the name of a step is the same as a field or property name on the target entity, the migrated entity will have that value for that field or property. This is how you can apply metadata from the CSV to an entity. If the step name is not the name of a field or property on the target entity, the migrate framework assumes it's a temporary value you're using as part of more complex logic. It won't wind up on the entity when the migration is done, but it will be available for you to use within other process plugins. You can always spot when a temporary value is being used by the fact that it's prefixed with an @ and surrounded by quotes. You can also pass constants into process plugins, which are prefixed with constants/ .","title":"Process"},{"location":"technical-documentation/migrate-csv/#destination","text":"The destination section contains the configuration that describes what gets loaded into Drupal. destination: plugin: 'entity:file' type: image You can create any type of content entity in Drupal. In this case, we're making file entities. Specifically, we're making images, which are a special type of file entity that's provided by core Drupal.","title":"Destination"},{"location":"technical-documentation/migrate-csv/#the-process-section-in-depth","text":"In the process section of the migration, we're copying the images over into a Drupal file system and setting the uri property on the corresponding File entity. uri: plugin: file_copy source: - file - '@destination' To do this, we're using the file_copy process plugin. But first, we have to know where a file is located and where it should be copied to. We know where the file resides, we have that in the CSV's file column. But we're going to have to do some string manipulation in order to generate the new location where we want the file copied. We're trying to convert something like /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Free Smells.jpg to fedora://csv_migration/Free Smells.jpg . The URI we're constructing is a stream wrapper of the form scheme://path/to/file . Islandora uses Flysystem , which allows for integration with many different types of filesystems, both remote and local. With Flysystem , the scheme part of the URI is the name of a filesystem. By default, Fedora is exposed using the scheme fedora:// . So by setting uri to fedora://csv_migration/Free Smells.jpg , we're saying \"put Free Smells.jpg in the csv_migration directory in Fedora.\" Now, to perform this string manipulation in PHP, we'd do something like $info = pathinfo($filepath); $filename = $info['basename']; $destination = \"fedora://csv_migration/\" . $filename; We will mimic this exactly in the process section of our migration config. Just like we declare variables and call functions with PHP code, we can make entries in the process section to store the output of Drupal process plugins. We'll build up a destination \"variable\" using a filename \"variable\" and pass it into the file_copy process plugin. To start, we'll get the filename using two process plugins, which do the same steps as the first two lines of the PHP above: filename: - plugin: callback callable: pathinfo source: file - plugin: extract index: - basename The first process plugin, callback , lets you execute any PHP function that takes a single input and returns an output. It's not as flexible as making your own custom process plugin, but it's still pretty useful in a lot of situations. Here we're using it to call pathinfo() , telling it to use the file column in the CSV as input. We pass the resulting array from pathinfo() to the extract process plugin, which pulls data out of arrays using the keys you provide it under index . Now that we have the file name, we have to prepend it with fedora://csv_migration/ to make the destination URI. In our PHP code above, we used . to concatenate the strings. In the migration framework, we use the concat process plugin. You provide it with two or more strings to concatenate, as well as a delimiter. destination: plugin: concat delimiter: / source: - constants/destination_dir - '@filename' In our PHP code, we concatenated the $filename variable with a string literal. In our process plugin, we can provide the variable, e.g. the output of the filename process step, by prefixing it with an @ . We can't, however, pass in fedora://csv_migration directly as a string. At first glance, you might think something like this would work, but it totally doesn't: # Can't do this. Won't work at all. destination: plugin: concat delimiter: / source: - 'fedora://csv_migration' - '@filename' That's because the migrate framework only interprets source values as names of columns from the CSV or names of other process steps. Even if they're wrapped in quotes. It will never try to use the string directly as a value. To circumvent this, we declare a constant in the source section of the migration config. constants: destination_dir: 'fedora://csv_migration' This constant can be referenced as constants/destination_dir and passed into the concat process plugin as a source . There are a lot more process plugins available through the (core) Migrate and Migrate Plus modules, and they are documented on Drupal.org .","title":"The Process Section in Depth"},{"location":"technical-documentation/migrate-csv/#running-the-file-migration","text":"Migrations can be executed via drush using the migrate:import command. You specify which migration to run by using the id defined in its YAML. You also need to set parameters to tell Drush who you are and what your site's URL is. Failing to do so will result in derivatives not being generated and malformed/improper RDF. So don't forget them! To run the file migration from the command line, make sure you're within /var/www/html/drupal/web (or any subdirectory) and enter drush -y --userid=1 --uri=localhost:8000 migrate:import file If you've already run the migration before, but want to re-run it for any reason, use the --update flag. drush -y --userid=1 --uri=localhost:8000 migrate:import file --update You may have noticed that migrations can be grouped, and that they define a migration_group in their configuration. You can execute an entire group of migrations using the --group flag. For example, to run the entire group defined in this module drush -y --userid=1 --uri=localhost:8000 migrate:import --group migrate_islandora_csv You can also use the migrate:rollback command to delete all migrated entities. Like migrate:import , it also respects the --group flag and --uri parameter. So to rollback everything we just did: drush -y --uri=localhost:8000 migrate:rollback --group migrate_islandora_csv If something goes bad during development, sometimes migrations can get stuck in a bad state. Use the migrate:reset command to put a migration back to Idle . For example, with the file migration, use drush -y --uri=localhost:8000 migrate:reset file Make sure you've run (and not rolled back) the file migration. It should tell you that it successfully created 5 files. You can confirm its success by visiting http://localhost:8000/admin/content/files. You should see 5 images of neon signs in the list.","title":"Running the File Migration"},{"location":"technical-documentation/migrate-csv/#ingesting-nodes","text":"Those five images are nice, but we need something to hold their descriptive metadata and show them off. We use nodes in Drupal to do this, and that means we have another migration file to work with. Nestled in with our nodes' descriptive metadata, though, are more Drupal entities, and we're going to generate them on the fly while we're making nodes. While we're doing it, we'll see how to use pipe delimited strings for multiple values as well as how to handle typed_relation fields that are provided by controlled_access_terms . Open up /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/config/install/migrate_plus.migration.node.yml and check it out. # Uninstall this config when the feature is uninstalled dependencies: enforced: module: - migrate_islandora_csv id: node label: Import Nodes from CSV migration_group: migrate_islandora_csv source: plugin: csv path: modules/contrib/migrate_islandora_csv/data/migration.csv # 1 means you have a header row, 0 means you don't header_row_count: 1 # Each migration needs a unique key per row in the csv. Here we're using the file path. keys: - file # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'. constants: # We're tagging our nodes as Images model: Image # Everything gets created as admin uid: 1 # Set fields using values from the CSV process: title: title uid: constants/uid # We use the skip_on_empty plugin because # not every row in the CSV has subtitle filled # in. field_alternative_title: plugin: skip_on_empty source: subtitle method: process field_description: description # Dates are EDTF strings field_edtf_date: issued # Make the object an 'Image' field_model: plugin: entity_lookup source: constants/model entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_models # Split up our pipe-delimited string of # subjects, and generate terms for each. field_subject: - plugin: skip_on_empty source: subject method: process - plugin: explode delimiter: '|' - plugin: entity_generate entity_type: taxonomy_term value_key: name bundle_key: vid bundle: subject # If you have multiple values of a complex # field, iterate over them using sub_process. # But sub_process requires structured data # i.e. an associative array, not a string # or list of strings. To turn strings into # associative arrays, use the custom # process plugin str_to_assoc. # Extract a list of names from the column # called photographer, and transform it into # an array of associative arrays. photographers: - source: photographer plugin: skip_on_empty method: process - plugin: explode delimiter: '|' - plugin: str_to_assoc key: 'name' # Iterate over the array of associative arrays. # We create the taxonomy terms here so that we # can specify the bundle - other columns which # might feed into Linked Agent may contain # corporate bodies or families. The resulting # array contains the resulting term id (tid) # under the key 'target_id'. # We also add a key-value pair # 'rel_type' => 'relators:pht'. Other columns # might use different relators. linked_agent_pht: plugin: sub_process source: '@photographers' process: target_id: plugin: entity_generate source: name entity_type: taxonomy_term value_key: name bundle_key: vid bundle: person rel_type: plugin: default_value default_value: 'relators:pht' # Extract an array of names from the column # called provider providers: - source: provider plugin: skip_on_empty method: process - plugin: explode delimiter: '|' - plugin: str_to_assoc key: 'name' # Generate/lookup taxonomy terms in the # corporate body vocab, and add the relator. linked_agent_prv: plugin: sub_process source: '@providers' process: target_id: plugin: entity_generate source: name entity_type: taxonomy_term value_key: name bundle_key: vid bundle: 'corporate_body' rel_type: plugin: default_value default_value: 'relators:prv' # Write to the linked agent field. In this case # we first want to merge the info from the # photographer and provider columns. Since we # already prepared our structured array using # the components of the typed_relation field as # keys ('target_id' and 'rel_type'), we can just # pass this array into field_linked_agent. field_linked_agent: plugin: merge source: - '@linked_agent_pht' - '@linked_agent_prv' # We're making nodes destination: plugin: 'entity:node' default_bundle: islandora_object The Breakdown The source section looks mostly the same other than some different constants we're defining - the string \"Image\" (no quotes needed) and the drupal ID of the user who will be assigned as the author. If values contained special characters such as colons, quotes would be needed. If you look at the process section, you can see we're taking the title , description , and issued columns from the CSV and applying them directly to the migrated nodes without any manipulation. title: title field_description: description field_edtf_date: issued For subtitle , we're passing it through the skip_on_empty process plugin because not every row in our CSV has a subtitle entry. It's very useful when you have spotty data, and you'll end up using it a lot. The method: process bit tells the migrate framework only skip that particular field if the value is empty, and not to skip the whole row. It's important, so don't forget it. The full YAML for setting field_alternative_title from subtitle looks like this: field_alternative_title: plugin: skip_on_empty source: subtitle method: process Now here's where things get interesting. We can look up other entities to populate entity reference fields. For example, all Repository Items have an entity reference field that holds a taxonomy term from the islandora_models vocabulary. All of our examples are images, so we'll look up the Image model in the vocabulary since it already exists (it gets made for you when you use islandora-playbook). We use the entity_lookup process plugin to do this. field_model: plugin: entity_lookup source: constants/model entity_type: taxonomy_term # 'name' is the string value of the term, e.g. 'Original file', 'Thumbnail'. value_key: name bundle_key: vid bundle: islandora_models The entity_lookup process plugin looks up an entity based on the configuration you give it. You use the entity_type , bundle_key , and bundle configurations to limit which entities you search through. entity_type is, as you'd suspect, the type of entity: node, media, file, taxonomy_term, etc... bundle_key tells the migrate framework which property holds the bundle of the entity, and bundle is the actual bundle id you want to restrict by. In this case we specify the vid (vocabulary id) has to be islandora_models - which is the machine name of the vocabulary we're interested in. In this plugin, source is the value to search for - in this case we're looking for the string \"Image\", which we've defined as a constant. And we're comparing it to the name field on each term by setting the value_key config. This approach applies the same taxonomy term to all objects. If you want to assign a taxonomy term at the node level (that is, potentially a different term for each node) rather than to all the nodes being imported, you can use a configuration as illustrated next. In this example, we have a column in our CSV input file with the header 'model', which we define as the source of the field_model values: field_model: plugin: entity_lookup # 'model' is the header of a field in our input CSV that contains the string value of the taxonomy term. source: model entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_models If you're not sure that the entities you're looking up already exist, you can use the entity_generate plugin, which takes the same config, but will create a new entity if the lookup fails. We use this plugin to create subject taxonomy terms that we tag our nodes with. A node can have multiple subjects, so we've encoded them in the CSV as pipe delimited strings. subject Neon signs|Night Neon signs|Night|Funny Neon signs|Night Drinking|Neon signs Neon signs We can hack those apart easily enough. In PHP we'd do something like $subjects = explode($string, '|'); $terms = []; foreach ($subjects as $name) { $terms[] = \\Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->create([ ... 'vid' => 'subject', 'name' => $name, ... ]); } $node->set('field_subject', $terms); With process plugins, that logic looks like field_subject: - plugin: skip_on_empty source: subject method: process - plugin: explode delimiter: '|' - plugin: entity_generate entity_type: taxonomy_term value_key: name bundle_key: vid bundle: subject Here we've got a small pipeline that uses the skip_on_empty process plugin, which we've already seen, followed by explode . The explode process plugin operates exactly like its PHP counterpart, taking an array and a delimiter as input. The combination of skip_on_empty and explode behave like a foreach loop on the explode results. If we have an empty string, nothing happens. If there's one or more pipe delimited subject names in the string, then entity_generate gets called for each name that's found. The entity_generate process plugin will try to look up a subject by name, and if that fails, it creates one using the name and saves a reference to it in the node. So entity_generate is actually smarter than our pseudo-code above, because it can be run over and over again and it won't duplicate entities. :champagne:","title":"Ingesting Nodes"},{"location":"technical-documentation/migrate-csv/#complex-fields","text":"Some fields don't hold just a single type of value. In other words, not everything is just text, numbers, or references. Using Drupal 8's Typed Data API , fields can hold groups of named values with different types. Consider a field that holds an RGB color. You could set it with PHP like so: $node->set('field_color', ['R' => 255, 'G' => 255, 'B' => 255]); You could even have a multi-valued color field, and do something like this $node->set('field_color', [ ['R' => 0, 'G' => 0, 'B' => 0], ['R' => 255, 'G' => 255, 'B' => 255], ]); In the migrate framework, you have two options for handling these types of fields. You can build up the full array they're expecting, which is difficult and requires a custom process plugin. Or, if you only have one value going into a complex field, you can set each named component in the field with separate process pipelines. In controlled_access_terms , we define a new field type of typed_relation , which is an entity reference coupled with a MARC relator. It expects an associative array that looks like this: [ 'target_id' => 1, 'rel_type' => 'relators:ctb'] The target_id portion takes an entity id, and rel_type takes the predicate for the MARC relator we want to use to describe the relationship the entity has with the repository item. This example would reference taxonomy_term 1 and give it the relator for \"Contributor\". If we have a single name to deal with, we can set those values in YAML, accessing field_linked_agent/target_id and field_linked_agent/rel_type independently. field_linked_agent/target_id: plugin: entity_generate source: photographer entity_type: taxonomy_term value_key: name bundle_key: vid bundle: person field_linked_agent/rel_type: constants/relator Here we're looking at the photographer column in the CSV, which contains the names of the photographers that captured these images. Since we know these are photographers, and not publishers or editors, we can bake in the relator constant we set to relators:pht in the source section of the migration. So all that's left to do is to set the taxonomy term's id via entity_generate . If the lookup succeeds, the id is returned. If it fails, a term is created and its id is returned. In the end, by using the / syntax to set properties on complex fields, everything gets wrapped up into that nice associative array structure for you automatically. However, if you have multiple names, and/or multiple columns that contain values that will go into the same typed_relation field, you do need to build up a full array of structured data. We start by extracting the values in the photographer column, and busting them into a list. (In this case, given the sample data, the lists will all have length 1). Then, we use a custom process plugin to make each value the value in an associative array (see example data below). photographers: - source: photographer plugin: skip_on_empty method: process - plugin: explode delimiter: '|' - plugin: str_to_assoc key: 'name' So, if we started with a column containing 'Alice|Bob|Charlie' at the end of this pipeline, the photographers temporary variable would contain [ ['name' => 'Alice'], ['name' => 'Bob'], ['name' => 'Charlie] ] Next, we use the sub_process plugin. It takes an array of associative arrays (as seen above) and iterates over them. From within subprocess' process parameter, you can access only what's defined in that associative array. Here, when we do our entity_generate lookup, our source is name , the (only) key in that array. linked_agent_pht: plugin: sub_process source: '@photographers' process: target_id: plugin: entity_generate source: name entity_type: taxonomy_term value_key: name bundle_key: vid bundle: person rel_type: plugin: default_value default_value: 'relators:pht' Within sub_process , we cannot access the temporary variables or constants that we've created in the outer migration. This is why we use the default_value plugin when for the rel_type . It would have been simpler to define a constant as we did with 'Image', but we wouldn't be able to access it. The output of this pipeline is now formatted as the structured data expected by a typed_relation field: [ ['target_id' => 42, 'rel_type' => 'relators:pht' ], ['target_id' => 43, 'rel_type' => 'relators:pht' ], ['target_id' => 44, 'rel_type' => 'relators:pht' ], ] The final step will be to assign this array to the Linked Agent field. But first, we repeat the process for another column, which contains names that have a different relator, and a different bundle. Finally, we merge the two temporary variables and pass the result to field_linked_agent . We don't have to assign the sub-components of field_linked_agent here, because this is already the structured data it is looking for. field_linked_agent: plugin: merge source: - '@linked_agent_pht' - '@linked_agent_prv' Clear as mud? Great. Now let's run that migration.","title":"Complex Fields"},{"location":"technical-documentation/migrate-csv/#running-the-node-migration","text":"Like with the file migration, run drush -y --userid=1 --uri=http://localhost:8000 migrate:import node from anywhere within the Drupal installation directory will fire off the migration. Go to http://localhost:8000/admin/content and you should see five new nodes. Click on one, though, and you'll see it's just a stub with metadata. The CSV metadata is there, links to other entities like subjects and photographers are there, but there's no trace of the corresponding files. Here's where media entities come into play.","title":"Running the node migration"},{"location":"technical-documentation/migrate-csv/#migrating-media","text":"Media entities are Drupal's solution for fieldable files. Since you can't put fields on a file, what you can do is wrap the file with a Media entity. In addition to a reference to the file (binary), technical metadata and structural metadata for the file go on the Media entity (e.g. MIME type, file size, resolution). Media also have a few special fields that are required for Islandora, field_media_of and field_use , which denote what node owns the media and what role the media serves, respectively. Since the Media entity references both the file it wraps and the node that owns it, Media entities act as a bridge between files and nodes, tying them together. And to do this, we make use of one last process plugin, migration_lookup . Open up /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/config/install/migrate_plus.migration.media.yml and give it a look. # Uninstall this config when the feature is uninstalled dependencies: enforced: module: - migrate_islandora_csv id: media label: Import Media from CSV migration_group: migrate_islandora_csv source: plugin: csv path: modules/contrib/migrate_islandora_csv/data/migration.csv # 1 means you have a header row, 0 means you don't header_row_count: 1 # Each migration needs a unique key per row in the csv. Here we're using the file path. keys: - file # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'. constants: # We're tagging our media as Original Files use: Original File # Everything gets created as admin uid: 1 process: name: title uid: constants/uid # Make the media an 'Original File' field_media_use: plugin: entity_lookup source: constants/use entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_media_use # Lookup the migrated file in the file migration. field_media_image: plugin: migration_lookup source: file migration: file no_stub: true # Lookup the migrated node in the node migration field_media_of: plugin: migration_lookup source: file migration: node no_stub: true destination: # These are 'image' media we're making. plugin: 'entity:media' default_bundle: image migration_dependencies: required: - migrate_plus.migration.file - migrate_plus.migration.node optional: { } The Breakdown Compared to the other migrations, this one is very straightforward. There's no string or array manipulation in YAML, and at most there's only one process plugin per field. Title and user are set directly, with no processing required name: title uid: constants/uid The field_media_use field is a tag that's used to denote the purpose of a file with regard to the node it belongs to. E.g. is this the original file? a lower quality derivative? thumbnail? etc... In many ways it bears a resemblance to DSID in Islandora 7.x. Like field_model with nodes, the vocabulary already exists in your Islandora install, so all you have to do is look it up with the entity_lookup plugin. # Make the media an 'Original File' field_media_use: plugin: entity_lookup source: constants/use entity_type: taxonomy_term value_key: name bundle_key: vid bundle: islandora_media_use The field_media_image and field_media_of fields are how the media binds a file to a node. You could use entity_lookup or entity_generate , but we've already migrated them and can very easily look them up by the id assigned to them during migration. But what's the benefit of doing so? The entity_lookup and entity_generate process plugins do the job fine, right? The main advantage of using migration_lookup and defining migrations whenever possible, is that migrated entities can be rolled back. If you were to hop into your console and execute drush -y --uri=http://localhost:8000 migrate:rollback --group migrate_islandora_csv Your nodes, media, and files would all be gone. But your subjects and photographers would remain. If you want to truly and cleanly roll back every entity in a migration, you need to define those migrations and use migration_lookup to set entity reference fields.","title":"Migrating Media"},{"location":"technical-documentation/migrate-csv/#running-the-media-migration","text":"Run drush -y --uri=http://localhost:8000 migrate:import media from anywhere within the Drupal installation directory. You should now be able to see the media files attached to the nodes you created earlier. At this point, you might want to create derivatives, such as thumbnails, using the appropriate Drupal actions on the main content admin window.","title":"Running the media migration"},{"location":"technical-documentation/migrate-csv/#what-have-we-learned","text":"If you've made it all the way to the end here, then you've learned that you can migrate files and CSV metadata into Islandora using only YAML files. You've seen how to transform data with pipelines of processing plugins and can handle numeric, text, and entity reference fields. You can handle multiple values for fields, and even more complicated things like typed_relation fields. And as big as this walkthrough was, we're only scratching the surface of what can be done with the Migrate API.","title":"What have we learned?"},{"location":"technical-documentation/migrate-csv/#where-to-go-from-here","text":"There's certainly more you can do with Drupal 8's Migrate API. There's a plethora of source and processing plugins out there that can handle pretty much anything you throw at it. XML and JSON are fair game. You can also request sources using HTTP, so you can always point it at an existing systems REST API and go from there. If you can't make the Migrate API's existing workflow make the necessary changes to your data, you can expand its capabilities by writing your own process plugins. Reading the Drupal.org documentation on the Migrate API would be a good place to start. But really the best thing to do is try and get your data into Islandora! We intend to create a boilerplate branch of this repository that will allow you to clone down a migration template, ready for you to customize to fit your data. And as you assemble it into CSV format, keep in mind that if you have more than just names for things like subjects and authors, that you can always make more CSVs. Think of it like maintaining tables in an SQL database. Each CSV has unique keys, so you can lookup/join entities between CSVs using those keys. And you can still pipe-delimit the keys like we did in our example to handle multi-valued fields. In some repositories, these CSVs can be used to make bulk updates to metadata. Just make your changes to maintain the CSVs, then run the migration(s) again with the --update flag. This will not always be efficient, as you'll update every entity, even if it didn't change. But, by breaking down your CSVs per collection or object type, you could keep them small enough to use this process for a small repository. There is also a tool for migrating directly from an Islandora 7.x to Islandora 8 ( migrate_7x_claw ), using Solr, XPaths, and Fedora calls to pull files and objects directly into Islandora 8. It may be worth checking out, and/or using in conjunction with a CSV migration.","title":"Where to go from here?"},{"location":"technical-documentation/migration-overview/","text":"Islandora 8 Migration Overview This video provides an overview of the various options available to migrate data into an Islandora 8 installation. The three options are: - REST API - Migrate API - Islandora Workbench REST API Why use the rest API? Works anywhere : You don\u2019t have to work on the Drupal server. Migrate from your laptop! No PHP required : Use any language that can make an http request. Even cURL will do just fine. JSON : Why use XML if you don\u2019t have to? BONUS: It\u2019s just Drupal\u2019s REST API Islandora only provides two additional API endpoints /media/{mid}/source PUT a file to this endpoint to create/update a Media\u2019s file /node/{nid}/media/{media_type}/{taxonomy_term} PUT a file to this endpoint to create/update a Media for a Node Just be aware, you are writing everything yourself! (In other words you are making all of the migration decisions yourself.) Migrate API Uses the Drupal 8 Migrate API , which \"provides services for migrating data from a source system to Drupal 8. The \"source system\" can be almost anything: an Islandora 7 system a group of scanned images and their metadata inside a CSV file a web API Why use the Migrate API? You can (potentially) do everything with configs! Leverage contrib module plugins. Making plugins for more complex sources and processes is (relatively) simple. Updating metadata is as simple as: drush mim node --update A Migration Configuration defines an Extract, Transform, Load (ETL) process Source plugins extract data from a source Process plugins transform the data Destination plugins load the data (create new entities) We\u2019ve built two tools for you using the Migrate API migrate_islandora_csv Tutorial with a sample migration using some files and a CSV migrate_7x_claw A tool to get all your Islandora 7 content migrated over Recap of migrate_islandora_csv CSVs Everyone understands and knows how to work with CSVs Documented It\u2019s a step-by-step walkthrough Process Metadata Clean up / transform the metadata using processors Build Relationships Migrations can reference other migrated content or generate new content on the fly Recap of migrate_7x_claw Designed to migrate Islandora 7 data to Islandora 8. DATASTREAMS All of your datasteams, including the audit trail, are migrated METADATA Migrate metadata from Solr or any XML datastream CUSTOMIZABLE Migrate_7x_claw is a starting point, meant to be tailored to your metadata To make migrate_7x_claw work you need Access You need credentials to both your Islandora 7 and 8 installs. Migrate API Knowledge The tutorial for migrate_islandora_csv Is still relevant Config Sync You need to understand Drupal config synchronization. Features knowledge helps too. Command Line Skills This is best done with shell access and drush Migrate API demo video Check out this video that demonstrates the Drupal Migrate API migration process: Islandora Webinar: Migrating from Islandora 7 to Islandora 8 Islandora Workbench https://github.com/mjordan/islandora_workbench More tailored for end users with less technical knowledge or limited server access. Uses Islandora\u2019s REST API Runs on your computer \u201cCSVs and a pile of scans\u201d Cross Platform - Python Islandora Workbench highlights Opinionated MUCH less configuration. Decisions made for you. No Processing CSV has to be in the right format Write Operations Create, Update, and Delete content Bumpers On Configuration and CSV are validated Islandora Workbench basics Column names are field names If your value contains a comma, wrap it in double quotes Multiple values are pipe delimited Entity references are done via numeric id (nid, mid, tid) Islandora Workbench - Taxonomy Terms: Can use term id, term name, or both 26 Cats 26|Cats If using multiple vocabularies, prefix with vocabulary id: cats:Calico|dogs:Dachshund Terms that don\u2019t exist can be created Islandora Workbench - More Field Types: Typed Relations - Prefix term ids with namespace:rel: relators:pht:30 Relators:pht:30|relators:pub:45 Geolocation fields - \u201cLat,Long\u201d \"49.16667,-123.93333\" Paged Content - Two Ways: Metadata on Parent Simple directory structure and filename convention Page Level Metadata Parent and page metadata in same CSV","title":"Migration Overview"},{"location":"technical-documentation/migration-overview/#islandora-8-migration-overview","text":"This video provides an overview of the various options available to migrate data into an Islandora 8 installation. The three options are: - REST API - Migrate API - Islandora Workbench","title":"Islandora 8 Migration Overview"},{"location":"technical-documentation/migration-overview/#rest-api","text":"Why use the rest API? Works anywhere : You don\u2019t have to work on the Drupal server. Migrate from your laptop! No PHP required : Use any language that can make an http request. Even cURL will do just fine. JSON : Why use XML if you don\u2019t have to? BONUS: It\u2019s just Drupal\u2019s REST API","title":"REST API"},{"location":"technical-documentation/migration-overview/#islandora-only-provides-two-additional-api-endpoints","text":"/media/{mid}/source PUT a file to this endpoint to create/update a Media\u2019s file /node/{nid}/media/{media_type}/{taxonomy_term} PUT a file to this endpoint to create/update a Media for a Node Just be aware, you are writing everything yourself! (In other words you are making all of the migration decisions yourself.)","title":"Islandora only provides two additional API endpoints"},{"location":"technical-documentation/migration-overview/#migrate-api","text":"Uses the Drupal 8 Migrate API , which \"provides services for migrating data from a source system to Drupal 8. The \"source system\" can be almost anything: an Islandora 7 system a group of scanned images and their metadata inside a CSV file a web API Why use the Migrate API? You can (potentially) do everything with configs! Leverage contrib module plugins. Making plugins for more complex sources and processes is (relatively) simple. Updating metadata is as simple as: drush mim node --update","title":"Migrate API"},{"location":"technical-documentation/migration-overview/#a-migration-configuration-defines-an-extract-transform-load-etl-process","text":"Source plugins extract data from a source Process plugins transform the data Destination plugins load the data (create new entities)","title":"A Migration Configuration defines an Extract, Transform, Load (ETL) process"},{"location":"technical-documentation/migration-overview/#weve-built-two-tools-for-you-using-the-migrate-api","text":"migrate_islandora_csv Tutorial with a sample migration using some files and a CSV migrate_7x_claw A tool to get all your Islandora 7 content migrated over","title":"We\u2019ve built two tools for you using the Migrate API"},{"location":"technical-documentation/migration-overview/#recap-of-migrate_islandora_csv","text":"CSVs Everyone understands and knows how to work with CSVs Documented It\u2019s a step-by-step walkthrough Process Metadata Clean up / transform the metadata using processors Build Relationships Migrations can reference other migrated content or generate new content on the fly","title":"Recap of migrate_islandora_csv"},{"location":"technical-documentation/migration-overview/#recap-of-migrate_7x_claw","text":"Designed to migrate Islandora 7 data to Islandora 8. DATASTREAMS All of your datasteams, including the audit trail, are migrated METADATA Migrate metadata from Solr or any XML datastream CUSTOMIZABLE Migrate_7x_claw is a starting point, meant to be tailored to your metadata","title":"Recap of migrate_7x_claw"},{"location":"technical-documentation/migration-overview/#to-make-migrate_7x_claw-work-you-need","text":"Access You need credentials to both your Islandora 7 and 8 installs. Migrate API Knowledge The tutorial for migrate_islandora_csv Is still relevant Config Sync You need to understand Drupal config synchronization. Features knowledge helps too. Command Line Skills This is best done with shell access and drush","title":"To make migrate_7x_claw work you need"},{"location":"technical-documentation/migration-overview/#migrate-api-demo-video","text":"Check out this video that demonstrates the Drupal Migrate API migration process: Islandora Webinar: Migrating from Islandora 7 to Islandora 8","title":"Migrate API demo video"},{"location":"technical-documentation/migration-overview/#islandora-workbench","text":"https://github.com/mjordan/islandora_workbench More tailored for end users with less technical knowledge or limited server access. Uses Islandora\u2019s REST API Runs on your computer \u201cCSVs and a pile of scans\u201d Cross Platform - Python","title":"Islandora Workbench"},{"location":"technical-documentation/migration-overview/#islandora-workbench-highlights","text":"Opinionated MUCH less configuration. Decisions made for you. No Processing CSV has to be in the right format Write Operations Create, Update, and Delete content Bumpers On Configuration and CSV are validated","title":"Islandora Workbench highlights"},{"location":"technical-documentation/migration-overview/#islandora-workbench-basics","text":"Column names are field names If your value contains a comma, wrap it in double quotes Multiple values are pipe delimited Entity references are done via numeric id (nid, mid, tid) Islandora Workbench - Taxonomy Terms: Can use term id, term name, or both 26 Cats 26|Cats If using multiple vocabularies, prefix with vocabulary id: cats:Calico|dogs:Dachshund Terms that don\u2019t exist can be created Islandora Workbench - More Field Types: Typed Relations - Prefix term ids with namespace:rel: relators:pht:30 Relators:pht:30|relators:pub:45 Geolocation fields - \u201cLat,Long\u201d \"49.16667,-123.93333\" Paged Content - Two Ways: Metadata on Parent Simple directory structure and filename convention Page Level Metadata Parent and page metadata in same CSV","title":"Islandora Workbench basics"},{"location":"technical-documentation/ppa-documentation/","text":"Updating a deb and adding it to LYRASIS PPA Background Ubuntu removed JPEG2000 support from ImageMagick since Vivid Vervet's 8:6.8.9.9-5 version. The PPA that we have created adds JPEG2000 support back into ImageMagick for Ubuntu 16.04 and 18.04. More information on why JPEG2000 support was removed can be found here , and more information on openjpeg in Ubuntu can be found here . Prerequisites Review the Ubuntu Packaging Guide . Key items needed are in the Getting Set Up section : Basic packaging software: sudo apt install gnupg pbuilder ubuntu-dev-tools apt-file Make sure you have your GPG, if you do not, follow the instructions in the guide. Setup pbuilder : pbuilder-dist bionic create Configure your shell with some exports for debuild : export DEBFULLNAME=\"Bob Dobbs\" export DEBEMAIL=\"subgenius@example.com\" Contact Jonathan Green to get setup on the LYRASIS PPA team . Patching source imagemagick is used an example. If you need to only change or patch the actual source code, then you will need to use quilt . More information on using quilt can be found in the Patches to Packages section . If you are only change dependencies, or information in the debian directory of a package, quilt is not required, and if used will cause build failures . Create a directory to work in: mkdir imagemagick-bionic-jp2 cd imagemagick-bionic-jp2 Pull down the source: pull-lp-source imagemagick bionic cd imagemagick-6.9.7.4+dfsg Edit files as needed Document the fix: dch ( Make sure to change UNRELEASED to the Ubuntu release name. For example: bionic ) Build the package: debuild -S Example Patch Index: imagemagick-6.9.7.4+dfsg/debian/control =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control +++ imagemagick-6.9.7.4+dfsg/debian/control @@ -26,8 +26,7 @@ Build-Depends: debhelper (>= 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw @@ -273,8 +272,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16-3 (= ${binary:Version}), libmagickcore-6.q16-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, @@ -483,8 +481,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16hdri-3 (= ${binary:Version}), libmagickcore-6.q16hdri-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/noquantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in @@ -26,8 +26,7 @@ Build-Depends: debhelper (>= 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw Index: imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/quantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in @@ -78,8 +78,7 @@ Depends: libmagickcore-${IMVERSION}-head libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION} (= ${binary:Version}), libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION}-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/rules =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/rules +++ imagemagick-6.9.7.4+dfsg/debian/rules @@ -98,7 +98,7 @@ STATIC_CONFIGURE_OPTIONS := \\ --with-gs-font-dir=/usr/share/fonts/type1/gsfonts \\ --with-magick-plus-plus \\ --with-djvu \\ - --with-openjp2 \\ + --with-openjp2 \\ --with-wmf \\ --without-gvc \\ --enable-shared \\ Uploading to LYRASIS PPA Once the package is built successfully, you'll upload the changes file to Launchpad. For example: dput ppa:lyrasis/imagemagick-jp2 imagemagick_6.9.7.4+dfsg-16ubuntu6.8_source.changes After the package is successfully uploaded to the PPA, you'll receive an email from Launchpad. Something like this: Accepted: OK: imagemagick_6.9.7.4+dfsg.orig.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.debian.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.dsc -> Component: main Section: graphics imagemagick (8:6.9.7.4+dfsg-16ubuntu6.8) bionic; urgency=medium * Add jp2 support. And you will see it in the interface for the Lyrasis PPA:","title":"Updating a `deb` and adding it to Lyrasis PPA"},{"location":"technical-documentation/ppa-documentation/#updating-a-deb-and-adding-it-to-lyrasis-ppa","text":"","title":"Updating a deb and adding it to LYRASIS PPA"},{"location":"technical-documentation/ppa-documentation/#background","text":"Ubuntu removed JPEG2000 support from ImageMagick since Vivid Vervet's 8:6.8.9.9-5 version. The PPA that we have created adds JPEG2000 support back into ImageMagick for Ubuntu 16.04 and 18.04. More information on why JPEG2000 support was removed can be found here , and more information on openjpeg in Ubuntu can be found here .","title":"Background"},{"location":"technical-documentation/ppa-documentation/#prerequisites","text":"Review the Ubuntu Packaging Guide . Key items needed are in the Getting Set Up section : Basic packaging software: sudo apt install gnupg pbuilder ubuntu-dev-tools apt-file Make sure you have your GPG, if you do not, follow the instructions in the guide. Setup pbuilder : pbuilder-dist bionic create Configure your shell with some exports for debuild : export DEBFULLNAME=\"Bob Dobbs\" export DEBEMAIL=\"subgenius@example.com\" Contact Jonathan Green to get setup on the LYRASIS PPA team .","title":"Prerequisites"},{"location":"technical-documentation/ppa-documentation/#patching-source","text":"imagemagick is used an example. If you need to only change or patch the actual source code, then you will need to use quilt . More information on using quilt can be found in the Patches to Packages section . If you are only change dependencies, or information in the debian directory of a package, quilt is not required, and if used will cause build failures . Create a directory to work in: mkdir imagemagick-bionic-jp2 cd imagemagick-bionic-jp2 Pull down the source: pull-lp-source imagemagick bionic cd imagemagick-6.9.7.4+dfsg Edit files as needed Document the fix: dch ( Make sure to change UNRELEASED to the Ubuntu release name. For example: bionic ) Build the package: debuild -S","title":"Patching source"},{"location":"technical-documentation/ppa-documentation/#example-patch","text":"Index: imagemagick-6.9.7.4+dfsg/debian/control =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control +++ imagemagick-6.9.7.4+dfsg/debian/control @@ -26,8 +26,7 @@ Build-Depends: debhelper (>= 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw @@ -273,8 +272,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16-3 (= ${binary:Version}), libmagickcore-6.q16-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, @@ -483,8 +481,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16hdri-3 (= ${binary:Version}), libmagickcore-6.q16hdri-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/noquantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in @@ -26,8 +26,7 @@ Build-Depends: debhelper (>= 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw Index: imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/quantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in @@ -78,8 +78,7 @@ Depends: libmagickcore-${IMVERSION}-head libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION} (= ${binary:Version}), libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION}-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/rules =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/rules +++ imagemagick-6.9.7.4+dfsg/debian/rules @@ -98,7 +98,7 @@ STATIC_CONFIGURE_OPTIONS := \\ --with-gs-font-dir=/usr/share/fonts/type1/gsfonts \\ --with-magick-plus-plus \\ --with-djvu \\ - --with-openjp2 \\ + --with-openjp2 \\ --with-wmf \\ --without-gvc \\ --enable-shared \\","title":"Example Patch"},{"location":"technical-documentation/ppa-documentation/#uploading-to-lyrasis-ppa","text":"Once the package is built successfully, you'll upload the changes file to Launchpad. For example: dput ppa:lyrasis/imagemagick-jp2 imagemagick_6.9.7.4+dfsg-16ubuntu6.8_source.changes After the package is successfully uploaded to the PPA, you'll receive an email from Launchpad. Something like this: Accepted: OK: imagemagick_6.9.7.4+dfsg.orig.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.debian.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.dsc -> Component: main Section: graphics imagemagick (8:6.9.7.4+dfsg-16ubuntu6.8) bionic; urgency=medium * Add jp2 support. And you will see it in the interface for the Lyrasis PPA:","title":"Uploading to LYRASIS PPA"},{"location":"technical-documentation/resizing_vm/","text":"Resize vagrant machine To expand virtual machine's harddrive for testing of larger files. Once the VM has started, you'll need to halt the VM, download and run the script, tell it what size (in MB) and then start the VM. The last step vagrant ssh --command \"sudo resize2fs /dev/sda1\" is a check. It should return there was nothing to do. If you already provisioned you VM you can skip the 2 steps with provisioning in them. # Skip this if you VM is already provisioned. $ vagrant up --no-provision <-- Exclude if already running and provisioned. $ vagrant halt # Download and run. This will default to the correct name (just press enter) then give the size. # Example: `350000` is equal to 350GB $ wget https://gist.githubusercontent.com/DonRichards/6dc6c81ae9fc22cba8d7a57b90ab1509/raw/45017e07a3b93657f8822dfbbe4fc690169cdabc/expand_disk.py $ chmod +x expand_disk.py $ python expand_disk.py $ vagrant up --no-provision # This step isn't needed but acts as a check to verify it worked. $ vagrant ssh --command \"sudo resize2fs /dev/sda1\" # Skip this if you VM is already provisioned. $ vagrant provision <-- Exclude if already provisioned. Troubleshooting expand_disk.py You may need to remove the \"resized\" version. Assuming your VM location is ~/VirtualBox\\ VMs $ rm -rf ~/VirtualBox\\ VMs/Islandora\\ CLAW\\ Ansible_resized","title":"Resizing a VM"},{"location":"technical-documentation/resizing_vm/#resize-vagrant-machine","text":"To expand virtual machine's harddrive for testing of larger files. Once the VM has started, you'll need to halt the VM, download and run the script, tell it what size (in MB) and then start the VM. The last step vagrant ssh --command \"sudo resize2fs /dev/sda1\" is a check. It should return there was nothing to do. If you already provisioned you VM you can skip the 2 steps with provisioning in them. # Skip this if you VM is already provisioned. $ vagrant up --no-provision <-- Exclude if already running and provisioned. $ vagrant halt # Download and run. This will default to the correct name (just press enter) then give the size. # Example: `350000` is equal to 350GB $ wget https://gist.githubusercontent.com/DonRichards/6dc6c81ae9fc22cba8d7a57b90ab1509/raw/45017e07a3b93657f8822dfbbe4fc690169cdabc/expand_disk.py $ chmod +x expand_disk.py $ python expand_disk.py $ vagrant up --no-provision # This step isn't needed but acts as a check to verify it worked. $ vagrant ssh --command \"sudo resize2fs /dev/sda1\" # Skip this if you VM is already provisioned. $ vagrant provision <-- Exclude if already provisioned.","title":"Resize vagrant machine"},{"location":"technical-documentation/resizing_vm/#troubleshooting-expand_diskpy","text":"You may need to remove the \"resized\" version. Assuming your VM location is ~/VirtualBox\\ VMs $ rm -rf ~/VirtualBox\\ VMs/Islandora\\ CLAW\\ Ansible_resized","title":"Troubleshooting expand_disk.py"},{"location":"technical-documentation/rest-create/","text":"Creating resources, media and files - POST/PUT Requests Authorization Content Files and Media Authorization You will need to use one of the configured authorization methods to create content, media and/or files. These are defined under Authorization on the overview. Content (Nodes) The above setup shows that you can perform a POST request against a node at the /node endpoint with a body in the JSON format. To create a node you need to provide two elements in your message body. The node type and any required field values. For the islandora_defaults included Repository Item these are: A type - this tells Drupal what content type we are creating A title - this is a required field of all nodes. A model - this is a required by Islandora to tell the type of object (i.e. Image, Audio, Collection) A good way to make your first POST request is to perform a GET request against an existing node and erase all the extra content. You can find more information about GET requests here Again we are using the json format. \ud83c\udf4e For example curl -X GET 'http://localhost:8000/node/3?_format=json Look for the type element \"type\" : [ { \"target_id\" : \"islandora_object\", \"target_type\" : \"node_type\", \"target_uuid\" : \"62189bec-3ef3-4196-b847-b17e5ce61fd5\" } ] In our example \"islandora_object\" is the type of the default \"Repository Item\", if you have created a new type you will have a different target_id. You will not need the target_uuid . Next look for the title element \"title\" : [ { \"value\" : \"An example Islandora object\" } ] Lastly look for the field_model element \"field_model\": [ { \"target_id\": 24, \"target_type\": \"taxonomy_term\", \"target_uuid\": \"e7560b68-e95a-4e76-9671-2a3041cd9800\", \"url\": \"\\\\/taxonomy\\\\/term\\\\/24\" } ] You can find the models by browsing the taxonomy terms available at http://localhost:8000/admin/structure/taxonomy/manage/islandora_models/overview In my example installation 24 is an \"Image\", but let's create a collection which is 23. Note : Taxonomy terms may vary between instances and you should verify the correct number for your installation. So the body of the request will be: { \"type\": [ { \"target_id\": \"islandora_object\", \"target_type\": \"node_type\" } ], \"title\": [ { \"value\": \"Created a collection with POST\" } ], \"field_model\": [ { \"target_id\": 23, \"target_type\": \"taxonomy_term\" } ] } Note : You must include an appropriate Content-type header for the format you're requesting Other Note : You must include some authentication credentials to say who you are and so Drupal can check if you are allowed to create this object. Otherwise you will receive a 401 Unauthorized response. If you do provide credentials but don't have permission, you will receive a 403 Forbidden response. You can find more information about Authorization here \ud83c\udf4e For example: curl -i -X POST -u admin:islandora -H\"Content-type: application/json\" --data '{\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\"}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\"}]}' 'http://localhost:8000/node?_format=json' HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 18:07:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Location: http://localhost:8000/node/3 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":3}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]} The parts of the above request are: -i - return the response headers -X POST - send a POST request -u admin:islandora - use these basic authentication credentials -H\"Content-type: application/json\" - send the content-type header --data '{...}' - send the request body (seen above) 'http://localhost:8000/node?_format=json' - the endpoint of the request Files and Media Drupal is supposed to have a way to upload files, but this seems to require the use of an X-CSRF-Token, which can only be retrieved using Cookie authentication and even then does not allow you to upload. Consequently there is a REST endpoint not listed in the REST UI, because it is not configurable and is part of the Islandora 8 system. This endpoint is available at http://localhost:8000/node/{node id}/media/{media type}/{media use} It only accepts PUT requests. If the media and file don't exist they are created, if they exist the file is updated with the new body. The node and taxonomy term are used to search (via an entity query ) for a media. If this media exists the body of the file is replaced with the new content, otherwise a new file is created to hold the contents. The tokens to this URI are as follows: node id : The numeric ID of the node you wish to link this media/file to. media type : The media type name you wish to create (i.e. image, file, audio) media use : The numeric ID of the media use taxonomy term to set for this media You can find the media use taxonomy terms at http://localhost:8000/admin/structure/taxonomy/manage/islandora_media_use/overview So the body of the request is the actual binary file to upload. \ud83c\udf4e For example: With a local file called my-image.png that I wanted to link to a node with ID 3 . I am using the taxonomy term \"Original file\", which on my machine is 16 > curl -i -X PUT -u admin:islandora -H\"Content-type: image/png\" --data-binary \"@my-image.png\" -H\"Content-Location: public://images/my-image.png\" 'http://localhost:8000/node/3/media/image/16' HTTP/1.1 100 Continue HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 22:01:39 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Location: http://localhost:8000/media/4 X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 0 Content-Type: text/html; charset=UTF-8 The parts of the above request are: -i - return the response headers -X PUT - send a PUT request -u admin:islandora - use these basic authentication credentials -H\"Content-type: image/png\" - send the content-type header --data-binary \"@my-image.png\" - send the contents of the file located at my-image.png as binary -H\"Content-Location: public://images/my-image.png\" - store the file in the public scheme (ie. in Drupal) at the path images/my-image.png , to store the file in Fedora use the fedora// scheme (ie. fedora://images/my-image.png) 'http://localhost:8000/node/3/media/image/16' - the endpoint of the request specifying the node, media type and taxonomy term.","title":"POST/PUT"},{"location":"technical-documentation/rest-create/#creating-resources-media-and-files-postput-requests","text":"Authorization Content Files and Media","title":"Creating resources, media and files - POST/PUT Requests"},{"location":"technical-documentation/rest-create/#authorization","text":"You will need to use one of the configured authorization methods to create content, media and/or files. These are defined under Authorization on the overview.","title":"Authorization"},{"location":"technical-documentation/rest-create/#content-nodes","text":"The above setup shows that you can perform a POST request against a node at the /node endpoint with a body in the JSON format. To create a node you need to provide two elements in your message body. The node type and any required field values. For the islandora_defaults included Repository Item these are: A type - this tells Drupal what content type we are creating A title - this is a required field of all nodes. A model - this is a required by Islandora to tell the type of object (i.e. Image, Audio, Collection) A good way to make your first POST request is to perform a GET request against an existing node and erase all the extra content. You can find more information about GET requests here Again we are using the json format. \ud83c\udf4e For example curl -X GET 'http://localhost:8000/node/3?_format=json Look for the type element \"type\" : [ { \"target_id\" : \"islandora_object\", \"target_type\" : \"node_type\", \"target_uuid\" : \"62189bec-3ef3-4196-b847-b17e5ce61fd5\" } ] In our example \"islandora_object\" is the type of the default \"Repository Item\", if you have created a new type you will have a different target_id. You will not need the target_uuid . Next look for the title element \"title\" : [ { \"value\" : \"An example Islandora object\" } ] Lastly look for the field_model element \"field_model\": [ { \"target_id\": 24, \"target_type\": \"taxonomy_term\", \"target_uuid\": \"e7560b68-e95a-4e76-9671-2a3041cd9800\", \"url\": \"\\\\/taxonomy\\\\/term\\\\/24\" } ] You can find the models by browsing the taxonomy terms available at http://localhost:8000/admin/structure/taxonomy/manage/islandora_models/overview In my example installation 24 is an \"Image\", but let's create a collection which is 23. Note : Taxonomy terms may vary between instances and you should verify the correct number for your installation. So the body of the request will be: { \"type\": [ { \"target_id\": \"islandora_object\", \"target_type\": \"node_type\" } ], \"title\": [ { \"value\": \"Created a collection with POST\" } ], \"field_model\": [ { \"target_id\": 23, \"target_type\": \"taxonomy_term\" } ] } Note : You must include an appropriate Content-type header for the format you're requesting Other Note : You must include some authentication credentials to say who you are and so Drupal can check if you are allowed to create this object. Otherwise you will receive a 401 Unauthorized response. If you do provide credentials but don't have permission, you will receive a 403 Forbidden response. You can find more information about Authorization here \ud83c\udf4e For example: curl -i -X POST -u admin:islandora -H\"Content-type: application/json\" --data '{\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\"}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\"}]}' 'http://localhost:8000/node?_format=json' HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 18:07:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Location: http://localhost:8000/node/3 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":3}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]} The parts of the above request are: -i - return the response headers -X POST - send a POST request -u admin:islandora - use these basic authentication credentials -H\"Content-type: application/json\" - send the content-type header --data '{...}' - send the request body (seen above) 'http://localhost:8000/node?_format=json' - the endpoint of the request","title":"Content (Nodes)"},{"location":"technical-documentation/rest-create/#files-and-media","text":"Drupal is supposed to have a way to upload files, but this seems to require the use of an X-CSRF-Token, which can only be retrieved using Cookie authentication and even then does not allow you to upload. Consequently there is a REST endpoint not listed in the REST UI, because it is not configurable and is part of the Islandora 8 system. This endpoint is available at http://localhost:8000/node/{node id}/media/{media type}/{media use} It only accepts PUT requests. If the media and file don't exist they are created, if they exist the file is updated with the new body. The node and taxonomy term are used to search (via an entity query ) for a media. If this media exists the body of the file is replaced with the new content, otherwise a new file is created to hold the contents. The tokens to this URI are as follows: node id : The numeric ID of the node you wish to link this media/file to. media type : The media type name you wish to create (i.e. image, file, audio) media use : The numeric ID of the media use taxonomy term to set for this media You can find the media use taxonomy terms at http://localhost:8000/admin/structure/taxonomy/manage/islandora_media_use/overview So the body of the request is the actual binary file to upload. \ud83c\udf4e For example: With a local file called my-image.png that I wanted to link to a node with ID 3 . I am using the taxonomy term \"Original file\", which on my machine is 16 > curl -i -X PUT -u admin:islandora -H\"Content-type: image/png\" --data-binary \"@my-image.png\" -H\"Content-Location: public://images/my-image.png\" 'http://localhost:8000/node/3/media/image/16' HTTP/1.1 100 Continue HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 22:01:39 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Location: http://localhost:8000/media/4 X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 0 Content-Type: text/html; charset=UTF-8 The parts of the above request are: -i - return the response headers -X PUT - send a PUT request -u admin:islandora - use these basic authentication credentials -H\"Content-type: image/png\" - send the content-type header --data-binary \"@my-image.png\" - send the contents of the file located at my-image.png as binary -H\"Content-Location: public://images/my-image.png\" - store the file in the public scheme (ie. in Drupal) at the path images/my-image.png , to store the file in Fedora use the fedora// scheme (ie. fedora://images/my-image.png) 'http://localhost:8000/node/3/media/image/16' - the endpoint of the request specifying the node, media type and taxonomy term.","title":"Files and Media"},{"location":"technical-documentation/rest-delete/","text":"Removing resources, media and files - DELETE Requests Deleting is as easy as getting resources and more difficult than creating resources. If you can perform a GET request then you have the information required to perform a DELETE request. Check out the examples below. Authorization Content Media Files Authorization If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. Content (Nodes) You will need your node id , you can find more information in the GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. Our example node has a node id of 2 > curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 15:02:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/node/2>; rel=\"canonical\" Link: <http://localhost:8000/node/2/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=2>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/2/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/2/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/2>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=2>; rel=\"https://drupal.org/link-relations/create\" Link: <http://purl.org/dc/dcmitype/Collection>; rel=\"tag\"; title=\"Collection\" Link: <http://localhost:8000/node/2?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json {\"nid\":[{\"value\":2}],\"uuid\":[{\"value\":\"413135a6-0bd1-4d6b-8bcb-059cf7784d83\"}],\"vid\":[{\"value\":2}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}% Then we switch GET to DELETE > curl -i -u admin:islandora -X DELETE 'http://localhost:8000/node/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 15:02:30 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 All subsequent requests to the above URI will return a 404 Not Found status code. > curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:12:58 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 149 Content-Type: application/json {\"message\":\"The \\u0022node\\u0022 parameter was not converted for the path \\u0022\\/node\\/{node}\\u0022 (route name: \\u0022rest.entity.node.GET\\u0022)\"} Media You will need a media id as used in GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a media id of 1 for our example, I'll perform a GET > curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:53:54 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/media/add>; rel=\"https://drupal.org/link-relations/add-page\" Link: <http://localhost:8000/media/add/image>; rel=\"https://drupal.org/link-relations/add-form\" Link: <http://localhost:8000/media/1>; rel=\"canonical\" Link: <http://localhost:8000/admin/content/media>; rel=\"collection\" Link: <http://localhost:8000/media/1/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/media/delete?media=1>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/media/1/edit>; rel=\"edit-form\" Link: <http://localhost:8000/media/1>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node/1>; rel=\"related\"; title=\"Media of\" Link: <http://pcdm.org/use#OriginalFile>; rel=\"tag\"; title=\"Original File\" Link: <http://localhost:8000/media/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" Link: <http://localhost:8000/media/1/source>; rel=\"edit-media\" Link: <http://localhost:8000/_flysystem/fedora/2019-03/Louis_Riel.jpg>; rel=\"describes\"; type=\"image/jpeg\" X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1937 Content-Type: application/json {\"mid\":[{\"value\":1}],\"uuid\":[{\"value\":\"d8893926-ddb7-4125-b2da-30428af0fe3d\"}],\"vid\":[{\"value\":1}],\"langcode\":[{\"value\":\"en\"}],\"bundle\":[{\"target_id\":\"image\",\"target_type\":\"media_type\",\"target_uuid\":\"3860e653-201b-4509-89dd-628c446d81cb\"}],\"revision_created\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_user\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log_message\":[],\"status\":[{\"value\":true}],\"name\":[{\"value\":\"An image\"}],\"thumbnail\":[{\"target_id\":2,\"alt\":\"A portrait of Louis Riel\",\"title\":null,\"width\":800,\"height\":1333,\"target_type\":\"file\",\"target_uuid\":\"b0625129-c592-463a-93c3-3eff7cd3567e\",\"url\":\"http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-01T19:43:22+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_file_size\":[{\"value\":166613}],\"field_height\":[{\"value\":1333}],\"field_media_image\":[{\"target_id\":2,\"alt\":\"A portrait of Louis Riel\",\"title\":\"\",\"width\":800,\"height\":1333,\"target_type\":\"file\",\"target_uuid\":\"b0625129-c592-463a-93c3-3eff7cd3567e\",\"url\":\"http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"field_media_of\":[{\"target_id\":1,\"target_type\":\"node\",\"target_uuid\":\"8322e36e-f8ec-4fd9-919d-52aed7b17a52\",\"url\":\"\\/node\\/1\"}],\"field_media_use\":[{\"target_id\":16,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"08e01ff9-eb72-42f5-ae3a-8b21ba0c0bc3\",\"url\":\"\\/taxonomy\\/term\\/16\"}],\"field_mime_type\":[{\"value\":\"image\\/jpeg\"}],\"field_width\":[{\"value\":800}]} Then we replace GET with DELETE . > curl -i -u admin:islandora -X DELETE 'http://localhost:8000/media/1?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:54:55 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the media return 404 Not Found statuses. > curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:13:45 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 153 Content-Type: application/json {\"message\":\"The \\u0022media\\u0022 parameter was not converted for the path \\u0022\\/media\\/{media}\\u0022 (route name: \\u0022rest.entity.media.GET\\u0022)\"} Files You'll need the file id, there is more information at the top of the GET requests for files documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a file id of 2 for our example, I can perform a test GET > curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:40:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 617 Content-Type: application/json {\"fid\":[{\"value\":2}],\"uuid\":[{\"value\":\"b0625129-c592-463a-93c3-3eff7cd3567e\"}],\"langcode\":[{\"value\":\"en\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"filename\":[{\"value\":\"Louis_Riel.jpg\"}],\"uri\":[{\"value\":\"fedora:\\/\\/2019-03\\/Louis_Riel.jpg\",\"url\":\"\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"filemime\":[{\"value\":\"image\\/jpeg\"}],\"filesize\":[{\"value\":166613}],\"status\":[{\"value\":true}],\"created\":[{\"value\":\"2019-03-01T19:43:35+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}]} If this is the correct file, I can delete it. > curl -i -u admin:islandora -X DELETE 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:43:22 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the URI now return a 404 Not Found status. > curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 14:43:33 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 157 Content-Type: application/json {\"message\":\"The \\u0022file\\u0022 parameter was not converted for the path \\u0022\\/entity\\/file\\/{file}\\u0022 (route name: \\u0022rest.entity.file.GET\\u0022)\"}","title":"DELETE"},{"location":"technical-documentation/rest-delete/#removing-resources-media-and-files-delete-requests","text":"Deleting is as easy as getting resources and more difficult than creating resources. If you can perform a GET request then you have the information required to perform a DELETE request. Check out the examples below. Authorization Content Media Files","title":"Removing resources, media and files - DELETE Requests"},{"location":"technical-documentation/rest-delete/#authorization","text":"If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview.","title":"Authorization"},{"location":"technical-documentation/rest-delete/#content-nodes","text":"You will need your node id , you can find more information in the GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. Our example node has a node id of 2 > curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 15:02:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/node/2>; rel=\"canonical\" Link: <http://localhost:8000/node/2/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=2>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/2/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/2/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/2>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=2>; rel=\"https://drupal.org/link-relations/create\" Link: <http://purl.org/dc/dcmitype/Collection>; rel=\"tag\"; title=\"Collection\" Link: <http://localhost:8000/node/2?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json {\"nid\":[{\"value\":2}],\"uuid\":[{\"value\":\"413135a6-0bd1-4d6b-8bcb-059cf7784d83\"}],\"vid\":[{\"value\":2}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}% Then we switch GET to DELETE > curl -i -u admin:islandora -X DELETE 'http://localhost:8000/node/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 15:02:30 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 All subsequent requests to the above URI will return a 404 Not Found status code. > curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:12:58 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 149 Content-Type: application/json {\"message\":\"The \\u0022node\\u0022 parameter was not converted for the path \\u0022\\/node\\/{node}\\u0022 (route name: \\u0022rest.entity.node.GET\\u0022)\"}","title":"Content (Nodes)"},{"location":"technical-documentation/rest-delete/#media","text":"You will need a media id as used in GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a media id of 1 for our example, I'll perform a GET > curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:53:54 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/media/add>; rel=\"https://drupal.org/link-relations/add-page\" Link: <http://localhost:8000/media/add/image>; rel=\"https://drupal.org/link-relations/add-form\" Link: <http://localhost:8000/media/1>; rel=\"canonical\" Link: <http://localhost:8000/admin/content/media>; rel=\"collection\" Link: <http://localhost:8000/media/1/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/media/delete?media=1>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/media/1/edit>; rel=\"edit-form\" Link: <http://localhost:8000/media/1>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node/1>; rel=\"related\"; title=\"Media of\" Link: <http://pcdm.org/use#OriginalFile>; rel=\"tag\"; title=\"Original File\" Link: <http://localhost:8000/media/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" Link: <http://localhost:8000/media/1/source>; rel=\"edit-media\" Link: <http://localhost:8000/_flysystem/fedora/2019-03/Louis_Riel.jpg>; rel=\"describes\"; type=\"image/jpeg\" X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1937 Content-Type: application/json {\"mid\":[{\"value\":1}],\"uuid\":[{\"value\":\"d8893926-ddb7-4125-b2da-30428af0fe3d\"}],\"vid\":[{\"value\":1}],\"langcode\":[{\"value\":\"en\"}],\"bundle\":[{\"target_id\":\"image\",\"target_type\":\"media_type\",\"target_uuid\":\"3860e653-201b-4509-89dd-628c446d81cb\"}],\"revision_created\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_user\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log_message\":[],\"status\":[{\"value\":true}],\"name\":[{\"value\":\"An image\"}],\"thumbnail\":[{\"target_id\":2,\"alt\":\"A portrait of Louis Riel\",\"title\":null,\"width\":800,\"height\":1333,\"target_type\":\"file\",\"target_uuid\":\"b0625129-c592-463a-93c3-3eff7cd3567e\",\"url\":\"http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-01T19:43:22+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_file_size\":[{\"value\":166613}],\"field_height\":[{\"value\":1333}],\"field_media_image\":[{\"target_id\":2,\"alt\":\"A portrait of Louis Riel\",\"title\":\"\",\"width\":800,\"height\":1333,\"target_type\":\"file\",\"target_uuid\":\"b0625129-c592-463a-93c3-3eff7cd3567e\",\"url\":\"http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"field_media_of\":[{\"target_id\":1,\"target_type\":\"node\",\"target_uuid\":\"8322e36e-f8ec-4fd9-919d-52aed7b17a52\",\"url\":\"\\/node\\/1\"}],\"field_media_use\":[{\"target_id\":16,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"08e01ff9-eb72-42f5-ae3a-8b21ba0c0bc3\",\"url\":\"\\/taxonomy\\/term\\/16\"}],\"field_mime_type\":[{\"value\":\"image\\/jpeg\"}],\"field_width\":[{\"value\":800}]} Then we replace GET with DELETE . > curl -i -u admin:islandora -X DELETE 'http://localhost:8000/media/1?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:54:55 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the media return 404 Not Found statuses. > curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:13:45 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 153 Content-Type: application/json {\"message\":\"The \\u0022media\\u0022 parameter was not converted for the path \\u0022\\/media\\/{media}\\u0022 (route name: \\u0022rest.entity.media.GET\\u0022)\"}","title":"Media"},{"location":"technical-documentation/rest-delete/#files","text":"You'll need the file id, there is more information at the top of the GET requests for files documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a file id of 2 for our example, I can perform a test GET > curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:40:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 617 Content-Type: application/json {\"fid\":[{\"value\":2}],\"uuid\":[{\"value\":\"b0625129-c592-463a-93c3-3eff7cd3567e\"}],\"langcode\":[{\"value\":\"en\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"filename\":[{\"value\":\"Louis_Riel.jpg\"}],\"uri\":[{\"value\":\"fedora:\\/\\/2019-03\\/Louis_Riel.jpg\",\"url\":\"\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"filemime\":[{\"value\":\"image\\/jpeg\"}],\"filesize\":[{\"value\":166613}],\"status\":[{\"value\":true}],\"created\":[{\"value\":\"2019-03-01T19:43:35+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}]} If this is the correct file, I can delete it. > curl -i -u admin:islandora -X DELETE 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:43:22 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the URI now return a 404 Not Found status. > curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 14:43:33 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 157 Content-Type: application/json {\"message\":\"The \\u0022file\\u0022 parameter was not converted for the path \\u0022\\/entity\\/file\\/{file}\\u0022 (route name: \\u0022rest.entity.file.GET\\u0022)\"}","title":"Files"},{"location":"technical-documentation/rest-get/","text":"Getting resources, media and files - GET Requests Authorization Content Media Files Authorization If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. Content (Nodes) The above setup shows that you can perform a GET request against a node at the /node/{id} endpoint. This is the same as the URL when viewed through a web browser. For example http://localhost:8000/node/2 It also defines the formats you can access. In this example json and jsonld are available. To access a resource in a specific format use the _format= argument which is appended to the end of the URI after a ? . To get the resource located at http://localhost:8000/node/3 in JSON, you can go to http://localhost:8000/node/3?_format=json . \ud83c\udf4e For example: You can do this in your web browser or with a command line client like cURL. (Note: response body here has been formatted, yours will look different) vagrant@claw:~$ curl -i http://localhost:8000/node/3?_format=json HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 21:53:50 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/node/3>; rel=\"canonical\" Link: <http://localhost:8000/node/3/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=3>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/3/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/3/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/3>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=3>; rel=\"https://drupal.org/link-relations/create\" Link: <http://purl.org/coar/resource_type/c_c513>; rel=\"tag\"; title=\"Image\" Link: <http://localhost:8000/media/1>; rel=\"related\"; title=\"Original File\" Link: <http://localhost:8000/media/2>; rel=\"related\"; title=\"Service File\" Link: <http://localhost:8000/media/3>; rel=\"related\"; title=\"Thumbnail Image\" Link: <http://localhost:8000/node/3?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: MISS Content-Length: 1521 Content-Type: application/json { \"nid\": [ { \"value\": 1 } ], \"uuid\": [ { \"value\": \"8322e36e-f8ec-4fd9-919d-52aed7b17a52\" } ], \"vid\": [ { \"value\": 1 } ], \"langcode\": [ { \"value\": \"en\" } ], \"type\": [ { \"target_id\": \"islandora_object\", \"target_type\": \"node_type\", \"target_uuid\": \"62189bec-3ef3-4196-b847-b17e5ce61fd5\" } ], \"revision_timestamp\": [ { \"value\": \"2019-03-01T19:43:12+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"revision_uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"revision_log\": [], \"status\": [ { \"value\": true } ], \"title\": [ { \"value\": \"Custom item\" } ], \"uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"created\": [ { \"value\": \"2019-03-01T19:42:54+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"changed\": [ { \"value\": \"2019-03-01T19:43:12+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"promote\": [ { \"value\": true } ], \"sticky\": [ { \"value\": false } ], \"default_langcode\": [ { \"value\": true } ], \"revision_translation_affected\": [ { \"value\": true } ], \"content_translation_source\": [ { \"value\": \"und\" } ], \"content_translation_outdated\": [ { \"value\": false } ], \"field_alternative_title\": [], \"field_description\": [], \"field_display_hints\": [], \"field_edtf_date\": [], \"field_edtf_date_created\": [], \"field_edtf_date_issued\": [], \"field_extent\": [ { \"value\": \"1 item\" } ], \"field_identifier\": [], \"field_linked_agent\": [], \"field_member_of\": [], \"field_model\": [ { \"target_id\": 24, \"target_type\": \"taxonomy_term\", \"target_uuid\": \"e7560b68-e95a-4e76-9671-2a3041cd9800\", \"url\": \"\\\\/taxonomy\\\\/term\\\\/24\" } ], \"field_pid\": [], \"field_resource_type\": [], \"field_rights\": [], \"field_subject\": [] } Media The above steps are the same for media, it is just the URI that has changed. For media you use /media/{id} \ud83c\udf4e For example: curl -u admin:islandora http://localhost:8000/media/2?_format=json { \"mid\": [ { \"value\": 2 } ], \"uuid\": [ { \"value\": \"e75e609d-510c-4764-9280-665bb7026161\" } ], \"vid\": [ { \"value\": 2 } ], \"langcode\": [ { \"value\": \"en\" } ], \"bundle\": [ { \"target_id\": \"image\", \"target_type\": \"media_type\", \"target_uuid\": \"3860e653-201b-4509-89dd-628c446d81cb\" } ], \"revision_created\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"revision_user\": [], \"revision_log_message\": [], \"status\": [ { \"value\": true } ], \"name\": [ { \"value\": \"1-Service File.jpg\" } ], \"thumbnail\": [ { \"target_id\": 3, \"alt\": null, \"title\": null, \"width\": 800, \"height\": 1333, \"target_type\": \"file\", \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\", \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], \"uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"created\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"changed\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"default_langcode\": [ { \"value\": true } ], \"revision_translation_affected\": [ { \"value\": true } ], \"content_translation_source\": [ { \"value\": \"und\" } ], \"content_translation_outdated\": [ { \"value\": false } ], \"field_access_terms\": [], \"field_file_size\": [ { \"value\": 166608 } ], \"field_height\": [ { \"value\": 1333 } ], \"field_media_image\": [ { \"target_id\": 3, \"alt\": null, \"title\": null, \"width\": 800, \"height\": 1333, \"target_type\": \"file\", \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\", \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], \"field_media_of\": [ { \"target_id\": 1, \"target_type\": \"node\", \"target_uuid\": \"8322e36e-f8ec-4fd9-919d-52aed7b17a52\", \"url\": \"\\\\/node\\\\/1\" } ], \"field_media_use\": [ { \"target_id\": 18, \"target_type\": \"taxonomy_term\", \"target_uuid\": \"e8c698a7-8c15-47c4-8567-1c27f8f0c19e\", \"url\": \"\\\\/taxonomy\\\\/term\\\\/18\" } ], \"field_mime_type\": [ { \"value\": \"image\\\\/jpeg\" } ], \"field_width\": [ { \"value\": 800 } ] } field_media_of indicates which node(s) the media is associated with. The node can be referenced using the value of the target_id key (in this example, 1) or the target_uuid key (8322e36e-f8ec-4fd9-919d-52aed7b17a52). Files Through the REST API you are accessing metadata about files, but not the actual binary object. Based on the above configuration the path for a GET request is /entity/file/{id} The file ID refers to the integer counter and not the UUID of a file. Through the UI you can go to the File listing at http://localhost:8000/admin/content/files . For the file you want to access, choose the USED IN link. That URI has the format http://localhost:8000/admin/content/files/usage/{file id} Alternatively the file ID can be found by viewing the media metadata (above section). In the above example if you look through the response from a GET request to the /media/{id} you will find a section like: \"field_media_image\": [ { \"target_id\": 3, \"alt\": null, \"title\": null, \"width\": 800, \"height\": 1333, \"target_type\": \"file\", \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\", \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], Note : Depending on the \"type\" of file (image, video, audio, file) this field will have a different name. This has both the url which is the URI to retrieve the binary content of the file as well as the target_id which is the file ID. So we can retrieve the file with a GET request to the URI http://localhost:8000/sites/default/files/2019-03/1-Service%20File.jpg . But more importantly we can retrieve the file metadata by making a request to http://localhost:8000/entity/file/3 with one of the allowed formats \ud83c\udf4e For example: > curl -i -X GET \"http://localhost:8000/entity/file/3?_format=json\" HTTP/1.1 200 OK Date: Tue, 05 Mar 2019 16:52:06 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: HIT Content-Length: 634 Content-Type: application/json { \"fid\": [ { \"value\": 3 } ], \"uuid\": [ { \"value\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\" } ], \"langcode\": [ { \"value\": \"en\" } ], \"uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"filename\": [ { \"value\": \"1-Service File.jpg\" } ], \"uri\": [ { \"value\": \"public:\\\\/\\\\/2019-03\\\\/1-Service File.jpg\", \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], \"filemime\": [ { \"value\": \"image\\\\/jpeg\" } ], \"filesize\": [ { \"value\": 166608 } ], \"status\": [ { \"value\": true } ], \"created\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"changed\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ] } The uri: url: is the path to your file, so for the above example of \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" . I can perform a GET against <my hostname>/sites/default/files/2019-03/1-Service%20File.jpg and get the contents of this file.","title":"GET"},{"location":"technical-documentation/rest-get/#getting-resources-media-and-files-get-requests","text":"Authorization Content Media Files","title":"Getting resources, media and files - GET Requests"},{"location":"technical-documentation/rest-get/#authorization","text":"If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview.","title":"Authorization"},{"location":"technical-documentation/rest-get/#content-nodes","text":"The above setup shows that you can perform a GET request against a node at the /node/{id} endpoint. This is the same as the URL when viewed through a web browser. For example http://localhost:8000/node/2 It also defines the formats you can access. In this example json and jsonld are available. To access a resource in a specific format use the _format= argument which is appended to the end of the URI after a ? . To get the resource located at http://localhost:8000/node/3 in JSON, you can go to http://localhost:8000/node/3?_format=json . \ud83c\udf4e For example: You can do this in your web browser or with a command line client like cURL. (Note: response body here has been formatted, yours will look different) vagrant@claw:~$ curl -i http://localhost:8000/node/3?_format=json HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 21:53:50 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/node/3>; rel=\"canonical\" Link: <http://localhost:8000/node/3/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=3>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/3/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/3/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/3>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=3>; rel=\"https://drupal.org/link-relations/create\" Link: <http://purl.org/coar/resource_type/c_c513>; rel=\"tag\"; title=\"Image\" Link: <http://localhost:8000/media/1>; rel=\"related\"; title=\"Original File\" Link: <http://localhost:8000/media/2>; rel=\"related\"; title=\"Service File\" Link: <http://localhost:8000/media/3>; rel=\"related\"; title=\"Thumbnail Image\" Link: <http://localhost:8000/node/3?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: MISS Content-Length: 1521 Content-Type: application/json { \"nid\": [ { \"value\": 1 } ], \"uuid\": [ { \"value\": \"8322e36e-f8ec-4fd9-919d-52aed7b17a52\" } ], \"vid\": [ { \"value\": 1 } ], \"langcode\": [ { \"value\": \"en\" } ], \"type\": [ { \"target_id\": \"islandora_object\", \"target_type\": \"node_type\", \"target_uuid\": \"62189bec-3ef3-4196-b847-b17e5ce61fd5\" } ], \"revision_timestamp\": [ { \"value\": \"2019-03-01T19:43:12+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"revision_uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"revision_log\": [], \"status\": [ { \"value\": true } ], \"title\": [ { \"value\": \"Custom item\" } ], \"uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"created\": [ { \"value\": \"2019-03-01T19:42:54+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"changed\": [ { \"value\": \"2019-03-01T19:43:12+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"promote\": [ { \"value\": true } ], \"sticky\": [ { \"value\": false } ], \"default_langcode\": [ { \"value\": true } ], \"revision_translation_affected\": [ { \"value\": true } ], \"content_translation_source\": [ { \"value\": \"und\" } ], \"content_translation_outdated\": [ { \"value\": false } ], \"field_alternative_title\": [], \"field_description\": [], \"field_display_hints\": [], \"field_edtf_date\": [], \"field_edtf_date_created\": [], \"field_edtf_date_issued\": [], \"field_extent\": [ { \"value\": \"1 item\" } ], \"field_identifier\": [], \"field_linked_agent\": [], \"field_member_of\": [], \"field_model\": [ { \"target_id\": 24, \"target_type\": \"taxonomy_term\", \"target_uuid\": \"e7560b68-e95a-4e76-9671-2a3041cd9800\", \"url\": \"\\\\/taxonomy\\\\/term\\\\/24\" } ], \"field_pid\": [], \"field_resource_type\": [], \"field_rights\": [], \"field_subject\": [] }","title":"Content (Nodes)"},{"location":"technical-documentation/rest-get/#media","text":"The above steps are the same for media, it is just the URI that has changed. For media you use /media/{id} \ud83c\udf4e For example: curl -u admin:islandora http://localhost:8000/media/2?_format=json { \"mid\": [ { \"value\": 2 } ], \"uuid\": [ { \"value\": \"e75e609d-510c-4764-9280-665bb7026161\" } ], \"vid\": [ { \"value\": 2 } ], \"langcode\": [ { \"value\": \"en\" } ], \"bundle\": [ { \"target_id\": \"image\", \"target_type\": \"media_type\", \"target_uuid\": \"3860e653-201b-4509-89dd-628c446d81cb\" } ], \"revision_created\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"revision_user\": [], \"revision_log_message\": [], \"status\": [ { \"value\": true } ], \"name\": [ { \"value\": \"1-Service File.jpg\" } ], \"thumbnail\": [ { \"target_id\": 3, \"alt\": null, \"title\": null, \"width\": 800, \"height\": 1333, \"target_type\": \"file\", \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\", \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], \"uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"created\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"changed\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"default_langcode\": [ { \"value\": true } ], \"revision_translation_affected\": [ { \"value\": true } ], \"content_translation_source\": [ { \"value\": \"und\" } ], \"content_translation_outdated\": [ { \"value\": false } ], \"field_access_terms\": [], \"field_file_size\": [ { \"value\": 166608 } ], \"field_height\": [ { \"value\": 1333 } ], \"field_media_image\": [ { \"target_id\": 3, \"alt\": null, \"title\": null, \"width\": 800, \"height\": 1333, \"target_type\": \"file\", \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\", \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], \"field_media_of\": [ { \"target_id\": 1, \"target_type\": \"node\", \"target_uuid\": \"8322e36e-f8ec-4fd9-919d-52aed7b17a52\", \"url\": \"\\\\/node\\\\/1\" } ], \"field_media_use\": [ { \"target_id\": 18, \"target_type\": \"taxonomy_term\", \"target_uuid\": \"e8c698a7-8c15-47c4-8567-1c27f8f0c19e\", \"url\": \"\\\\/taxonomy\\\\/term\\\\/18\" } ], \"field_mime_type\": [ { \"value\": \"image\\\\/jpeg\" } ], \"field_width\": [ { \"value\": 800 } ] } field_media_of indicates which node(s) the media is associated with. The node can be referenced using the value of the target_id key (in this example, 1) or the target_uuid key (8322e36e-f8ec-4fd9-919d-52aed7b17a52).","title":"Media"},{"location":"technical-documentation/rest-get/#files","text":"Through the REST API you are accessing metadata about files, but not the actual binary object. Based on the above configuration the path for a GET request is /entity/file/{id} The file ID refers to the integer counter and not the UUID of a file. Through the UI you can go to the File listing at http://localhost:8000/admin/content/files . For the file you want to access, choose the USED IN link. That URI has the format http://localhost:8000/admin/content/files/usage/{file id} Alternatively the file ID can be found by viewing the media metadata (above section). In the above example if you look through the response from a GET request to the /media/{id} you will find a section like: \"field_media_image\": [ { \"target_id\": 3, \"alt\": null, \"title\": null, \"width\": 800, \"height\": 1333, \"target_type\": \"file\", \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\", \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], Note : Depending on the \"type\" of file (image, video, audio, file) this field will have a different name. This has both the url which is the URI to retrieve the binary content of the file as well as the target_id which is the file ID. So we can retrieve the file with a GET request to the URI http://localhost:8000/sites/default/files/2019-03/1-Service%20File.jpg . But more importantly we can retrieve the file metadata by making a request to http://localhost:8000/entity/file/3 with one of the allowed formats \ud83c\udf4e For example: > curl -i -X GET \"http://localhost:8000/entity/file/3?_format=json\" HTTP/1.1 200 OK Date: Tue, 05 Mar 2019 16:52:06 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: HIT Content-Length: 634 Content-Type: application/json { \"fid\": [ { \"value\": 3 } ], \"uuid\": [ { \"value\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\" } ], \"langcode\": [ { \"value\": \"en\" } ], \"uid\": [ { \"target_id\": 1, \"target_type\": \"user\", \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\", \"url\": \"\\\\/user\\\\/1\" } ], \"filename\": [ { \"value\": \"1-Service File.jpg\" } ], \"uri\": [ { \"value\": \"public:\\\\/\\\\/2019-03\\\\/1-Service File.jpg\", \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" } ], \"filemime\": [ { \"value\": \"image\\\\/jpeg\" } ], \"filesize\": [ { \"value\": 166608 } ], \"status\": [ { \"value\": true } ], \"created\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ], \"changed\": [ { \"value\": \"2019-03-01T19:43:48+00:00\", \"format\": \"Y-m-d\\\\TH:i:sP\" } ] } The uri: url: is the path to your file, so for the above example of \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" . I can perform a GET against <my hostname>/sites/default/files/2019-03/1-Service%20File.jpg and get the contents of this file.","title":"Files"},{"location":"technical-documentation/rest-patch/","text":"Updating resources - PATCH request PATCH requests allow you to update resources in place via a REST call. In this case you send a few required fields and then any changed fields. PATCH requests are available for nodes and media entities, but not for files. PATCH requests are very consistent between node and media entities so we will just show one set of examples here. Our example node is at http://localhost:8000/node/3 . If you perform a GET against another node or media you can see all of the fields, some of these are calculated (change based on others, i.e. \"changed\"), some are references to other entities (nodes, media, files in Drupal. i.e. \"field_model\") and others are pure text fields (i.e. \"title\"). The fields will be different between different node types and media types, but the syntax to update them is the same. Authorization Change a text field Change an entity reference Authorization If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. This with assume you have already created a node or media at some location. Change a text field To change the title of a node, you need to supply the new title and the node_type. The node_type is required as this defines what fields are available to the node. A successful PATCH request will return a 200 status code and the body will contain the newly updated body. curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"title\": [{\"value\":\"Updated with a PATCH request\"}]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:01:23 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":3}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T17:01:23+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]} Change an entity reference field This example is how to change a field that references some other entity. For this example we will use the field_model field, this is a reference to the taxonomy term that holds the \"model\" of the resource (ie. Image, Collection, Audio, Video, etc) On our example installation taxonomy term 22 is \"Binary\", so to change a node from what it was to a Binary you would do. > curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"field_model\": [{\"target_id\": 22, \"target_type\": \"taxonomy_term\"}]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:51:47 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":4}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-11T17:36:10+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T17:51:47+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":22,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"e1f167e1-124d-4db4-96ab-30641ca4e21b\",\"url\":\"\\/taxonomy\\/term\\/22\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]} To patch an object and make it part of a collection, you need the id number of the collection object. In this example node 2 will be our collection. target_type can be a confusing one, if you are ever unsure have a look at the returned values for an existing object. > curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"field_member_of\": [{\"target_id\": 2, \"target_type\": \"node_type\"}]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 18:01:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1669 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":4}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-11T17:36:10+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T18:01:40+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[{\"target_id\":2,\"target_type\":\"node\",\"target_uuid\":\"413135a6-0bd1-4d6b-8bcb-059cf7784d83\",\"url\":\"\\/node\\/2\"}],\"field_model\":[{\"target_id\":22,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"e1f167e1-124d-4db4-96ab-30641ca4e21b\",\"url\":\"\\/taxonomy\\/term\\/22\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}","title":"PATCH"},{"location":"technical-documentation/rest-patch/#updating-resources-patch-request","text":"PATCH requests allow you to update resources in place via a REST call. In this case you send a few required fields and then any changed fields. PATCH requests are available for nodes and media entities, but not for files. PATCH requests are very consistent between node and media entities so we will just show one set of examples here. Our example node is at http://localhost:8000/node/3 . If you perform a GET against another node or media you can see all of the fields, some of these are calculated (change based on others, i.e. \"changed\"), some are references to other entities (nodes, media, files in Drupal. i.e. \"field_model\") and others are pure text fields (i.e. \"title\"). The fields will be different between different node types and media types, but the syntax to update them is the same. Authorization Change a text field Change an entity reference","title":"Updating resources - PATCH request"},{"location":"technical-documentation/rest-patch/#authorization","text":"If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. This with assume you have already created a node or media at some location.","title":"Authorization"},{"location":"technical-documentation/rest-patch/#change-a-text-field","text":"To change the title of a node, you need to supply the new title and the node_type. The node_type is required as this defines what fields are available to the node. A successful PATCH request will return a 200 status code and the body will contain the newly updated body. curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"title\": [{\"value\":\"Updated with a PATCH request\"}]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:01:23 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":3}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T17:01:23+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}","title":"Change a text field"},{"location":"technical-documentation/rest-patch/#change-an-entity-reference-field","text":"This example is how to change a field that references some other entity. For this example we will use the field_model field, this is a reference to the taxonomy term that holds the \"model\" of the resource (ie. Image, Collection, Audio, Video, etc) On our example installation taxonomy term 22 is \"Binary\", so to change a node from what it was to a Binary you would do. > curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"field_model\": [{\"target_id\": 22, \"target_type\": \"taxonomy_term\"}]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:51:47 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":4}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-11T17:36:10+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T17:51:47+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":22,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"e1f167e1-124d-4db4-96ab-30641ca4e21b\",\"url\":\"\\/taxonomy\\/term\\/22\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]} To patch an object and make it part of a collection, you need the id number of the collection object. In this example node 2 will be our collection. target_type can be a confusing one, if you are ever unsure have a look at the returned values for an existing object. > curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"field_member_of\": [{\"target_id\": 2, \"target_type\": \"node_type\"}]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 18:01:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1669 Content-Type: application/json {\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":4}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-11T17:36:10+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T18:01:40+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[{\"target_id\":2,\"target_type\":\"node\",\"target_uuid\":\"413135a6-0bd1-4d6b-8bcb-059cf7784d83\",\"url\":\"\\/node\\/2\"}],\"field_model\":[{\"target_id\":22,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"e1f167e1-124d-4db4-96ab-30641ca4e21b\",\"url\":\"\\/taxonomy\\/term\\/22\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}","title":"Change an entity reference field"},{"location":"technical-documentation/rest-signposting/","text":"Signposting Signposting is a technique used in RESTful APIs where other relevant resources are exposed to clients as Link headers in GET and HEAD requests. These Link headers follow a standard format as specified in RFC8288 . Drupal already makes use of this technique for content entities, and Islandora takes it even further by providing additional Link headers that enable the client to navigate the repository and discover additional information about various resources. Because the links are returned in response headers, they can be relied upon without having to parse the message body. This makes them consistent across all serialization formats that can be returned in a message body (XML, JSON, JSONLD, etc...). As a general precaution, link headers for Drupal entities are not exposed to users that do not have the permissions to view the entity linked in the header. So making GET and HEAD requests anonymously will yield a different set of headers than what an authenticated user would see. For example, anonymous users don't have the view media permission, so they will not see the link headers for media associated with a node. Link Headers Provided by Islandora Alternate Representations Other representations generated by different serializers available through Drupal's REST API are exposed as link headers with rel=\"alternate\" and type equal to the mimetype that will be received when dereferencing the link. For example, if an entity in Drupal has a JSONLD representation, then the link header returned in a GET or HEAD response would look like Link: <http://example.org/node/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" Referenced Entities Entity reference fields are exposed as link headers with rel=\"related\" and a title equal to the entity reference field's display label. For example, if http://example.org/node/1 has an entity reference field name \"Associated Content\" that references http://example.org/node/2 , then the link header returned in a GET or HEAD response would look like Link: <http://example.org/node/2>; rel=\"related\"; title=\"Associated Content\" Referenced Taxonomy Terms Entity reference fields for taxonomy terms get special handling. The taxonomy terms used to tag content are exposed as link headers with rel=\"tag\" and a title equal to the taxonomy term's display label. If the term has an external URI in a controlled vocabulary, then that URI is provided. Otherwise, the local Drupal URI is provided. For example, if a piece of content is tagged with taxonomy/term/1 , which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like Link: <http://example.org/taxonomy/term/1>; rel=\"tag\"; title=\"Example Term\" If instead the term were to have the field_external_uri field with a value of http://exampletwo.org/vocab#term then the link header would look like Link: <http://exampletwo.org/vocab#term>; rel=\"tag\"; title=\"Example Term\" . Associated Media Media entities belonging to nodes are exposed as link headers with rel=\"related\" and a title equal to the display label of their field_media_use taxonomy term. For example, if a media is tagged as Original File indicating that it is the initial file uploaded, the link header returned in a GET or HEAD response for a node would look like Link: <http://example.org/media/1>; rel=\"related\"; title=\"Original File\" . Source Files Files that are the source for media entities are exposed as Link headers in the GET and HEAD responses with rel=\"describes\" . The endpoint to edit the contents of the source file is also exposed using rel=\"edit-media\" . For example, if http://example.org/media/1 has the source file http://example.org/file.txt , then a GET or HEAD response would contain both Link: <http://example.org/file.txt>; rel=\"describes\" Link: <http://example.org/media/1/source>; rel=\"edit-media\" Examples Requesting a Node After creating a node, adding it to a Collection, uploading a file and kicking off derivatives, the link headers returned for said node would look like the following. Note that non-Link headers have been removed for brevity: vagrant@claw:~$ curl -I http://localhost:8000/node/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: <http://localhost:8000/node/1>; rel=\"canonical\" Link: <http://localhost:8000/node/1/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=1>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/1/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/1/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/1>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=1>; rel=\"https://drupal.org/link-relations/create\" # These are provided by Islandora Link: <http://localhost:8000/node/2>; rel=\"related\"; title=\"Member of\" Link: <http://purl.org/coar/resource_type/c_c513>; rel=\"tag\"; title=\"Image\" Link: <http://localhost:8000/media/1>; rel=\"related\"; title=\"Original File\" Link: <http://localhost:8000/media/2>; rel=\"related\"; title=\"Service File\" Link: <http://localhost:8000/media/3>; rel=\"related\"; title=\"Thumbnail Image\" Link: <http://localhost:8000/node/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" Requesting a Media If we were to inspect one of the Media associated with this node (which we would've gotten in the response above), the results would look like: vagrant@claw:~$ curl -I http://localhost:8000/media/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: <http://localhost:8000/media/add>; rel=\"https://drupal.org/link-relations/add-page\" Link: <http://localhost:8000/media/add/image>; rel=\"https://drupal.org/link-relations/add-form\" Link: <http://localhost:8000/media/1>; rel=\"canonical\" Link: <http://localhost:8000/admin/content/media>; rel=\"collection\" Link: <http://localhost:8000/media/1/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/media/delete?media=1>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/media/1/edit>; rel=\"edit-form\" Link: <http://localhost:8000/media/1>; rel=\"https://drupal.org/link-relations/revision\" # These are provided by Islandora Link: <http://localhost:8000/node/1>; rel=\"related\"; title=\"Media of\" Link: <http://pcdm.org/use#OriginalFile>; rel=\"tag\"; title=\"Original File\" Link: <http://localhost:8000/media/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" Link: <http://localhost:8000/media/1/source>; rel=\"edit-media\" Link: <http://localhost:8000/_flysystem/fedora/2019-03/IF-Org-Chart_0.jpg>; rel=\"describes\"; type=\"image/jpeg\"","title":"Signposting"},{"location":"technical-documentation/rest-signposting/#signposting","text":"Signposting is a technique used in RESTful APIs where other relevant resources are exposed to clients as Link headers in GET and HEAD requests. These Link headers follow a standard format as specified in RFC8288 . Drupal already makes use of this technique for content entities, and Islandora takes it even further by providing additional Link headers that enable the client to navigate the repository and discover additional information about various resources. Because the links are returned in response headers, they can be relied upon without having to parse the message body. This makes them consistent across all serialization formats that can be returned in a message body (XML, JSON, JSONLD, etc...). As a general precaution, link headers for Drupal entities are not exposed to users that do not have the permissions to view the entity linked in the header. So making GET and HEAD requests anonymously will yield a different set of headers than what an authenticated user would see. For example, anonymous users don't have the view media permission, so they will not see the link headers for media associated with a node.","title":"Signposting"},{"location":"technical-documentation/rest-signposting/#link-headers-provided-by-islandora","text":"","title":"Link Headers Provided by Islandora"},{"location":"technical-documentation/rest-signposting/#alternate-representations","text":"Other representations generated by different serializers available through Drupal's REST API are exposed as link headers with rel=\"alternate\" and type equal to the mimetype that will be received when dereferencing the link. For example, if an entity in Drupal has a JSONLD representation, then the link header returned in a GET or HEAD response would look like Link: <http://example.org/node/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\"","title":"Alternate Representations"},{"location":"technical-documentation/rest-signposting/#referenced-entities","text":"Entity reference fields are exposed as link headers with rel=\"related\" and a title equal to the entity reference field's display label. For example, if http://example.org/node/1 has an entity reference field name \"Associated Content\" that references http://example.org/node/2 , then the link header returned in a GET or HEAD response would look like Link: <http://example.org/node/2>; rel=\"related\"; title=\"Associated Content\"","title":"Referenced Entities"},{"location":"technical-documentation/rest-signposting/#referenced-taxonomy-terms","text":"Entity reference fields for taxonomy terms get special handling. The taxonomy terms used to tag content are exposed as link headers with rel=\"tag\" and a title equal to the taxonomy term's display label. If the term has an external URI in a controlled vocabulary, then that URI is provided. Otherwise, the local Drupal URI is provided. For example, if a piece of content is tagged with taxonomy/term/1 , which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like Link: <http://example.org/taxonomy/term/1>; rel=\"tag\"; title=\"Example Term\" If instead the term were to have the field_external_uri field with a value of http://exampletwo.org/vocab#term then the link header would look like Link: <http://exampletwo.org/vocab#term>; rel=\"tag\"; title=\"Example Term\" .","title":"Referenced Taxonomy Terms"},{"location":"technical-documentation/rest-signposting/#associated-media","text":"Media entities belonging to nodes are exposed as link headers with rel=\"related\" and a title equal to the display label of their field_media_use taxonomy term. For example, if a media is tagged as Original File indicating that it is the initial file uploaded, the link header returned in a GET or HEAD response for a node would look like Link: <http://example.org/media/1>; rel=\"related\"; title=\"Original File\" .","title":"Associated Media"},{"location":"technical-documentation/rest-signposting/#source-files","text":"Files that are the source for media entities are exposed as Link headers in the GET and HEAD responses with rel=\"describes\" . The endpoint to edit the contents of the source file is also exposed using rel=\"edit-media\" . For example, if http://example.org/media/1 has the source file http://example.org/file.txt , then a GET or HEAD response would contain both Link: <http://example.org/file.txt>; rel=\"describes\" Link: <http://example.org/media/1/source>; rel=\"edit-media\"","title":"Source Files"},{"location":"technical-documentation/rest-signposting/#examples","text":"","title":"Examples"},{"location":"technical-documentation/rest-signposting/#requesting-a-node","text":"After creating a node, adding it to a Collection, uploading a file and kicking off derivatives, the link headers returned for said node would look like the following. Note that non-Link headers have been removed for brevity: vagrant@claw:~$ curl -I http://localhost:8000/node/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: <http://localhost:8000/node/1>; rel=\"canonical\" Link: <http://localhost:8000/node/1/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=1>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/1/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/1/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/1>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=1>; rel=\"https://drupal.org/link-relations/create\" # These are provided by Islandora Link: <http://localhost:8000/node/2>; rel=\"related\"; title=\"Member of\" Link: <http://purl.org/coar/resource_type/c_c513>; rel=\"tag\"; title=\"Image\" Link: <http://localhost:8000/media/1>; rel=\"related\"; title=\"Original File\" Link: <http://localhost:8000/media/2>; rel=\"related\"; title=\"Service File\" Link: <http://localhost:8000/media/3>; rel=\"related\"; title=\"Thumbnail Image\" Link: <http://localhost:8000/node/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\"","title":"Requesting a Node"},{"location":"technical-documentation/rest-signposting/#requesting-a-media","text":"If we were to inspect one of the Media associated with this node (which we would've gotten in the response above), the results would look like: vagrant@claw:~$ curl -I http://localhost:8000/media/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: <http://localhost:8000/media/add>; rel=\"https://drupal.org/link-relations/add-page\" Link: <http://localhost:8000/media/add/image>; rel=\"https://drupal.org/link-relations/add-form\" Link: <http://localhost:8000/media/1>; rel=\"canonical\" Link: <http://localhost:8000/admin/content/media>; rel=\"collection\" Link: <http://localhost:8000/media/1/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/media/delete?media=1>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/media/1/edit>; rel=\"edit-form\" Link: <http://localhost:8000/media/1>; rel=\"https://drupal.org/link-relations/revision\" # These are provided by Islandora Link: <http://localhost:8000/node/1>; rel=\"related\"; title=\"Media of\" Link: <http://pcdm.org/use#OriginalFile>; rel=\"tag\"; title=\"Original File\" Link: <http://localhost:8000/media/1?_format=jsonld>; rel=\"alternate\"; type=\"application/ld+json\" Link: <http://localhost:8000/media/1/source>; rel=\"edit-media\" Link: <http://localhost:8000/_flysystem/fedora/2019-03/IF-Org-Chart_0.jpg>; rel=\"describes\"; type=\"image/jpeg\"","title":"Requesting a Media"},{"location":"technical-documentation/running-automated-tests/","text":"Running Automated Tests User Interface Warning Some of islandora's dependencies include deprecated code. This will cause the tests to fail when run through the GUI. To avoid this, use the command-line method with the --suppress-deprecations tag. To run automated tests via a web browser, you can to Admin > Configuration > Testing (http://localhost:8000/admin/config/development/testing) in the admin toolbar. From there you can browse and search for tests, select the ones you'd like to run. Pressing the blue \"Run Tests\" button will execute all tests you've selected in a batch and then display the results. Command Line Running tests from the command line utilizes the test runner script provided by Drupal core. From Drupal's web directory, the full command to run is vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --module \"islandora\" Then wait - running these tests may take a while. Let's unpack it: You need to run this as the apache user for filesystem access, hence sudo -u www-data Despite having a .sh extension, you run the command with php: php core/scripts/run-tests.sh --suppress-deprecations tells the script not to count deprecation warnings as test failures --url http://127.0.0.1:8000 tells the script what base url to use for functional tests. If you are using a port other than 8000, you'll need to make sure to update this accordingly --verbose is optional, but useful if you want more feedback from failures --php `which php` tells the script where to find the php executable to use --module \"islandora\" tells the script to run all tests from the islandora module If you want to run just a single class instead of a whole module's worth, you can use the --class option instead of --module . The --class option takes the fully namespaced class name as an argument. For example, to run just the AddMediaToNodeTest : vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --class \"Drupal\\Tests\\islandora\\Functional\\AddMediaToNodeTest\"","title":"Running Tests"},{"location":"technical-documentation/running-automated-tests/#running-automated-tests","text":"","title":"Running Automated Tests"},{"location":"technical-documentation/running-automated-tests/#user-interface","text":"Warning Some of islandora's dependencies include deprecated code. This will cause the tests to fail when run through the GUI. To avoid this, use the command-line method with the --suppress-deprecations tag. To run automated tests via a web browser, you can to Admin > Configuration > Testing (http://localhost:8000/admin/config/development/testing) in the admin toolbar. From there you can browse and search for tests, select the ones you'd like to run. Pressing the blue \"Run Tests\" button will execute all tests you've selected in a batch and then display the results.","title":"User Interface"},{"location":"technical-documentation/running-automated-tests/#command-line","text":"Running tests from the command line utilizes the test runner script provided by Drupal core. From Drupal's web directory, the full command to run is vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --module \"islandora\" Then wait - running these tests may take a while. Let's unpack it: You need to run this as the apache user for filesystem access, hence sudo -u www-data Despite having a .sh extension, you run the command with php: php core/scripts/run-tests.sh --suppress-deprecations tells the script not to count deprecation warnings as test failures --url http://127.0.0.1:8000 tells the script what base url to use for functional tests. If you are using a port other than 8000, you'll need to make sure to update this accordingly --verbose is optional, but useful if you want more feedback from failures --php `which php` tells the script where to find the php executable to use --module \"islandora\" tells the script to run all tests from the islandora module If you want to run just a single class instead of a whole module's worth, you can use the --class option instead of --module . The --class option takes the fully namespaced class name as an argument. For example, to run just the AddMediaToNodeTest : vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --class \"Drupal\\Tests\\islandora\\Functional\\AddMediaToNodeTest\"","title":"Command Line"},{"location":"technical-documentation/testing-notes/","text":"How to find things in Fedora? The map between Drupal URIs and their corresponding Fedora URIs is stored in a service called Gemini. An Islandora \"pseudo-field\" can be enabled that will display the corresponding Fedora URI on the page of a node, taxonomy term, or media object. You can also query Gemini directly. Instructions for doing that are provided below. For more information about the Gemini service, see the Gemini README . Fedora URI Pseudo-field To display the Fedora URI pseudo-field on a Drupal node, media, or taxonomy term, go to Manage > Configuration > Islandora and select all the bundles for which you would like the Fedora URI displayed. A valid Gemini URL is required. On the playbook , Gemini is at http://localhost:8080/gemini. Once you have selected the bundles, and cleared the cache, the new pseudo-field will appear at the bottom of all display modes. You can alter where in the display the Fedora URI field appears, by going to the \"Manage Display\" page for the bundle. For example, for a Repository Item, you'd go to http://localhost:8000/admin/structure/types/manage/islandora_object/display. In that list you should see Fedora URI which you can move around (or hide) as desired. Clearing cache may be necessary to refresh the node display. How to look up a Fedora URI through Gemini (nodes and taxonomy terms) In Gemini, each entry is keyed on the UUID assigned by Drupal (the long one, not the node id). To get the UUID of a node, or taxonomy term in Drupal, you can look in the Devel tab or in the JSON representation, e.g.: http://localhost:8000/node/2?_format=json . Then, query the Gemini REST service (using a REST client such as POSTman, or a command-line tool such as curl ) for that UUID: curl -H \"Authorization:Bearer islandora\" http://localhost:8000/gemini/[uuid_value] Alternatively, you can login to SQL, choose the gemini database, and issue a query. With the playbook's default setup: vagrant ssh mysql -uroot -pislandora gemini select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/node/[nid]?_format=jsonld'; How to look up a Fedora URI through Gemini (files)? Files in Fedora have the file URI in Gemini, and can be queried based on the UUID (accessible from the Media's json) or their URI. select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/_flysystem/fedora/2019-05/639647.jpg'; Media and Gemini Media objects aren't indexed in Gemini. Their Fedora counterparts are located at the Fedora URI of the file, appended with /fcr:metadata . This is an RDF document in Fedora that describes the binary file itself , and it contains all the information describing the file that is present in the fields of the Media. When you enable the pseudo-field on a media object, you see the URI of its Fedora counterpart, file_uri + /fcr:metadata , constructed using the Gemini mapping of its attached file. How do I search for a object in the Solr? Go to http://localhost:8983/solr/#/islandora/query Issue a Solr query. Example ss_search_api_id:\"entity:node/4:en\" Sample Triplestore queries Go to http://localhost:8080/bigdata/#query Under namespaces ( http://localhost:8080/bigdata/#namespaces ), make sure islandora is selected. Find all triples with given object as the subject select ?p ?o where { <drupal_url> ?p ?o } Example: select ?p ?o where { <http://localhost:8000/media/8?_format=jsonld> ?p ?o } Getting objects in a collection select ?s where { ?s <http://pcdm.org/models#memberOf> <drual_url_of_the_collection?_format=jsonld> } Example: select ?s where { ?s <http://pcdm.org/models#memberOf> <http://localhost:8000/node/7?_format=jsonld> } Find all media/files belonging to a node select ?s where { ?s <http://pcdm.org/models#fileOf> <drupal_url_of_the_object?_format=jsonld> } Example: select ?s where { ?s <http://pcdm.org/models#fileOf> <http://localhost:8000/node/4?_format=jsonld> }","title":"Testing Notes"},{"location":"technical-documentation/testing-notes/#how-to-find-things-in-fedora","text":"The map between Drupal URIs and their corresponding Fedora URIs is stored in a service called Gemini. An Islandora \"pseudo-field\" can be enabled that will display the corresponding Fedora URI on the page of a node, taxonomy term, or media object. You can also query Gemini directly. Instructions for doing that are provided below. For more information about the Gemini service, see the Gemini README .","title":"How to find things in Fedora?"},{"location":"technical-documentation/testing-notes/#fedora-uri-pseudo-field","text":"To display the Fedora URI pseudo-field on a Drupal node, media, or taxonomy term, go to Manage > Configuration > Islandora and select all the bundles for which you would like the Fedora URI displayed. A valid Gemini URL is required. On the playbook , Gemini is at http://localhost:8080/gemini. Once you have selected the bundles, and cleared the cache, the new pseudo-field will appear at the bottom of all display modes. You can alter where in the display the Fedora URI field appears, by going to the \"Manage Display\" page for the bundle. For example, for a Repository Item, you'd go to http://localhost:8000/admin/structure/types/manage/islandora_object/display. In that list you should see Fedora URI which you can move around (or hide) as desired. Clearing cache may be necessary to refresh the node display.","title":"Fedora URI Pseudo-field"},{"location":"technical-documentation/testing-notes/#how-to-look-up-a-fedora-uri-through-gemini-nodes-and-taxonomy-terms","text":"In Gemini, each entry is keyed on the UUID assigned by Drupal (the long one, not the node id). To get the UUID of a node, or taxonomy term in Drupal, you can look in the Devel tab or in the JSON representation, e.g.: http://localhost:8000/node/2?_format=json . Then, query the Gemini REST service (using a REST client such as POSTman, or a command-line tool such as curl ) for that UUID: curl -H \"Authorization:Bearer islandora\" http://localhost:8000/gemini/[uuid_value] Alternatively, you can login to SQL, choose the gemini database, and issue a query. With the playbook's default setup: vagrant ssh mysql -uroot -pislandora gemini select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/node/[nid]?_format=jsonld';","title":"How to look up a Fedora URI through Gemini (nodes and taxonomy terms)"},{"location":"technical-documentation/testing-notes/#how-to-look-up-a-fedora-uri-through-gemini-files","text":"Files in Fedora have the file URI in Gemini, and can be queried based on the UUID (accessible from the Media's json) or their URI. select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/_flysystem/fedora/2019-05/639647.jpg';","title":"How to look up a Fedora URI through Gemini (files)?"},{"location":"technical-documentation/testing-notes/#media-and-gemini","text":"Media objects aren't indexed in Gemini. Their Fedora counterparts are located at the Fedora URI of the file, appended with /fcr:metadata . This is an RDF document in Fedora that describes the binary file itself , and it contains all the information describing the file that is present in the fields of the Media. When you enable the pseudo-field on a media object, you see the URI of its Fedora counterpart, file_uri + /fcr:metadata , constructed using the Gemini mapping of its attached file.","title":"Media and Gemini"},{"location":"technical-documentation/testing-notes/#how-do-i-search-for-a-object-in-the-solr","text":"Go to http://localhost:8983/solr/#/islandora/query Issue a Solr query. Example ss_search_api_id:\"entity:node/4:en\"","title":"How do I search for a object in the Solr?"},{"location":"technical-documentation/testing-notes/#sample-triplestore-queries","text":"Go to http://localhost:8080/bigdata/#query Under namespaces ( http://localhost:8080/bigdata/#namespaces ), make sure islandora is selected.","title":"Sample Triplestore queries"},{"location":"technical-documentation/testing-notes/#find-all-triples-with-given-object-as-the-subject","text":"select ?p ?o where { <drupal_url> ?p ?o } Example: select ?p ?o where { <http://localhost:8000/media/8?_format=jsonld> ?p ?o }","title":"Find all triples with given object as the subject"},{"location":"technical-documentation/testing-notes/#getting-objects-in-a-collection","text":"select ?s where { ?s <http://pcdm.org/models#memberOf> <drual_url_of_the_collection?_format=jsonld> } Example: select ?s where { ?s <http://pcdm.org/models#memberOf> <http://localhost:8000/node/7?_format=jsonld> }","title":"Getting objects in a collection"},{"location":"technical-documentation/testing-notes/#find-all-mediafiles-belonging-to-a-node","text":"select ?s where { ?s <http://pcdm.org/models#fileOf> <drupal_url_of_the_object?_format=jsonld> } Example: select ?s where { ?s <http://pcdm.org/models#fileOf> <http://localhost:8000/node/4?_format=jsonld> }","title":"Find all media/files belonging to a node"},{"location":"technical-documentation/updating_drupal/","text":"Updating Drupal Introduction This section describes how to update Drupal and its modules using Composer. If you installed Islandora using the Islandora Playbook, then your Drupal was installed by Composer, so it is considered best practice to continue using Composer for updates. The method on this section is not specific to Islandora, and does not (yet) include how to update Islandora Features. What is Composer It is recommended by Drupal.org and the Islandora 8 community to use Composer with Drupal 8 for various tasks. \" Composer is a dependency manager for PHP. Drupal core uses Composer to manage core dependencies like Symfony components and Guzzle.\" [ Source ] Always create backs ups (DB and files) before updating Before updating either Drupal core or Drupal modules: * Back up both your files and database. Having a complete backup makes it easy to revert to the prior version if the update fails. * Optionally, if you made manual modifications to files like .htaccess, composer.json, or robots.txt, copy them somewhere easy to find. Because after you've installed the new Drupal core, you will need to re-apply the changes. For example, Acquia Dev Desktop places a .htaccess file in the top-level directory and without it, only the homepage on your site will work. Warning: Always revert to a backup if you get a fatal error in the update process. Updating Drupal Core Over time new versions of Drupal \u201ccore\u201d are released, and Islandora users are encouraged to install official Drupal core updates and security patches. On the other hand \u201calpha\u201d and \u201cbeta\" versions of Drupal core should only be installed by advanced users for testing purposes. The Islandora community STRONGLY recommends that the \"Composer\" method of upgrading Drupal core be used with Islandora 8 as mentioned here . Here is an overview of the steps for updating Drupal core using Composer Back Up First make sure you have made database and file back ups. 1) First, verify that an update of Drupal core actually is available: composer outdated \"drupal/*\" If there is no line starting with drupal/core, Composer isn't aware of any update. If there is an update, continue with the commands below. 2) Assuming you are used to updating Drupal and know all the precautions that you should take, the update is as simple as: composer update drupal/core webflo/drupal-core-require-dev \"symfony/*\" --with-dependencies If you want to know all packages that will be updated by the update command, use the --dry-run option first. Alternate syntax needed Islandora 8 is configured to use a fork of drupal-composer/drupal-project which requires a specific composer syntax used above compared to other Drupal 8 sites. In addition, if you are upgrading from 8.5 to 8.7, you need to replace \"~8.5.x\" with \"^8.7.0\" for drupal/core and webflo/drupal-core-require-dev in composer.json. [ Source ] 3) Apply any required database updates using drush updatedb , or use the web admin user interface. drush updatedb 4) Clear the cache using drush cache:rebuild , or use the web admin user interface. drush cache:rebuild' For stepwise update instructions visit this page: https://www.drupal.org/docs/8/update/update-core-via-composer#s-stepwise-update-instructions Updating Drupal Modules Islandora 8 uses several general Drupal modules and some specialized Islandora Drupal modules, and over time new versions of these modules are released. There are two approaches to updating Drupal modules in Islandora: using Composer or updating modules individually. Islandora 8 uses Composer to determine which Drupal module versions should be installed for each release of Islandora 8. Therefore if you update the Islandora specific Drupal modules using Composer you will also update any dependent general Drupal modules as well. The second method is to individually update Drupal modules. For more information about how to update Drupal modules visit: https://www.drupal.org/docs/8/extending-drupal-8/updating-modules Back Up First make sure you have made database and file back ups.","title":"Updating Drupal"},{"location":"technical-documentation/updating_drupal/#updating-drupal","text":"","title":"Updating Drupal"},{"location":"technical-documentation/updating_drupal/#introduction","text":"This section describes how to update Drupal and its modules using Composer. If you installed Islandora using the Islandora Playbook, then your Drupal was installed by Composer, so it is considered best practice to continue using Composer for updates. The method on this section is not specific to Islandora, and does not (yet) include how to update Islandora Features.","title":"Introduction"},{"location":"technical-documentation/updating_drupal/#what-is-composer","text":"It is recommended by Drupal.org and the Islandora 8 community to use Composer with Drupal 8 for various tasks. \" Composer is a dependency manager for PHP. Drupal core uses Composer to manage core dependencies like Symfony components and Guzzle.\" [ Source ]","title":"What is Composer"},{"location":"technical-documentation/updating_drupal/#always-create-backs-ups-db-and-files-before-updating","text":"Before updating either Drupal core or Drupal modules: * Back up both your files and database. Having a complete backup makes it easy to revert to the prior version if the update fails. * Optionally, if you made manual modifications to files like .htaccess, composer.json, or robots.txt, copy them somewhere easy to find. Because after you've installed the new Drupal core, you will need to re-apply the changes. For example, Acquia Dev Desktop places a .htaccess file in the top-level directory and without it, only the homepage on your site will work. Warning: Always revert to a backup if you get a fatal error in the update process.","title":"Always create backs ups (DB and files) before updating"},{"location":"technical-documentation/updating_drupal/#updating-drupal-core","text":"Over time new versions of Drupal \u201ccore\u201d are released, and Islandora users are encouraged to install official Drupal core updates and security patches. On the other hand \u201calpha\u201d and \u201cbeta\" versions of Drupal core should only be installed by advanced users for testing purposes. The Islandora community STRONGLY recommends that the \"Composer\" method of upgrading Drupal core be used with Islandora 8 as mentioned here .","title":"Updating Drupal Core"},{"location":"technical-documentation/updating_drupal/#here-is-an-overview-of-the-steps-for-updating-drupal-core-using-composer","text":"Back Up First make sure you have made database and file back ups. 1) First, verify that an update of Drupal core actually is available: composer outdated \"drupal/*\" If there is no line starting with drupal/core, Composer isn't aware of any update. If there is an update, continue with the commands below. 2) Assuming you are used to updating Drupal and know all the precautions that you should take, the update is as simple as: composer update drupal/core webflo/drupal-core-require-dev \"symfony/*\" --with-dependencies If you want to know all packages that will be updated by the update command, use the --dry-run option first. Alternate syntax needed Islandora 8 is configured to use a fork of drupal-composer/drupal-project which requires a specific composer syntax used above compared to other Drupal 8 sites. In addition, if you are upgrading from 8.5 to 8.7, you need to replace \"~8.5.x\" with \"^8.7.0\" for drupal/core and webflo/drupal-core-require-dev in composer.json. [ Source ] 3) Apply any required database updates using drush updatedb , or use the web admin user interface. drush updatedb 4) Clear the cache using drush cache:rebuild , or use the web admin user interface. drush cache:rebuild' For stepwise update instructions visit this page: https://www.drupal.org/docs/8/update/update-core-via-composer#s-stepwise-update-instructions","title":"Here is an overview of the steps for updating Drupal core using Composer"},{"location":"technical-documentation/updating_drupal/#updating-drupal-modules","text":"Islandora 8 uses several general Drupal modules and some specialized Islandora Drupal modules, and over time new versions of these modules are released. There are two approaches to updating Drupal modules in Islandora: using Composer or updating modules individually. Islandora 8 uses Composer to determine which Drupal module versions should be installed for each release of Islandora 8. Therefore if you update the Islandora specific Drupal modules using Composer you will also update any dependent general Drupal modules as well. The second method is to individually update Drupal modules. For more information about how to update Drupal modules visit: https://www.drupal.org/docs/8/extending-drupal-8/updating-modules Back Up First make sure you have made database and file back ups.","title":"Updating Drupal Modules"},{"location":"technical-documentation/uploading-large-files/","text":"If you want to upload large (> 1GB) files, you'll need to tune the following settings in your php.ini : upload_max_filesize \u2013 The maximum allowed upload file size. post_max_size \u2013 The maximum allowed POST data size. max_input_time \u2013 Maximum allowed input time. max_execution_time \u2013 The maximum allowed time the scripts are allowed to run. However, large file transfer over HTTP still has a host of issues once you properly configure your server. Uploads are not resumable and subject to connectivity issues. If you really want to upload large files, you should consider some alternatives such as Robertson library's TUS module, which will let you upload large files in forms. Using flysystem 's ftp and sftp plugins to make files available if you can run an FTP server.","title":"Uploading large files"},{"location":"technical-documentation/using-rest-endpoints/","text":"Islandora 8 via REST Each node, media and file in Drupal 8 has its own URI and we can GET the resources, some in a variety of formats. We can also create nodes, media and files in Drupal by using PUT and/or POST requests. We can update the field content by using a PATCH request and lastly we can DELETE a node, media or file resource. To perform these actions, you will need the RESTful Web Services module enabled. To configure your setup via the UI, you also need the RESTful UI module enabled. Then you can configure your REST services at https://<yourmachine>/admin/config/services/rest This screenshot shows the setup for resources, you can see the various HTTP methods and what formats they will respond in and what authentication methods they support. Authorization Getting resources - GET Creating resources - POST/PUT Updating resources - PATCH Deleting resources - DELETE Authorization If your resources are restricted (hidden) you will need to have authorization to access them. You can specify which types of authentication are allowed for which HTTP methods. These are common to all HTTP methods against the REST API. In the above screenshot we have 3 allowed methods. 1. basic_auth 1. jwt_auth 1. cookie Basic authentication (basic_auth) To use basic authentication with a client like cURL use the -u username:password argument. For example: curl -u admin:islandora http://localhost:8000/node/3 JWT authentication (jwt_auth) By default JWTs are passed internally from Drupal to various microservices and Fedora. To use a JWT yourself you need to enable the JWT Authentication Issuer module. Once enabled this module makes a /jwt/token endpoint. You can perform a GET against this endpoint as an authenticated user to receive a JWT. For example: curl -i -u admin:islandora http://localhost:8000/jwt/token HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:08:37 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 620 Content-Type: application/json { \"token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\" } You can then take the same token and re-use it. curl -H\"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\" http://localhost:8000/node/3?_format=jsonld HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:10:02 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/node/3>; rel=\"canonical\" Link: <http://localhost:8000/node/3/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=3>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/3/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/3/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/3>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=3>; rel=\"https://drupal.org/link-relations/create\" Link: <http://purl.org/coar/resource_type/c_c513>; rel=\"tag\"; title=\"Image\" Link: <http://localhost:8000/media/1>; rel=\"related\"; title=\"Original File\" Link: <http://localhost:8000/media/2>; rel=\"related\"; title=\"Service File\" Link: <http://localhost:8000/media/3>; rel=\"related\"; title=\"Thumbnail Image\" Link: <http://localhost:8000/node/3?_format=json>; rel=\"alternate\"; type=\"application/json\" X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 858 Content-Type: application/ld+json { \"@graph\": [ { \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/node\\\\/3?_format=jsonld\", \"@type\": [ \"http:\\\\/\\\\/pcdm.org\\\\/models#Object\" ], \"http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/title\": [ { \"@value\": \"Custom item\", \"@language\": \"en\" } ], \"http:\\\\/\\\\/schema.org\\\\/author\": [ { \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\" } ], \"http:\\\\/\\\\/schema.org\\\\/dateCreated\": [ { \"@value\": \"2019-03-01T19:42:54+00:00\", \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\" } ], \"http:\\\\/\\\\/schema.org\\\\/dateModified\": [ { \"@value\": \"2019-03-01T19:43:12+00:00\", \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\" } ], \"http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/extent\": [ { \"@value\": \"1 item\", \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#string\" } ], \"http:\\\\/\\\\/schema.org\\\\/sameAs\": [ { \"@value\": \"http:\\\\/\\\\/localhost:8000\\\\/node\\\\/1?_format=jsonld\" } ] }, { \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\", \"@type\": [ \"http:\\\\/\\\\/schema.org\\\\/Person\" ] } ] } Cookie authentication (cookie) This allows you to use a cookie stored in your web browser when you log in to Drupal to access these REST endpoint pages. This is what allows you to access the URIs like http://localhost:8000/node/1?_format=json with your web browser.","title":"Introduction"},{"location":"technical-documentation/using-rest-endpoints/#islandora-8-via-rest","text":"Each node, media and file in Drupal 8 has its own URI and we can GET the resources, some in a variety of formats. We can also create nodes, media and files in Drupal by using PUT and/or POST requests. We can update the field content by using a PATCH request and lastly we can DELETE a node, media or file resource. To perform these actions, you will need the RESTful Web Services module enabled. To configure your setup via the UI, you also need the RESTful UI module enabled. Then you can configure your REST services at https://<yourmachine>/admin/config/services/rest This screenshot shows the setup for resources, you can see the various HTTP methods and what formats they will respond in and what authentication methods they support. Authorization Getting resources - GET Creating resources - POST/PUT Updating resources - PATCH Deleting resources - DELETE","title":"Islandora 8 via REST"},{"location":"technical-documentation/using-rest-endpoints/#authorization","text":"If your resources are restricted (hidden) you will need to have authorization to access them. You can specify which types of authentication are allowed for which HTTP methods. These are common to all HTTP methods against the REST API. In the above screenshot we have 3 allowed methods. 1. basic_auth 1. jwt_auth 1. cookie","title":"Authorization"},{"location":"technical-documentation/using-rest-endpoints/#basic-authentication-basic_auth","text":"To use basic authentication with a client like cURL use the -u username:password argument. For example: curl -u admin:islandora http://localhost:8000/node/3","title":"Basic authentication (basic_auth)"},{"location":"technical-documentation/using-rest-endpoints/#jwt-authentication-jwt_auth","text":"By default JWTs are passed internally from Drupal to various microservices and Fedora. To use a JWT yourself you need to enable the JWT Authentication Issuer module. Once enabled this module makes a /jwt/token endpoint. You can perform a GET against this endpoint as an authenticated user to receive a JWT. For example: curl -i -u admin:islandora http://localhost:8000/jwt/token HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:08:37 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 620 Content-Type: application/json { \"token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\" } You can then take the same token and re-use it. curl -H\"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\" http://localhost:8000/node/3?_format=jsonld HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:10:02 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: <http://localhost:8000/node/3>; rel=\"canonical\" Link: <http://localhost:8000/node/3/delete>; rel=\"https://drupal.org/link-relations/delete-form\" Link: <http://localhost:8000/admin/content/node/delete?node=3>; rel=\"https://drupal.org/link-relations/delete-multiple-form\" Link: <http://localhost:8000/node/3/edit>; rel=\"edit-form\" Link: <http://localhost:8000/node/3/revisions>; rel=\"version-history\" Link: <http://localhost:8000/node/3>; rel=\"https://drupal.org/link-relations/revision\" Link: <http://localhost:8000/node?node=3>; rel=\"https://drupal.org/link-relations/create\" Link: <http://purl.org/coar/resource_type/c_c513>; rel=\"tag\"; title=\"Image\" Link: <http://localhost:8000/media/1>; rel=\"related\"; title=\"Original File\" Link: <http://localhost:8000/media/2>; rel=\"related\"; title=\"Service File\" Link: <http://localhost:8000/media/3>; rel=\"related\"; title=\"Thumbnail Image\" Link: <http://localhost:8000/node/3?_format=json>; rel=\"alternate\"; type=\"application/json\" X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 858 Content-Type: application/ld+json { \"@graph\": [ { \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/node\\\\/3?_format=jsonld\", \"@type\": [ \"http:\\\\/\\\\/pcdm.org\\\\/models#Object\" ], \"http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/title\": [ { \"@value\": \"Custom item\", \"@language\": \"en\" } ], \"http:\\\\/\\\\/schema.org\\\\/author\": [ { \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\" } ], \"http:\\\\/\\\\/schema.org\\\\/dateCreated\": [ { \"@value\": \"2019-03-01T19:42:54+00:00\", \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\" } ], \"http:\\\\/\\\\/schema.org\\\\/dateModified\": [ { \"@value\": \"2019-03-01T19:43:12+00:00\", \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\" } ], \"http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/extent\": [ { \"@value\": \"1 item\", \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#string\" } ], \"http:\\\\/\\\\/schema.org\\\\/sameAs\": [ { \"@value\": \"http:\\\\/\\\\/localhost:8000\\\\/node\\\\/1?_format=jsonld\" } ] }, { \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\", \"@type\": [ \"http:\\\\/\\\\/schema.org\\\\/Person\" ] } ] }","title":"JWT authentication (jwt_auth)"},{"location":"technical-documentation/using-rest-endpoints/#cookie-authentication-cookie","text":"This allows you to use a cookie stored in your web browser when you log in to Drupal to access these REST endpoint pages. This is what allows you to access the URIs like http://localhost:8000/node/1?_format=json with your web browser.","title":"Cookie authentication (cookie)"},{"location":"technical-documentation/versioning/","text":"Versioning Policy Islandora 8 uses semantic versioning, except for Drupal modules/themes. Semantic Versioning Major version . Minor version . Patch Major version ; Major changes, and breaks the API Minor version ; New features, and does not break the API Patch ; Bug fixes, and never breaks backward compatibility Examples: 1.2.3 => 1.2.4 - Just a bug fix, should be a drop-in replacement. 1.2.3 => 1.3.0 - Adds in new features, should be a drop-in replacement to get new functionality. 1.2.3 => 2.0.0 - Major changes, may require a migration or changes to your set-up. The following Islandora 8 components use semantic versioning: Alpaca Chullo Crayfish Crayfish Commons Syn Drupal Contrib Versioning Core Compatibility - Major . PatchLevel[-Extra] Examples: 8.x-1.0 => 8.x-1.1 - Just a bug fix, should be a drop-in replacement. 8.x-1.0 => 8.x-2.0 - Major changes, could require a migration or changes to your set-up. The 8.x- part will not change to 9.x- until Drupal 9. The following Islandora 8 components use Drupal Contrib versioning: carapace controlled_access_terms drupal-project islandora islandora_defaults jsonld openseadragon This list does not include sub-modules which share versions with their parents. ie. Islandora Audio , Islandora IIIF and Islandora Breadcrumbs are all sub-modules of Islandora and shares its version.","title":"Versioning Policy"},{"location":"technical-documentation/versioning/#versioning-policy","text":"Islandora 8 uses semantic versioning, except for Drupal modules/themes.","title":"Versioning Policy"},{"location":"technical-documentation/versioning/#semantic-versioning","text":"Major version . Minor version . Patch Major version ; Major changes, and breaks the API Minor version ; New features, and does not break the API Patch ; Bug fixes, and never breaks backward compatibility Examples: 1.2.3 => 1.2.4 - Just a bug fix, should be a drop-in replacement. 1.2.3 => 1.3.0 - Adds in new features, should be a drop-in replacement to get new functionality. 1.2.3 => 2.0.0 - Major changes, may require a migration or changes to your set-up. The following Islandora 8 components use semantic versioning: Alpaca Chullo Crayfish Crayfish Commons Syn","title":"Semantic Versioning"},{"location":"technical-documentation/versioning/#drupal-contrib-versioning","text":"Core Compatibility - Major . PatchLevel[-Extra] Examples: 8.x-1.0 => 8.x-1.1 - Just a bug fix, should be a drop-in replacement. 8.x-1.0 => 8.x-2.0 - Major changes, could require a migration or changes to your set-up. The 8.x- part will not change to 9.x- until Drupal 9. The following Islandora 8 components use Drupal Contrib versioning: carapace controlled_access_terms drupal-project islandora islandora_defaults jsonld openseadragon This list does not include sub-modules which share versions with their parents. ie. Islandora Audio , Islandora IIIF and Islandora Breadcrumbs are all sub-modules of Islandora and shares its version.","title":"Drupal Contrib Versioning"},{"location":"user-documentation/accessibility/","text":"Islandora 8's accessibility features are currently provided by Drupal 8 and contributed Drupal 8 modules. These pages within the Accessibility section of the Drupal documentation can provide guidance: Drupal 8 Accessibility Features (included in core Drupal) Contributed Modules for Extending Accessibility in Drupal 8 Hiding Content Properly (for all users including users with screen readers) How to do an accessibility review? List of External Accessibility Resources","title":"Accessibility"},{"location":"user-documentation/blocks/","text":"Using Block Layout In Drupal, blocks are snippets of content that can be placed on pages within your website's layout. Some examples of blocks are your site's menu, breadcrumbs, search block, etc... You have a lot of control over when and where you see blocks using Drupal's administrative interface. You can create and delete blocks, as well as move them around in different locations on the page (called 'regions' in Drupal theme terminology). You can also control on which pages the blocks are visible, allowing you to conditionally show/hide them as appropriate. Blocks are made available to place by enabling the Drupal modules that provide them, and there's lots out there to choose from. Placing blocks is an essential skill for any site administrator, so let's jump right in and get our hands dirty. Using the admin toolbar, navigate to Admin > Structure > Block layout (admin/structure/block). You will see a table listing all of the available regions provided by the current theme for block placement. You can switch between available themes using the tabs above the table. For each region, enabled blocks are listed and can be re-arranged. Take a look at the \"Main Content\" region for example. If you wanted to move the content above its tabs, you could drag the \"Main page content\" block above the \"Tabs\" block. If you scroll all the way down to the bottom and click the \"Save blocks\" button, now when you go to view content you should see something like this If you want to add a new block to a region, hit the \"Place block\" button for that region and you'll be brought to a modal that will let you select which block to place. After selecting your block, you will be brought to its configuration form. Here you can give the block a different title, change its region using a dropdown, and control its visibility settings by configuring various conditions. In our case, we're adding the \"Development\" block to the \"Footer\" region. And since we want to see this block everywhere, we'll leave the visibility settings alone for now. Click the \"Save block\" button, and now if we go view some content we should see the \"Development\" menu in the footer of our site. If we want to limit this eyesore to only the front page of our site, we can revisit the visibility settings of the block. Navigate to the block we just placed on the block placement page, and click its \"Configure\" button. Here you can limit the block to show only for certain roles or content types. You can also explicitly set a white or black list of pages, which is what we'll do. Click the Pages tab and you'll have a text area you can list pages in. We're going to enter <front> , which is a special value that means \"The front page of your site\". Underneath the text area, you can select whether you are showing or hiding the block for this list of pages. We want to show this only on the front page, so we'll leave it set at \"Show for the listed pages\". Click \"Save block\" and go back to a piece of content. You shouldn't see the development menu. But go to the frontpage and... Using Context The visibility conditions in the block placement user interface are simple and effective. They cover the majority of use cases, however, there are times when you need even more control. This is where the Context module really shines. Any condition available to the Context module can be used to control block visibility. And you can even combine conditions using Boolean (AND/OR) logic. For example, in the islandora_defaults feature, we provide a context specifically for showing a list of members of a collection. All of our content is the same content type (Repository Item), and Collections are distinguished by being tagged with the \"Collection\" taxonomy term. Using the admin toolbar, if you navigate to Admin > Structure > Context (admin/structure/context), you should see a list of all contexts available to the site. Click the \"Configure\" button on the \"Collection\" context. You can see in its \"Condition\" section, we have the \"Node has term\" condition, which checks for content tagged with the term provided by the user. In this case, it's set to look for the \"Collection\" tag. Underneath, in the \"Reaction\" section, you can see that the \"Block\" reaction has been selected, and its configuration looks a lot like the core block placement UI. The only difference here is that when the \"Include blocks from block layout\" box is checked, you are only placing the blocks you want to add in addition to an already existing block layout. If you uncheck the box, you are creating an entirely new block layout from scratch, and will have to replace basic things like breadcrumbs and menus. Here you can see we've added only the members block to this block layout. If we go and navigate to a collection, you'll see its list of members underneath its content. If we edit the collection and change its model tag from \"Collection\" to anything else, you'll see the block disappears! As you can see, block placement can be very flexible, and allow you to customize your site in a very granular fashion. Between using core block placement and the context module, there's no block you can't get into the right place on your site. Islandora Quick Lessons Learn more with this video on Creating a Custom Block .","title":"Blocks"},{"location":"user-documentation/blocks/#using-block-layout","text":"In Drupal, blocks are snippets of content that can be placed on pages within your website's layout. Some examples of blocks are your site's menu, breadcrumbs, search block, etc... You have a lot of control over when and where you see blocks using Drupal's administrative interface. You can create and delete blocks, as well as move them around in different locations on the page (called 'regions' in Drupal theme terminology). You can also control on which pages the blocks are visible, allowing you to conditionally show/hide them as appropriate. Blocks are made available to place by enabling the Drupal modules that provide them, and there's lots out there to choose from. Placing blocks is an essential skill for any site administrator, so let's jump right in and get our hands dirty. Using the admin toolbar, navigate to Admin > Structure > Block layout (admin/structure/block). You will see a table listing all of the available regions provided by the current theme for block placement. You can switch between available themes using the tabs above the table. For each region, enabled blocks are listed and can be re-arranged. Take a look at the \"Main Content\" region for example. If you wanted to move the content above its tabs, you could drag the \"Main page content\" block above the \"Tabs\" block. If you scroll all the way down to the bottom and click the \"Save blocks\" button, now when you go to view content you should see something like this If you want to add a new block to a region, hit the \"Place block\" button for that region and you'll be brought to a modal that will let you select which block to place. After selecting your block, you will be brought to its configuration form. Here you can give the block a different title, change its region using a dropdown, and control its visibility settings by configuring various conditions. In our case, we're adding the \"Development\" block to the \"Footer\" region. And since we want to see this block everywhere, we'll leave the visibility settings alone for now. Click the \"Save block\" button, and now if we go view some content we should see the \"Development\" menu in the footer of our site. If we want to limit this eyesore to only the front page of our site, we can revisit the visibility settings of the block. Navigate to the block we just placed on the block placement page, and click its \"Configure\" button. Here you can limit the block to show only for certain roles or content types. You can also explicitly set a white or black list of pages, which is what we'll do. Click the Pages tab and you'll have a text area you can list pages in. We're going to enter <front> , which is a special value that means \"The front page of your site\". Underneath the text area, you can select whether you are showing or hiding the block for this list of pages. We want to show this only on the front page, so we'll leave it set at \"Show for the listed pages\". Click \"Save block\" and go back to a piece of content. You shouldn't see the development menu. But go to the frontpage and...","title":"Using Block Layout"},{"location":"user-documentation/blocks/#using-context","text":"The visibility conditions in the block placement user interface are simple and effective. They cover the majority of use cases, however, there are times when you need even more control. This is where the Context module really shines. Any condition available to the Context module can be used to control block visibility. And you can even combine conditions using Boolean (AND/OR) logic. For example, in the islandora_defaults feature, we provide a context specifically for showing a list of members of a collection. All of our content is the same content type (Repository Item), and Collections are distinguished by being tagged with the \"Collection\" taxonomy term. Using the admin toolbar, if you navigate to Admin > Structure > Context (admin/structure/context), you should see a list of all contexts available to the site. Click the \"Configure\" button on the \"Collection\" context. You can see in its \"Condition\" section, we have the \"Node has term\" condition, which checks for content tagged with the term provided by the user. In this case, it's set to look for the \"Collection\" tag. Underneath, in the \"Reaction\" section, you can see that the \"Block\" reaction has been selected, and its configuration looks a lot like the core block placement UI. The only difference here is that when the \"Include blocks from block layout\" box is checked, you are only placing the blocks you want to add in addition to an already existing block layout. If you uncheck the box, you are creating an entirely new block layout from scratch, and will have to replace basic things like breadcrumbs and menus. Here you can see we've added only the members block to this block layout. If we go and navigate to a collection, you'll see its list of members underneath its content. If we edit the collection and change its model tag from \"Collection\" to anything else, you'll see the block disappears! As you can see, block placement can be very flexible, and allow you to customize your site in a very granular fashion. Between using core block placement and the context module, there's no block you can't get into the right place on your site. Islandora Quick Lessons Learn more with this video on Creating a Custom Block .","title":"Using Context"},{"location":"user-documentation/collections/","text":"Collections are groups of repository content that can be described themselves. Repository content is aggregated in a collection by setting the field_member_of entity reference field to point to a collection. Generally speaking, anything can behave as a collection, and anything with field_member_of can be a member of a collection. However, Islandora provides a \"Collection\" taxonomy term in the Islandora Models vocabulary that can be used to trigger collection-specific behavior. For example, a context provided by Islandora Defaults will display a list of child resource node teasers on the resources' display page when this term is applied to the field_model field. Collections and Deleting Collections and their members are independent of each other, and removing something from a collection does not delete it. Similarly, deleting a collection does not delete its members. Creating a Collection When logged in as an administrator, click the Content button under the Manage tab. Click on Add content . Then click on 'Repository Item' to give your collection the default metadata profile for Islandora 8. Fill out the form. Near the end of the form, under System, select Collection from the Model dropdown list. Click Save when done. The collection has been created. Now let's add some members to this collection. Add Existing Items to a Collection To populate a collection with existing items, return to any existing content and click on its Edit tab. This brings up the form for this item. Scroll down to the bottom and the System section. In the Member of section, start typing in the name of the collection this item should belong to. Select the name of the collection you want from the autocomplete. The correct collection is now selected. Click Save when ready. To confirm, return to the collection and verify the new item appears in the collection's 'Members' block. Add a New Item as a Member of a Collection To create an item and add it as a member to a collection in one step, visit a collection and click on its Members tab. From the Members tab, you can manage the members of a collection and perform actions on them. Click on the +Add member button, and then select 'Repository Item' to give your new item a Content Type. Only content types that have the field_member_of field will be available from this list. You are taken to the creation form for a Repository Item, but if you scroll down to the System section, you should see the widget for 'Member Of' is already filled out for you with the appropriate collection. Click 'Save' at the end of the form to create the new item and add it as a member of the collection. Islandora Quick Lessons Learn more with this video on Making a Collection .","title":"Collections"},{"location":"user-documentation/collections/#creating-a-collection","text":"When logged in as an administrator, click the Content button under the Manage tab. Click on Add content . Then click on 'Repository Item' to give your collection the default metadata profile for Islandora 8. Fill out the form. Near the end of the form, under System, select Collection from the Model dropdown list. Click Save when done. The collection has been created. Now let's add some members to this collection.","title":"Creating a Collection"},{"location":"user-documentation/collections/#add-existing-items-to-a-collection","text":"To populate a collection with existing items, return to any existing content and click on its Edit tab. This brings up the form for this item. Scroll down to the bottom and the System section. In the Member of section, start typing in the name of the collection this item should belong to. Select the name of the collection you want from the autocomplete. The correct collection is now selected. Click Save when ready. To confirm, return to the collection and verify the new item appears in the collection's 'Members' block.","title":"Add Existing Items to a Collection"},{"location":"user-documentation/collections/#add-a-new-item-as-a-member-of-a-collection","text":"To create an item and add it as a member to a collection in one step, visit a collection and click on its Members tab. From the Members tab, you can manage the members of a collection and perform actions on them. Click on the +Add member button, and then select 'Repository Item' to give your new item a Content Type. Only content types that have the field_member_of field will be available from this list. You are taken to the creation form for a Repository Item, but if you scroll down to the System section, you should see the widget for 'Member Of' is already filled out for you with the appropriate collection. Click 'Save' at the end of the form to create the new item and add it as a member of the collection. Islandora Quick Lessons Learn more with this video on Making a Collection .","title":"Add a New Item as a Member of a Collection"},{"location":"user-documentation/content_types/","text":"Create / Update a Content Type Islandora Demo The screenshots and pre-existing data in this documentation assume that you are using the Islandora Defaults configuration. Graphical User Interface This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation. Since objects in Islandora 8 are stored in Drupal as Nodes, we use the standard Drupal Content Types system to create and edit our \u2018ingest forms\u2019 Content Types in Drupal 8 . Islandora 8 forms are Drupal forms, and if you are already familiar with Drupal Field UI, you\u2019re already well equipped to create and modify your own ingest forms in Islandora 8. This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation. Modify a Content Type If you have deployed your Islandora 8 with the Islandora Demo configuration, you will already have a Repository Item content type available, with pre-configured fields. In the Admin menu, go to Structure >> Content Types and find the Repository Item content type. Select Manage Fields . You will see a list of the fields that are already available in the Repository Item content type. Add a Field Let\u2019s add a new field where a user can indicate if the repository item needs to be reviewed: Click \u201cAdd Field\u201d In some cases an existing field may be available to use instead of creating a new one. The dropdown box labeled 'Re-use an existing field' has a list of available fields. For our example we will create a brand-new field. Since our example field is a \u201cyes/no\u201d decision (whether the item needs review or not), choose \"Boolean\" from the dropdown menu and give the Label field a name. See the list of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters for descriptions of the different types available by default. Additional modules, such as the controlled_access_terms module, can provide their own Field types to choose from as well. Click \"Save and continue.\" Next, configure how the field is stored in the Drupal database. For this field type you can select how many values will be allowed. The default settings, \"Limited\" in the dropdown box and \"1\" for the allowed number of values works for our example. Click \"Save field settings.\" Then configure how the field is described (including its display label and the help text for when it appears on a form) and constraints on its use. In this case, the field will be required for this Content Type, and will be set to \u201con\u201d by default. In the \"Default Value\" section, click the checkbox next to \"Needs Review\" to indicate all new repository items need review by default. Click \"Save settings.\" The new field has been added: And it appears in the ingest form when we try to create a new repository object. To test this, go to Content >> Add content >> Repository item: RDF Mappings New fields, with the exception of Typed Relation fields, are not automatically indexed in Fedora and the triple-store. Update the Content Type's RDF Mapping to enable indexing the field (see below). Search New fields will not automatically be searchable. They need to be added to the SOLR index configuration. See the 'Setup and Configure Search' page for more information. Context To add new behavior based on the results of this new field, check out Context . Change the Form Display Now let\u2019s move our new field to a different part of the form. In the Admin menu, return to Structure > Content Types and find the Repository Item content type again. Select Manage form display. All of the fields in this content type are available, in a list, with a simple drag-and-place UI. Drag the new field to the top of the form. We can also change the way the Boolean options are displayed, with radio buttons as opposed to a single checkbox. Different display options will be available from the dropdown menu depending on field type. For more information, please check out List of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters Save. When creating a new Repository Item, the new field appears at the top, as a set of radio buttons. Change the Content Display Finally, let\u2019s change how the results of this field are displayed. Initially the new field shows up at the bottom of repository object pages: In the Admin menu, return to Structure > Content Types and find the Repository Item content type again. Select Manage display from the dropdown menu. Find the new field. You can change how the field title or Label is displayed. Click the dropdown menu to choose from inline/above/hidden/visually hidden. You can also replace the options displayed with variations on a binary choice. Click the gear to choose from the following: On/Off, Yes/No, Enabled/Disabled, 1/0. checkmark/X, or hide the field completely. You can also drag the field into the Disabled section so that neither its label or its contents appear in the display, although the field is saved on the node. Drag the field to \"Disabled\" and save. You no longer see the field on the display, but it is available when editing the node. Create a Content Type To create your own custom content type from scratch, please refer to this guide on Drupal.org. Custom content types are not synced to Fedora or indexed by the triple-store by default. Repository managers must add them to the \"Content\" ('repository_content') context before their nodes are synced to Fedora and indexed by the triple-store. Navigate to the Contexts configuration page ('/admin/structure/context'). Find the 'Content' context and click the corresponding 'Edit' button ('/admin/structure/context/repository_content'). Find the 'Node Bundle' condition in the 'Conditions' section. Click the checkbox for the new Content Type. Scroll down to the bottom of the page and click 'Save and continue'. Updating contexts does not retroactively fire any actions. Any of the custom content type's nodes that were created before updating the context will need to have the indexing action manually triggered. Update / Create an RDF Mapping RDF mapping aligns Drupal fields with RDF ontology properties. For example, the title field of a content model can be mapped to dcterms:title and/or schema:title. In Islandora 8, triples expressed by these mappings get synced to Fedora and indexed in the Blazegraph triplestore. RDF mappings are defined/stored in Drupal as a YAML file (to learn more about YAML, there are several tutorials on the web . Currently, Drupal 8 does not have a UI to create/update RDF mappings to ontologies other than Schema.org. This requires repository managers to update the configuration files themselves. Consider using the RDF mappings included in islandora_demo as templates by copying and modifying one to meet your needs. The Drupal 8 Configuration Synchronization export (e.g. http://localhost:8000/admin/config/development/configuration/single/export ) and import (e.g. http://localhost:8000/admin/config/development/configuration/single/import ) can be used to get a copy of the mappings for editing in a text editor before being uploaded again. Alternatively, a repository manager can update the configuration on the server and use Features to import the edits. An RDF mapping configuration file has two main areas, the mapping's metadata and the mapping itself. Most of the mapping's metadata should be left alone unless you are creating a brand new mapping for a new Content Type or Taxonomy Vocabulary. A partial example from islandora_default's islandora_object (Repository Item) is included below: langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_demo module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: title: properties: - 'dc:title' field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' The required mapping metadata fields when creating a brand-new mapping include the id , status , targetEntityType , and bundle . ( uuid and _core , not seen in the example above but may be present in exported copies, will be added by Drupal automatically.) bundle is the machine name for the Content Type or Taxonomy Vocabulary you are creating the mapping for. targetEntityType is node for Content Types or taxonomy_term for Taxonomy Vocabularies. The id configuration is a concatenation of target entity type and bundle ('node' and 'islandora_object' in the example above). The id is also used to name the configuration file: e.g. rdf.mapping.node.islandora_object.yml is rdf.mapping. plus the id ( node.islandora_object ) and then .yml . The mapping itself consists of the types ' and fieldMappings configurations. All the mappings use RDF namespaces instead of fully-qualified URIs. For example, the type for islandora_object is pcdm:Object instead of http://pcdm.org/models#Object . Unfortunately, the available namespaces are defined in module hooks (hook_rdf_namespaces) rather than in a configuration file. Repository managers wanting to add additional namespaces need to create their own module and implement hook_rdf_namespaces. See the islandora_defaults hook implementation for an example. Namespaces currently supported (ordered by the module that supplies them) include: rdf content: http://purl.org/rss/1.0/modules/content/ dc: http://purl.org/dc/terms/ foaf: http://xmlns.com/foaf/0.1/ og: http://ogp.me/ns# rdfs: http://www.w3.org/2000/01/rdf-schema# schema: http://schema.org/ sioc: http://rdfs.org/sioc/ns# sioct: http://rdfs.org/sioc/types# skos: http://www.w3.org/2004/02/skos/core# xsd: http://www.w3.org/2001/XMLSchema# islandora ldp: http://www.w3.org/ns/ldp# dc11: http://purl.org/dc/elements/1.1/ nfo: http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/ ebucore: http://www.ebu.ch/metadata/ontologies/ebucore/ebucore# fedora: http://fedora.info/definitions/v4/repository# owl: http://www.w3.org/2002/07/owl# ore: http://www.openarchives.org/ore/terms/ rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# islandora: http://islandora.ca pcdm: http://pcdm.org/models# use: http://pcdm.org/use# iana: http://www.iana.org/assignments/relation/ islandora_demo relators: http://id.loc.gov/vocabulary/relators/ controlled_access_terms wgs84_pos: http://www.w3.org/2003/01/geo/wgs84_pos# org: https://www.w3.org/TR/vocab-org/#org: xs: http://www.w3.org/2001/XMLSchema# The types corresponds to the rdf:type predicate (which corresponds to JSON-LD's @type ) and can have multiple values. This type value will be applied to every node or taxonomy term using the mapped content type or vocabulary. In some cases a repository may want a node or taxonomy term's rdf:type to be configurable. For example, the Corporate Body Vocabulary (provided by the Controlled Access Terms Default Configuration module) has schema:Organization set as the default type in the RDF mapping. However, more granular types may apply to one organization and not another, such as schema:GovernmentOrganization or schema:Corporation . The alter_jsonld_type Context reaction allows Content Types and Taxonomy Vocabularies to add a field's values as rdf:types to its JSON-LD serialization (the format used to index a node or taxonomy term in Fedora and the triple-store). fieldMappings specifies the fields to be included, their RDF property mappings, and any necessary data converters (the datatype_callback ). One field can be mapped to more than one RDF property by adding them to the field's properties list. The datatype_callback is defined by the 'callable' key and the fully qualified static method used to convert it to the desired data format. For example, fields of the Drupal datetime type need to be converted to ISO 8601 values, so we use the Drupal\\rdf\\CommonDataConverter::dateIso8601Value function to perform the conversion. Islandora Quick Lessons Learn more with this video on Customizing a Form . Further Reading: Drupal.org Introduction to Form API Step by step method to create a custom form in Drupal 8","title":"Modify or Create a Content Type"},{"location":"user-documentation/content_types/#create-update-a-content-type","text":"Islandora Demo The screenshots and pre-existing data in this documentation assume that you are using the Islandora Defaults configuration. Graphical User Interface This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation. Since objects in Islandora 8 are stored in Drupal as Nodes, we use the standard Drupal Content Types system to create and edit our \u2018ingest forms\u2019 Content Types in Drupal 8 . Islandora 8 forms are Drupal forms, and if you are already familiar with Drupal Field UI, you\u2019re already well equipped to create and modify your own ingest forms in Islandora 8. This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation.","title":"Create / Update a Content Type"},{"location":"user-documentation/content_types/#modify-a-content-type","text":"If you have deployed your Islandora 8 with the Islandora Demo configuration, you will already have a Repository Item content type available, with pre-configured fields. In the Admin menu, go to Structure >> Content Types and find the Repository Item content type. Select Manage Fields . You will see a list of the fields that are already available in the Repository Item content type.","title":"Modify a Content Type"},{"location":"user-documentation/content_types/#add-a-field","text":"Let\u2019s add a new field where a user can indicate if the repository item needs to be reviewed: Click \u201cAdd Field\u201d In some cases an existing field may be available to use instead of creating a new one. The dropdown box labeled 'Re-use an existing field' has a list of available fields. For our example we will create a brand-new field. Since our example field is a \u201cyes/no\u201d decision (whether the item needs review or not), choose \"Boolean\" from the dropdown menu and give the Label field a name. See the list of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters for descriptions of the different types available by default. Additional modules, such as the controlled_access_terms module, can provide their own Field types to choose from as well. Click \"Save and continue.\" Next, configure how the field is stored in the Drupal database. For this field type you can select how many values will be allowed. The default settings, \"Limited\" in the dropdown box and \"1\" for the allowed number of values works for our example. Click \"Save field settings.\" Then configure how the field is described (including its display label and the help text for when it appears on a form) and constraints on its use. In this case, the field will be required for this Content Type, and will be set to \u201con\u201d by default. In the \"Default Value\" section, click the checkbox next to \"Needs Review\" to indicate all new repository items need review by default. Click \"Save settings.\" The new field has been added: And it appears in the ingest form when we try to create a new repository object. To test this, go to Content >> Add content >> Repository item: RDF Mappings New fields, with the exception of Typed Relation fields, are not automatically indexed in Fedora and the triple-store. Update the Content Type's RDF Mapping to enable indexing the field (see below). Search New fields will not automatically be searchable. They need to be added to the SOLR index configuration. See the 'Setup and Configure Search' page for more information. Context To add new behavior based on the results of this new field, check out Context .","title":"Add a Field"},{"location":"user-documentation/content_types/#change-the-form-display","text":"Now let\u2019s move our new field to a different part of the form. In the Admin menu, return to Structure > Content Types and find the Repository Item content type again. Select Manage form display. All of the fields in this content type are available, in a list, with a simple drag-and-place UI. Drag the new field to the top of the form. We can also change the way the Boolean options are displayed, with radio buttons as opposed to a single checkbox. Different display options will be available from the dropdown menu depending on field type. For more information, please check out List of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters Save. When creating a new Repository Item, the new field appears at the top, as a set of radio buttons.","title":"Change the Form Display"},{"location":"user-documentation/content_types/#change-the-content-display","text":"Finally, let\u2019s change how the results of this field are displayed. Initially the new field shows up at the bottom of repository object pages: In the Admin menu, return to Structure > Content Types and find the Repository Item content type again. Select Manage display from the dropdown menu. Find the new field. You can change how the field title or Label is displayed. Click the dropdown menu to choose from inline/above/hidden/visually hidden. You can also replace the options displayed with variations on a binary choice. Click the gear to choose from the following: On/Off, Yes/No, Enabled/Disabled, 1/0. checkmark/X, or hide the field completely. You can also drag the field into the Disabled section so that neither its label or its contents appear in the display, although the field is saved on the node. Drag the field to \"Disabled\" and save. You no longer see the field on the display, but it is available when editing the node.","title":"Change the Content Display"},{"location":"user-documentation/content_types/#create-a-content-type","text":"To create your own custom content type from scratch, please refer to this guide on Drupal.org. Custom content types are not synced to Fedora or indexed by the triple-store by default. Repository managers must add them to the \"Content\" ('repository_content') context before their nodes are synced to Fedora and indexed by the triple-store. Navigate to the Contexts configuration page ('/admin/structure/context'). Find the 'Content' context and click the corresponding 'Edit' button ('/admin/structure/context/repository_content'). Find the 'Node Bundle' condition in the 'Conditions' section. Click the checkbox for the new Content Type. Scroll down to the bottom of the page and click 'Save and continue'. Updating contexts does not retroactively fire any actions. Any of the custom content type's nodes that were created before updating the context will need to have the indexing action manually triggered.","title":"Create a Content Type"},{"location":"user-documentation/content_types/#update-create-an-rdf-mapping","text":"RDF mapping aligns Drupal fields with RDF ontology properties. For example, the title field of a content model can be mapped to dcterms:title and/or schema:title. In Islandora 8, triples expressed by these mappings get synced to Fedora and indexed in the Blazegraph triplestore. RDF mappings are defined/stored in Drupal as a YAML file (to learn more about YAML, there are several tutorials on the web . Currently, Drupal 8 does not have a UI to create/update RDF mappings to ontologies other than Schema.org. This requires repository managers to update the configuration files themselves. Consider using the RDF mappings included in islandora_demo as templates by copying and modifying one to meet your needs. The Drupal 8 Configuration Synchronization export (e.g. http://localhost:8000/admin/config/development/configuration/single/export ) and import (e.g. http://localhost:8000/admin/config/development/configuration/single/import ) can be used to get a copy of the mappings for editing in a text editor before being uploaded again. Alternatively, a repository manager can update the configuration on the server and use Features to import the edits. An RDF mapping configuration file has two main areas, the mapping's metadata and the mapping itself. Most of the mapping's metadata should be left alone unless you are creating a brand new mapping for a new Content Type or Taxonomy Vocabulary. A partial example from islandora_default's islandora_object (Repository Item) is included below: langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_demo module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: title: properties: - 'dc:title' field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' The required mapping metadata fields when creating a brand-new mapping include the id , status , targetEntityType , and bundle . ( uuid and _core , not seen in the example above but may be present in exported copies, will be added by Drupal automatically.) bundle is the machine name for the Content Type or Taxonomy Vocabulary you are creating the mapping for. targetEntityType is node for Content Types or taxonomy_term for Taxonomy Vocabularies. The id configuration is a concatenation of target entity type and bundle ('node' and 'islandora_object' in the example above). The id is also used to name the configuration file: e.g. rdf.mapping.node.islandora_object.yml is rdf.mapping. plus the id ( node.islandora_object ) and then .yml . The mapping itself consists of the types ' and fieldMappings configurations. All the mappings use RDF namespaces instead of fully-qualified URIs. For example, the type for islandora_object is pcdm:Object instead of http://pcdm.org/models#Object . Unfortunately, the available namespaces are defined in module hooks (hook_rdf_namespaces) rather than in a configuration file. Repository managers wanting to add additional namespaces need to create their own module and implement hook_rdf_namespaces. See the islandora_defaults hook implementation for an example. Namespaces currently supported (ordered by the module that supplies them) include: rdf content: http://purl.org/rss/1.0/modules/content/ dc: http://purl.org/dc/terms/ foaf: http://xmlns.com/foaf/0.1/ og: http://ogp.me/ns# rdfs: http://www.w3.org/2000/01/rdf-schema# schema: http://schema.org/ sioc: http://rdfs.org/sioc/ns# sioct: http://rdfs.org/sioc/types# skos: http://www.w3.org/2004/02/skos/core# xsd: http://www.w3.org/2001/XMLSchema# islandora ldp: http://www.w3.org/ns/ldp# dc11: http://purl.org/dc/elements/1.1/ nfo: http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/ ebucore: http://www.ebu.ch/metadata/ontologies/ebucore/ebucore# fedora: http://fedora.info/definitions/v4/repository# owl: http://www.w3.org/2002/07/owl# ore: http://www.openarchives.org/ore/terms/ rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# islandora: http://islandora.ca pcdm: http://pcdm.org/models# use: http://pcdm.org/use# iana: http://www.iana.org/assignments/relation/ islandora_demo relators: http://id.loc.gov/vocabulary/relators/ controlled_access_terms wgs84_pos: http://www.w3.org/2003/01/geo/wgs84_pos# org: https://www.w3.org/TR/vocab-org/#org: xs: http://www.w3.org/2001/XMLSchema# The types corresponds to the rdf:type predicate (which corresponds to JSON-LD's @type ) and can have multiple values. This type value will be applied to every node or taxonomy term using the mapped content type or vocabulary. In some cases a repository may want a node or taxonomy term's rdf:type to be configurable. For example, the Corporate Body Vocabulary (provided by the Controlled Access Terms Default Configuration module) has schema:Organization set as the default type in the RDF mapping. However, more granular types may apply to one organization and not another, such as schema:GovernmentOrganization or schema:Corporation . The alter_jsonld_type Context reaction allows Content Types and Taxonomy Vocabularies to add a field's values as rdf:types to its JSON-LD serialization (the format used to index a node or taxonomy term in Fedora and the triple-store). fieldMappings specifies the fields to be included, their RDF property mappings, and any necessary data converters (the datatype_callback ). One field can be mapped to more than one RDF property by adding them to the field's properties list. The datatype_callback is defined by the 'callable' key and the fully qualified static method used to convert it to the desired data format. For example, fields of the Drupal datetime type need to be converted to ISO 8601 values, so we use the Drupal\\rdf\\CommonDataConverter::dateIso8601Value function to perform the conversion. Islandora Quick Lessons Learn more with this video on Customizing a Form .","title":"Update / Create an RDF Mapping"},{"location":"user-documentation/content_types/#further-reading","text":"Drupal.org Introduction to Form API Step by step method to create a custom form in Drupal 8","title":"Further Reading:"},{"location":"user-documentation/context/","text":"Context in Islandora 8 Context is a Drupal contrib module that allows configuration of \"if this, then that\" logic using an administrative user interface. Context defines \"conditions\" and \"reactions\" to enact the \"if this [condition], then that [reaction]\" logic. Some Islandora 7.x repositories use the community-contributed Islandora Context module to apply this sort of logic to Islandora objects. An example Context from Islandora 7.x is If an object's namespace is 'customnamespace', render the block containing the rights statement \"Please contact Special Collections before reusing this item\". The Context project page on drupal.org says \"You can think of each context as representing a 'section' of your site\", but that doesn't tell the whole story, since it gives the impression that Context is all about defining subsites. Context in Drupal 8 is much more powerful than in Drupal 7 due to how it interacts with the rest of Drupal (specifically, through Drupal 8's new plugin API). Because of this increased flexibility and power, and because Context provides a ready-made user interface for site administrators to combine conditions and reactions, Islandora 8 uses Context to drive the logic underlying many important aspects of Islandora, including which derivatives get generated and how objects are displayed. In Islandora 7, many of these things are managed (and often hard-coded) within solution packs and utility modules. An Example Let's look at the example of how Context can determine how an object is displayed. Drupal 8 has the idea of \"view modes\", which allow site builders to choose what happens when an object is viewed by the user (it has nothing to do with Drupal Views). In the node edit form for Islandora objects, there is a checkbox that, if checked, tells Drupal to render the image using the OpenSeadragon viewer: This functionality is accomplished via the \"Open Seadragon\" Context, which, as its configuration suggests, checks as its condition whether the node as the \"Open Seadragon\" tag and if so, reacts by using the view mode \"Open Seadragon\": Context and Actions Context in Drupal 8 uses Drupal Actions to execute the \"then that\" part of their logic. An implication of this is some configuration options relevant to the outcome of the \"then that\" reaction are configured in the Action admin interface (located at admin/config/system/actions ), not within the Context admin interface (located at admin/structure/context ). While this makes for a clunky admin experience, the advantage is that it allows the reuse of a single piece of Drupal code in multiple Contexts. One important group of functionality in Islandora 8 repositories that admins might want to control is what types of media get persisted to Fedora. Islandora 8 allows administrators to choose what types of media get persisted to Fedora and what types of media get persisted to the Drupal public file system. For example, you may want to persist your thumbnails to Fedora along with your \"Preservation Master\" and \"Original File\" files. This can be accomplished using Context. By default Islandora 8 stores thumbnails in Drupal's public file system, not in Fedora. Thumbnails are automatically generated by a Context (the \"Image Service File\" Context to be specific), but if you want to change the file system where your thumbnails are stored to the be Fedora file system, you need to change that setting in the \"Image - Generate a thumbnail from a service file\" Action, not in the Context that uses that action: This configuration should be done as part of your initial Islandora 8 setup, since there is currently no way to move thumbnails that were persisted to Drupal's public file system to Fedora, or vice versa. But, at least site admins can choose one or the other using this Action. You can create custom Actions and then use them in Contexts. For example, if you want to present a message to the user every time they upload a media tagged as \"Preservation Master File\", create an Action of type \"Display a message to the user\" and enter your message: Then, create a Context that uses this Action as its Reaction, and as its Condition, uses \"Media has term\" with a value of \"Preservation Master File\": Now, when a user creates a Media and tags it as a \"Preservation Master File\", they will be shown the message you created in your Action: Tips on Using Islandora-specific Contexts Islandora provides some Conditions and Reactions that aren't available on other Drupal sites. When using them, you may find the following tips useful: When using the \"Node has term with URI\", \"Media has term with URI\", and \"Parent node for media has term with URI\" Islandora-specific Conditions, you may want to enter multiple terms to take advantage of the AND/OR logic they provide. To do so, add a comma ( , ) after the first term in the autocomplete field and continue typing. These three Conditions limit taxonomy terms that show up in their autocomplete Term field to terms that have URIs associated with them, for example from the Islandora Media Use or Islandora Models vocabularies (although any term that has a URI will appear). If you want to configure Conditions using terms that do not have a URI, you can use the contrib Term Condition module . Be as specific as possible in configuring your Conditions. If your Conditions seem to apply too broadly or in unexpected ways, try adding a \"Content Entity Type\" Condition to limit the Context to pages that render Islandora objects or media. Increased Flexibility Most Islandora 8 repository administrators will not need to alter or configure any Contexts. But since much of Islandora 8's underlying functionality is governed by this powerful Drupal contrib module, administrators should become comfortable using it, and Actions, to customize and refine their repositories. Also, since Islandora 8 objects are ordinary Drupal nodes, Islandora objects can take advantage of standard Drupal 8 Context functionality out of the box.","title":"Context"},{"location":"user-documentation/context/#context-in-islandora-8","text":"Context is a Drupal contrib module that allows configuration of \"if this, then that\" logic using an administrative user interface. Context defines \"conditions\" and \"reactions\" to enact the \"if this [condition], then that [reaction]\" logic. Some Islandora 7.x repositories use the community-contributed Islandora Context module to apply this sort of logic to Islandora objects. An example Context from Islandora 7.x is If an object's namespace is 'customnamespace', render the block containing the rights statement \"Please contact Special Collections before reusing this item\". The Context project page on drupal.org says \"You can think of each context as representing a 'section' of your site\", but that doesn't tell the whole story, since it gives the impression that Context is all about defining subsites. Context in Drupal 8 is much more powerful than in Drupal 7 due to how it interacts with the rest of Drupal (specifically, through Drupal 8's new plugin API). Because of this increased flexibility and power, and because Context provides a ready-made user interface for site administrators to combine conditions and reactions, Islandora 8 uses Context to drive the logic underlying many important aspects of Islandora, including which derivatives get generated and how objects are displayed. In Islandora 7, many of these things are managed (and often hard-coded) within solution packs and utility modules.","title":"Context in Islandora 8"},{"location":"user-documentation/context/#an-example","text":"Let's look at the example of how Context can determine how an object is displayed. Drupal 8 has the idea of \"view modes\", which allow site builders to choose what happens when an object is viewed by the user (it has nothing to do with Drupal Views). In the node edit form for Islandora objects, there is a checkbox that, if checked, tells Drupal to render the image using the OpenSeadragon viewer: This functionality is accomplished via the \"Open Seadragon\" Context, which, as its configuration suggests, checks as its condition whether the node as the \"Open Seadragon\" tag and if so, reacts by using the view mode \"Open Seadragon\":","title":"An Example"},{"location":"user-documentation/context/#context-and-actions","text":"Context in Drupal 8 uses Drupal Actions to execute the \"then that\" part of their logic. An implication of this is some configuration options relevant to the outcome of the \"then that\" reaction are configured in the Action admin interface (located at admin/config/system/actions ), not within the Context admin interface (located at admin/structure/context ). While this makes for a clunky admin experience, the advantage is that it allows the reuse of a single piece of Drupal code in multiple Contexts. One important group of functionality in Islandora 8 repositories that admins might want to control is what types of media get persisted to Fedora. Islandora 8 allows administrators to choose what types of media get persisted to Fedora and what types of media get persisted to the Drupal public file system. For example, you may want to persist your thumbnails to Fedora along with your \"Preservation Master\" and \"Original File\" files. This can be accomplished using Context. By default Islandora 8 stores thumbnails in Drupal's public file system, not in Fedora. Thumbnails are automatically generated by a Context (the \"Image Service File\" Context to be specific), but if you want to change the file system where your thumbnails are stored to the be Fedora file system, you need to change that setting in the \"Image - Generate a thumbnail from a service file\" Action, not in the Context that uses that action: This configuration should be done as part of your initial Islandora 8 setup, since there is currently no way to move thumbnails that were persisted to Drupal's public file system to Fedora, or vice versa. But, at least site admins can choose one or the other using this Action. You can create custom Actions and then use them in Contexts. For example, if you want to present a message to the user every time they upload a media tagged as \"Preservation Master File\", create an Action of type \"Display a message to the user\" and enter your message: Then, create a Context that uses this Action as its Reaction, and as its Condition, uses \"Media has term\" with a value of \"Preservation Master File\": Now, when a user creates a Media and tags it as a \"Preservation Master File\", they will be shown the message you created in your Action:","title":"Context and Actions"},{"location":"user-documentation/context/#tips-on-using-islandora-specific-contexts","text":"Islandora provides some Conditions and Reactions that aren't available on other Drupal sites. When using them, you may find the following tips useful: When using the \"Node has term with URI\", \"Media has term with URI\", and \"Parent node for media has term with URI\" Islandora-specific Conditions, you may want to enter multiple terms to take advantage of the AND/OR logic they provide. To do so, add a comma ( , ) after the first term in the autocomplete field and continue typing. These three Conditions limit taxonomy terms that show up in their autocomplete Term field to terms that have URIs associated with them, for example from the Islandora Media Use or Islandora Models vocabularies (although any term that has a URI will appear). If you want to configure Conditions using terms that do not have a URI, you can use the contrib Term Condition module . Be as specific as possible in configuring your Conditions. If your Conditions seem to apply too broadly or in unexpected ways, try adding a \"Content Entity Type\" Condition to limit the Context to pages that render Islandora objects or media.","title":"Tips on Using Islandora-specific Contexts"},{"location":"user-documentation/context/#increased-flexibility","text":"Most Islandora 8 repository administrators will not need to alter or configure any Contexts. But since much of Islandora 8's underlying functionality is governed by this powerful Drupal contrib module, administrators should become comfortable using it, and Actions, to customize and refine their repositories. Also, since Islandora 8 objects are ordinary Drupal nodes, Islandora objects can take advantage of standard Drupal 8 Context functionality out of the box.","title":"Increased Flexibility"},{"location":"user-documentation/create_update_views/","text":"Create / Update a View Views allow you to get your content in Islandora to display on your site in pages or as posts, lists, blocks, etc. Views are powerful and filter content from Islandora to enable you to present content in interesting and exciting ways. Islandora 8 ships with views already created and turned on. The Islandora 8 home page displays content items that have been added to Islandora. This view is named 'Frontpage' and it lists items that meet the following filter criteria . The item is published and the checkbox 'Promoted to front page' is selected. This view will display all content items added to Islandora as the checkbox 'Promoted to front page' is on by default. As you develop your Islandora Web site it is likely that you will need to change this default behaviour of the 'Frontpage' view. The following two tasks demonstrate how to 1) Edit the 'FrontPage' view and 2) Create a new view. Task 1: Edit the 'Frontpage' page view to only show content items and not collections For this example, we added six collection items to Islandora 8. Now, in total there are eight items in the repository. In addition to the six collection items there is one audio item and one image item. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) For this example, on the frontpage we can see that Islandora displays a 'Collection' first as this is the most recently added item. To edit the frontpage view, hover over the view ('Frontpage' view) and select 'Edit view' when displayed. Select 'Add' under the filter criteria section. We do not want to display collections, so we need to add a filter criteria that does not filter for the Islandora model type 'collection' Select 'Model' from the list and then 'Apply (all displays)'. Select 'Islandora Model' to select filters on Islandora model types and select 'Apply and continue'. Select the operator 'Is none of' and the 'Collection' model (autocomplete should work here to help you). To finish select 'Apply (all displays)'. 'Save' the view. Now the 'Frontpage' view does not display collections. Task2: Add a new view to only show collections For this example, we create a new view as a block and place the new block to only display on the frontpage. We will add the new collection list block below the existing frontpage view that list items. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) Navigate to Administration > Structure > Views (~/admin/structure/views) Create a new view by selecting 'Add view' Name the view and select 'Create a block'. Give the block a title, decide how you want it to display (Grid, Table, List, Paging). To progress, select 'Save and edit'. Customise the view format and sorting as required. Add a filter criteria to only show the Islandora model type of 'Collection' and 'Save' the view. Place view on frontpage. Now that we have a view as a block, we add it to the 'Main page content' area (using 'Block layout') and only display for the frontpage. Navigate to Administration > Structure > Block (/admin/structure/block). Under 'Main content' select 'Place block' Find the new block, 'Collection List' and select 'Place block'. Restrict the block to only display on the frontpage by adding the text ' ' to the 'Page' vertical tab. Then select 'Save block'. Review the block placement and move if required. The 'Collection list' now only displays on the frontpage. It displays below the 'Main page content'. Islandora Quick Lessons Learn more with videos on Basic Views and Advanced Views .","title":"Create or Update a View"},{"location":"user-documentation/create_update_views/#create-update-a-view","text":"Views allow you to get your content in Islandora to display on your site in pages or as posts, lists, blocks, etc. Views are powerful and filter content from Islandora to enable you to present content in interesting and exciting ways. Islandora 8 ships with views already created and turned on. The Islandora 8 home page displays content items that have been added to Islandora. This view is named 'Frontpage' and it lists items that meet the following filter criteria . The item is published and the checkbox 'Promoted to front page' is selected. This view will display all content items added to Islandora as the checkbox 'Promoted to front page' is on by default. As you develop your Islandora Web site it is likely that you will need to change this default behaviour of the 'Frontpage' view. The following two tasks demonstrate how to 1) Edit the 'FrontPage' view and 2) Create a new view.","title":"Create / Update a View"},{"location":"user-documentation/create_update_views/#task-1-edit-the-frontpage-page-view-to-only-show-content-items-and-not-collections","text":"For this example, we added six collection items to Islandora 8. Now, in total there are eight items in the repository. In addition to the six collection items there is one audio item and one image item. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) For this example, on the frontpage we can see that Islandora displays a 'Collection' first as this is the most recently added item. To edit the frontpage view, hover over the view ('Frontpage' view) and select 'Edit view' when displayed. Select 'Add' under the filter criteria section. We do not want to display collections, so we need to add a filter criteria that does not filter for the Islandora model type 'collection' Select 'Model' from the list and then 'Apply (all displays)'. Select 'Islandora Model' to select filters on Islandora model types and select 'Apply and continue'. Select the operator 'Is none of' and the 'Collection' model (autocomplete should work here to help you). To finish select 'Apply (all displays)'. 'Save' the view. Now the 'Frontpage' view does not display collections.","title":"Task 1: Edit the 'Frontpage' page view to only show content items and not collections"},{"location":"user-documentation/create_update_views/#task2-add-a-new-view-to-only-show-collections","text":"For this example, we create a new view as a block and place the new block to only display on the frontpage. We will add the new collection list block below the existing frontpage view that list items. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) Navigate to Administration > Structure > Views (~/admin/structure/views) Create a new view by selecting 'Add view' Name the view and select 'Create a block'. Give the block a title, decide how you want it to display (Grid, Table, List, Paging). To progress, select 'Save and edit'. Customise the view format and sorting as required. Add a filter criteria to only show the Islandora model type of 'Collection' and 'Save' the view. Place view on frontpage. Now that we have a view as a block, we add it to the 'Main page content' area (using 'Block layout') and only display for the frontpage. Navigate to Administration > Structure > Block (/admin/structure/block). Under 'Main content' select 'Place block' Find the new block, 'Collection List' and select 'Place block'. Restrict the block to only display on the frontpage by adding the text ' ' to the 'Page' vertical tab. Then select 'Save block'. Review the block placement and move if required. The 'Collection list' now only displays on the frontpage. It displays below the 'Main page content'. Islandora Quick Lessons Learn more with videos on Basic Views and Advanced Views .","title":"Task2: Add a new view to only show collections"},{"location":"user-documentation/creating-a-node/","text":"To create a new item in your Islandora 8 digital repository, we start by creating a resource node. A resource node holds the descriptive metadata for content, as well as grouping together an original file and all of the derivatives files generated from it. To create a new resource node, go to Content >> Add content or click on Add content under Tools . Then click on Repository Item . This will assign the default metadata profile to your item. Fill out the form. We're going to create an image, so under System , select Image from the Model \" drop down box. Selecting different models will impact how Islandora handles content, dictating important behaviours such as display and derivative generation. When done, click Save . Upload an Original File Congratulations, you have created a resource node! But alas, it has no files. To upload a file, click on the node's Media tab. Then click on Add Media . We want to add an image, so clicking on Image is appropriate in most circumstances. Drupal considers any type of image that can be viewed natively in the browser as an Image . For other image types that require special viewers, such as Tiffs, you have to choose File You are now presented with the form for the technical metadata of the file. There are three required parts of the form: The media's name. The file to upload. The usage of the file, which dictates how Islandora interprets the file. To trigger derivative generation, select Original File from the drop down box. Click Save when done, and the file will be uploaded (to Fedora by default). Now return to the node you created and you should see the image along with its descriptive metadata. Islandora Quick Lessons Learn more with this video on Adding Content .","title":"Create a Resource Node"},{"location":"user-documentation/creating-a-node/#upload-an-original-file","text":"Congratulations, you have created a resource node! But alas, it has no files. To upload a file, click on the node's Media tab. Then click on Add Media . We want to add an image, so clicking on Image is appropriate in most circumstances. Drupal considers any type of image that can be viewed natively in the browser as an Image . For other image types that require special viewers, such as Tiffs, you have to choose File You are now presented with the form for the technical metadata of the file. There are three required parts of the form: The media's name. The file to upload. The usage of the file, which dictates how Islandora interprets the file. To trigger derivative generation, select Original File from the drop down box. Click Save when done, and the file will be uploaded (to Fedora by default). Now return to the node you created and you should see the image along with its descriptive metadata. Islandora Quick Lessons Learn more with this video on Adding Content .","title":"Upload an Original File"},{"location":"user-documentation/extending/","text":"Extending Islandora Because Islandora 8 is very tightly integrated with Drupal, many use cases that required custom Islandora modules in previous versions can now be solved with a combination of configuration and modules from the Drupal community. Other use cases may still require custom code, but are not common enough, or complete enough, for that custom code to be a part of the core software. Both scenarios are covered by the Islandora Cookbook , which contains an annotated list of custom Islandora tools and modules developed by our community, a list of Drupal contributed modules that may be useful in an islandora context, and a set of recipes which each provide a detailed outline for solving a particular use case. Islandora 8 is also compatible with most Drupal themes. Resources Islandora Cookbook Drupal Contributed Modules Drupal Contributed Themes","title":"Extending Islandora"},{"location":"user-documentation/extending/#extending-islandora","text":"Because Islandora 8 is very tightly integrated with Drupal, many use cases that required custom Islandora modules in previous versions can now be solved with a combination of configuration and modules from the Drupal community. Other use cases may still require custom code, but are not common enough, or complete enough, for that custom code to be a part of the core software. Both scenarios are covered by the Islandora Cookbook , which contains an annotated list of custom Islandora tools and modules developed by our community, a list of Drupal contributed modules that may be useful in an islandora context, and a set of recipes which each provide a detailed outline for solving a particular use case. Islandora 8 is also compatible with most Drupal themes.","title":"Extending Islandora"},{"location":"user-documentation/extending/#resources","text":"Islandora Cookbook Drupal Contributed Modules Drupal Contributed Themes","title":"Resources"},{"location":"user-documentation/glossary/","text":"The following glossary of terms addresses an Islandora 8 context. When comparing new Islandora and Fedora to older versions it may also be helpful to reference the Islandora 7 Glossary . CLAW CLAW (CLAW Linked Asset WebDataFrameWork) was the development code name for the software released in June, 2019 as Islandora 8 . Collection Collections are a way of grouping related objects together in Islandora. They function much like directories on a computer; a collection can \u201ccontain\u201d any number of related resource nodes and sub-collections. Drupal Drupal is an open source content management system (CMS) written in PHP. Known for being extremely flexible and extensible, Drupal is supported by a community of over 630,000 users and developers. Drupal sites can be customized and themed in a wide variety of ways. Drupal functions as the front-end of Islandora. Drupal Core The files, themes, profiles, and modules included with the standard project software download. Drupal Roles Roles are a way of assigning specific permissions to a group of users. Any user assigned to a role will have the same permissions as all other users assigned to that role. This allows you to control which users have permission to view, edit, or delete content in Drupal. Islandora provides a special role called fedoraAdmin that is required to have actions in Drupal reflected in Fedora. Entity A Drupal term for an item of either content or configuration data, although in common usage, the term often refers to content entities. Examples include content items, custom blocks, taxonomy terms, and definitions of content types; the first three are content entities, and the last is a configuration entity. Fedora (Repository Software) Fedora is a digital asset management architecture upon which institutional repositories, digital archives, and digital library systems might be built. Fedora is the underlying architecture for a digital repository, and is not a complete management, indexing, discovery, and delivery application. The Fedora repository functions as the standard smart storage for Islandora. Field Data of a certain type that is attached to a content entity. For instance, on a Resource Node content type, you might have fields for a title, description, display hints, subjects, and other metadata. Flysystem Flysystem is a filesystem abstraction library for PHP. Islandora uses Flysystem to swap about different backend filesystem applications. Islandora provides a custom Flysystem adapter for Fedora. Ingest To ingest an object is to add an entry for it in Islandora. This is done primarily through the Drupal interface. The word 'ingest' is used in repository language because repository software, rather than having an object and associated components forced upon it, takes in and processes the object itself, creating derivatives automatically. Often, when referring to the process of ingesting objects, Islandora and its associated documentation use other terms such as 'import' or 'add resource node'. In such contexts, these terms generally refer to the ingest process. Media A drop-in replacement for the Drupal core upload field with a unified User Interface where editors and administrators can upload, manage, and reuse files and multimedia assets. Microservice A software development technique \u2014 a variant of the service-oriented architecture (SOA) structural style \u2014 that arranges an application as a collection of loosely coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight. Module Software (usually PHP, JavaScript, and/or CSS) that extends site features and adds functionality. Drupal modules conform to a specific structure allowing them to integrate with the Drupal architecture. Node A node is any piece of individual content, such as a page, article, forum topic, or a blog entry. All content on a Drupal website is stored and treated as \"nodes\". For information about nodes specific to Islandora, see \"Resource Node.\" Open Source Open source describes a method of software development that promotes access to the end product's source code. Islandora is an open source product with an active development community, operating under the GPL license (2.0) for Drupal components and the MIT license for non-Drupal components. Resource Node A resource node is a Drupal node that represents a single conceptual item or object stored in an Islandora repository. It acts as a container for all files and metadata associated with that item, and is the place where the item 'lives' as a visitable url. For example, A video stored in Islandora will have a resource node, which metadata stored in fields, a preservation master file, and may have a thumbnail, web-friendly derivatives, and technical metadata associated with the resource node. The resource node may also belong to one or more collections. Taxonomy term A term used to classify content, such as a tag or a category. Theme Software and asset files (images, CSS, PHP code, and/or templates) that determine the style and layout of the site. The Drupal project distinguishes between core and contributed themes. View A database query used to generate lists or tables of content. Drupal provides a powerful administrator interface for creating and editing views without any coding. Viewer A \"Viewer\" is an add-on package that allows a solution pack to embed, display, or playback a particular object in a web accessible format. Viewers are typically a combination of a Drupal Library and a Drupal Module. The Drupal Library is the package of code that represents the player or display mechanism, and the Drupal Module is the code package that allows the Drupal Library to be accessed from within the Drupal environment. Virtual Machine Image The Virtual Machine Image allows you to mount a fully working version of Islandora on your local machine as a separate virtual machine. Some definitions adapted from Wikipedia and Drupal.org","title":"Glossary"},{"location":"user-documentation/glossary/#claw","text":"CLAW (CLAW Linked Asset WebDataFrameWork) was the development code name for the software released in June, 2019 as Islandora 8 .","title":"CLAW"},{"location":"user-documentation/glossary/#collection","text":"Collections are a way of grouping related objects together in Islandora. They function much like directories on a computer; a collection can \u201ccontain\u201d any number of related resource nodes and sub-collections.","title":"Collection"},{"location":"user-documentation/glossary/#drupal","text":"Drupal is an open source content management system (CMS) written in PHP. Known for being extremely flexible and extensible, Drupal is supported by a community of over 630,000 users and developers. Drupal sites can be customized and themed in a wide variety of ways. Drupal functions as the front-end of Islandora.","title":"Drupal"},{"location":"user-documentation/glossary/#drupal-core","text":"The files, themes, profiles, and modules included with the standard project software download.","title":"Drupal Core"},{"location":"user-documentation/glossary/#drupal-roles","text":"Roles are a way of assigning specific permissions to a group of users. Any user assigned to a role will have the same permissions as all other users assigned to that role. This allows you to control which users have permission to view, edit, or delete content in Drupal. Islandora provides a special role called fedoraAdmin that is required to have actions in Drupal reflected in Fedora.","title":"Drupal Roles"},{"location":"user-documentation/glossary/#entity","text":"A Drupal term for an item of either content or configuration data, although in common usage, the term often refers to content entities. Examples include content items, custom blocks, taxonomy terms, and definitions of content types; the first three are content entities, and the last is a configuration entity.","title":"Entity"},{"location":"user-documentation/glossary/#fedora-repository-software","text":"Fedora is a digital asset management architecture upon which institutional repositories, digital archives, and digital library systems might be built. Fedora is the underlying architecture for a digital repository, and is not a complete management, indexing, discovery, and delivery application. The Fedora repository functions as the standard smart storage for Islandora.","title":"Fedora (Repository Software)"},{"location":"user-documentation/glossary/#field","text":"Data of a certain type that is attached to a content entity. For instance, on a Resource Node content type, you might have fields for a title, description, display hints, subjects, and other metadata.","title":"Field"},{"location":"user-documentation/glossary/#flysystem","text":"Flysystem is a filesystem abstraction library for PHP. Islandora uses Flysystem to swap about different backend filesystem applications. Islandora provides a custom Flysystem adapter for Fedora.","title":"Flysystem"},{"location":"user-documentation/glossary/#ingest","text":"To ingest an object is to add an entry for it in Islandora. This is done primarily through the Drupal interface. The word 'ingest' is used in repository language because repository software, rather than having an object and associated components forced upon it, takes in and processes the object itself, creating derivatives automatically. Often, when referring to the process of ingesting objects, Islandora and its associated documentation use other terms such as 'import' or 'add resource node'. In such contexts, these terms generally refer to the ingest process.","title":"Ingest"},{"location":"user-documentation/glossary/#media","text":"A drop-in replacement for the Drupal core upload field with a unified User Interface where editors and administrators can upload, manage, and reuse files and multimedia assets.","title":"Media"},{"location":"user-documentation/glossary/#microservice","text":"A software development technique \u2014 a variant of the service-oriented architecture (SOA) structural style \u2014 that arranges an application as a collection of loosely coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight.","title":"Microservice"},{"location":"user-documentation/glossary/#module","text":"Software (usually PHP, JavaScript, and/or CSS) that extends site features and adds functionality. Drupal modules conform to a specific structure allowing them to integrate with the Drupal architecture.","title":"Module"},{"location":"user-documentation/glossary/#node","text":"A node is any piece of individual content, such as a page, article, forum topic, or a blog entry. All content on a Drupal website is stored and treated as \"nodes\". For information about nodes specific to Islandora, see \"Resource Node.\"","title":"Node"},{"location":"user-documentation/glossary/#open-source","text":"Open source describes a method of software development that promotes access to the end product's source code. Islandora is an open source product with an active development community, operating under the GPL license (2.0) for Drupal components and the MIT license for non-Drupal components.","title":"Open Source"},{"location":"user-documentation/glossary/#resource-node","text":"A resource node is a Drupal node that represents a single conceptual item or object stored in an Islandora repository. It acts as a container for all files and metadata associated with that item, and is the place where the item 'lives' as a visitable url. For example, A video stored in Islandora will have a resource node, which metadata stored in fields, a preservation master file, and may have a thumbnail, web-friendly derivatives, and technical metadata associated with the resource node. The resource node may also belong to one or more collections.","title":"Resource Node"},{"location":"user-documentation/glossary/#taxonomy-term","text":"A term used to classify content, such as a tag or a category.","title":"Taxonomy term"},{"location":"user-documentation/glossary/#theme","text":"Software and asset files (images, CSS, PHP code, and/or templates) that determine the style and layout of the site. The Drupal project distinguishes between core and contributed themes.","title":"Theme"},{"location":"user-documentation/glossary/#view","text":"A database query used to generate lists or tables of content. Drupal provides a powerful administrator interface for creating and editing views without any coding.","title":"View"},{"location":"user-documentation/glossary/#viewer","text":"A \"Viewer\" is an add-on package that allows a solution pack to embed, display, or playback a particular object in a web accessible format. Viewers are typically a combination of a Drupal Library and a Drupal Module. The Drupal Library is the package of code that represents the player or display mechanism, and the Drupal Module is the code package that allows the Drupal Library to be accessed from within the Drupal environment.","title":"Viewer"},{"location":"user-documentation/glossary/#virtual-machine-image","text":"The Virtual Machine Image allows you to mount a fully working version of Islandora on your local machine as a separate virtual machine. Some definitions adapted from Wikipedia and Drupal.org","title":"Virtual Machine Image"},{"location":"user-documentation/iiif/","text":"IIIF (International Image Interoperability Framework) IIIF is a set of specifications that provides interoperability of image-based collections across platforms. What this means for a repository platform like Islandora at a general level is that image-based objects such as (still) images and paged content can be managed by Islandora but viewed in external applications, and that Islandora can bring in image-based content from elsewhere to supplement locally managed content. If this intrigues you, see the section \"Looking under the hood (and beyond)\" below. At a practial level, because Islandora supports several of the IIIF specifications, we can: Zoom, pan, and rotate images within OpenSeadragon Islandora uses an IIIF-compliant image server (by default, Cantaloupe ) that utilizes the IIIF Image API . This capablity is similar to what Islandora 7.x users experience when they view a Large Image. Display thumbnails for all pages of a book or newspaper issue within image viewers IIIF-compliant image viewers such as OpenSeadragon or Mirador can display a \"collection\" of images such as all the pages of a book or newspaper issue using the IIIF Presentation API . For example, here is a screenshot of OpenSeadragon rendering all the pages of a book: Using IIIF in Islandora 8 Implementation of the IIIF Presentation API is new in Islandora 8, and using it is as simple as configuring a Context (in fact, you don't even need to configure it; the Context, Openseadragon Block, already exists by default). To use this Context, all that is required is for your book or newspaper (or other paged content) to be given a model of \"Paged Content\" or \"Publication Issue\". Then, in the Openseadragon Block Context, make sure the term used in the \"Node has term\" condition (you can register more than one term there). Now, when you view a paged content Islandora object, you will see thumbnails of all of its child pages (assuming you have added some child pages to the object) in the OpenSeadragon viewer as illustrated above. You can change how the paged content thumbnails are arranged in the OpenSeadragon viewport by doing the following: Visit admin/config/media/openseadragon Scroll to the bottom, where you will see the \"Collection Mode\" options. The \"Enable Collection Mode\" checkbox will be unchecked. This is normal (unless you have already checked it). The Openseadragon Context automatically, and temporarily, puts OpenSeadragon in Collection mode when rendering a Paged Content object and then puts it back to Sequence mode (which is what mode it's in when the \"Enable Collection Mode\" checkbox is unchecked). This means that in order for you to change options that apply to Collection Mode, you will need to check the \"Enable Collection Mode\" checkbox, change its options, save the form, then uncheck the \"Enable Collection Mode\" checkbox again. Just follow these steps, and it will work! Check the \"Enable Collection Mode\" checkbox. The Collection Mode options will appear. Adjust the options to what you want. Click the \"Save Configuration\" button. After the form is saved, navigate back down to the \"Collection Mode\" options and uncheck the \"Enable Collection Mode\" checkbox. Click the \"Save Configuration\" button. ## Looking under the hood (and beyond) If you want to see the raw output of the IIIF API implementations in Islandora 8, visit a node that is displaying the OpenSeadragon viewer (doesn't matter if its a single image or a paged content node like a book), and tack \"manifest\" onto the end of the URL, like http://myrepo.org/node/23/manifest and hit enter. You will see the raw JSON that IIIF-compliant viewers use to render the content. The really neat thing is, IIIF-compliant viewers don't need to be embedded in Islandora websites. If a viewer on another website knows the URL of a IIIF manifest like the ones that Islandora can produce, that viewer can display the content described in the manifest. Some implementations of IIIF viewers that show off the potential to combine content from multiple IIIF servers include: The Biblissima Project - brings together related content from different repositories. diva.js - select a source from the drop-down list at the top. These two examples have nothing to do with Islandora, but illustrate the potential for IIIF to build tools that extend beyond a given repository platoform.","title":"IIIF"},{"location":"user-documentation/iiif/#iiif-international-image-interoperability-framework","text":"IIIF is a set of specifications that provides interoperability of image-based collections across platforms. What this means for a repository platform like Islandora at a general level is that image-based objects such as (still) images and paged content can be managed by Islandora but viewed in external applications, and that Islandora can bring in image-based content from elsewhere to supplement locally managed content. If this intrigues you, see the section \"Looking under the hood (and beyond)\" below. At a practial level, because Islandora supports several of the IIIF specifications, we can: Zoom, pan, and rotate images within OpenSeadragon Islandora uses an IIIF-compliant image server (by default, Cantaloupe ) that utilizes the IIIF Image API . This capablity is similar to what Islandora 7.x users experience when they view a Large Image. Display thumbnails for all pages of a book or newspaper issue within image viewers IIIF-compliant image viewers such as OpenSeadragon or Mirador can display a \"collection\" of images such as all the pages of a book or newspaper issue using the IIIF Presentation API . For example, here is a screenshot of OpenSeadragon rendering all the pages of a book:","title":"IIIF (International Image Interoperability Framework)"},{"location":"user-documentation/iiif/#using-iiif-in-islandora-8","text":"Implementation of the IIIF Presentation API is new in Islandora 8, and using it is as simple as configuring a Context (in fact, you don't even need to configure it; the Context, Openseadragon Block, already exists by default). To use this Context, all that is required is for your book or newspaper (or other paged content) to be given a model of \"Paged Content\" or \"Publication Issue\". Then, in the Openseadragon Block Context, make sure the term used in the \"Node has term\" condition (you can register more than one term there). Now, when you view a paged content Islandora object, you will see thumbnails of all of its child pages (assuming you have added some child pages to the object) in the OpenSeadragon viewer as illustrated above. You can change how the paged content thumbnails are arranged in the OpenSeadragon viewport by doing the following: Visit admin/config/media/openseadragon Scroll to the bottom, where you will see the \"Collection Mode\" options. The \"Enable Collection Mode\" checkbox will be unchecked. This is normal (unless you have already checked it). The Openseadragon Context automatically, and temporarily, puts OpenSeadragon in Collection mode when rendering a Paged Content object and then puts it back to Sequence mode (which is what mode it's in when the \"Enable Collection Mode\" checkbox is unchecked). This means that in order for you to change options that apply to Collection Mode, you will need to check the \"Enable Collection Mode\" checkbox, change its options, save the form, then uncheck the \"Enable Collection Mode\" checkbox again. Just follow these steps, and it will work! Check the \"Enable Collection Mode\" checkbox. The Collection Mode options will appear. Adjust the options to what you want. Click the \"Save Configuration\" button. After the form is saved, navigate back down to the \"Collection Mode\" options and uncheck the \"Enable Collection Mode\" checkbox. Click the \"Save Configuration\" button. ## Looking under the hood (and beyond) If you want to see the raw output of the IIIF API implementations in Islandora 8, visit a node that is displaying the OpenSeadragon viewer (doesn't matter if its a single image or a paged content node like a book), and tack \"manifest\" onto the end of the URL, like http://myrepo.org/node/23/manifest and hit enter. You will see the raw JSON that IIIF-compliant viewers use to render the content. The really neat thing is, IIIF-compliant viewers don't need to be embedded in Islandora websites. If a viewer on another website knows the URL of a IIIF manifest like the ones that Islandora can produce, that viewer can display the content described in the manifest. Some implementations of IIIF viewers that show off the potential to combine content from multiple IIIF servers include: The Biblissima Project - brings together related content from different repositories. diva.js - select a source from the drop-down list at the top. These two examples have nothing to do with Islandora, but illustrate the potential for IIIF to build tools that extend beyond a given repository platoform.","title":"Using IIIF in Islandora 8"},{"location":"user-documentation/intro-to-ld-for-islandora-8/","text":"Introduction to Linked Data for Islandora 8 The purpose of this page is to provide a guided reading list to anyone who wants to get up to speed on the basics of linked data within the Islandora community. Those who make their way through the readings will be able to talk competently about linked data and better understand the design decisions made in Islandora 8. The list starts with the fundamentals of linked data (RDF, SPARQL, serializations and ontologies) and moves toward more advanced topics specific to the use cases of a Fedora 4 based digital repository system. Basics of Linked Data This section seeks to give the reader a foundational understanding of what linked data is, why it is useful, and a very superficial understanding of how it works. Tim Berners-Lee\u2019s description of Linked Data Manu Sporny's \"What is Linked Data?\" YouTube Video Wikipedia article on Linked Data Wikipedia article on Semantic Web Wikipedia article on URIs Wikipedia article on the W3C W3C\u2019s description of Linked Data W3C\u2019s Linked Data Glossary W3C\u2019s Architecture of the World Wide Web Understanding RDF This section is all about RDF, the Resource Description Framework, which defines the way linked data is structured. Wikipedia article on RDF D-Lib\u2019s Intro to RDF W3C\u2019s RDF 1.1 Primer W3C\u2019s RDF 1.1 Concepts Querying Linked Data with SPARQL This section takes a look at SPARQL, the query language that allows you to ask linked data very specific questions. The queryable nature of linked data is one of the things that makes it so special. Try some SPARQL queries on DBpedia's endpoint to get some hands-on experience. Wikipedia article on SPARQL W3C\u2019s SPARQL 1.1 Overview W3C\u2019s SPARQL 1.1 Query Language DBpedia's SPARQL Endpoint RDF Serialization Formats RDF data can be translated into many different formats. RDF/XML is the original way that RDF data was shared, but there are much more human-friendly serialization formats like Turtle which is great for beginners. JSON-LD is the easiest format for applications to use, and is the serialization format that Islandora 8 uses internally. Make sure to check out the JSON-LD Playground for an interactive learning experience. Wikipedia article on Serialization W3C\u2019s RDF/XML Syntax Specification W3C\u2019s RDF 1.1 Turtle W3C\u2019s JSON-LD 1.0 JSON-LD Website JSON-LD Playground Ontology & Vocabulary Basics Ontologies & vocabularies are created by communities of people to describe things, and once created, anyone can use an ontology or vocabulary to describe their resources. This section goes over some of the more popular ontologies & vocabularies in use. Wikipedia article on Ontologies W3C\u2019s description of Ontologies/Vocabularies (sameish thing) Wikipedia article on Friend of a Friend (FOAF) ontology FOAF 0.99 Vocabulary Specification Socially Interconnected Online Communities Ontology (SIOC) Dublin Core in RDF Building Ontologies One isn't limited to the ontologies & vocabularies that already exist in the world, anyone is free to create their own. This section goes over ontologies that exist to help those trying to create their own ontologies. Wikipedia article on RDF Schema (RDFS) W3C\u2019s RDF Schema (RDFS) 1.1 Wikipedia article on Simple Knowledge Organization System (SKOS) ALA\u2019s SKOS: A Guide for Information Professionals Wikipedia article on Web Ontology Language (OWL) W3C\u2019s OWL 2 Primer W3C\u2019s OWL 2 Quick Reference Repository-Specific Ontologies Most ontologies are very specific to certain use cases, and digital repository systems are no different. This section covers ontologies that are of specific interest to users of Islandora 8, or any Fedora 4 based digital repository system. MODS RDF Namespace Document MODS RDF Ontology Primer MODS RDF Ontology Primer 2: MODS XML to RDF Conversion PREMIS RDF Namespace Document Linked Data Platform (LDP) 1.0 Primer LDP 1.0 Specification Portland Common Data Model (PCDM) wiki) PCDM ontologies list PCDM Models ontology (defines Collections, Objects & Files) Fedora ontologies","title":"Intro to Linked Data"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#introduction-to-linked-data-for-islandora-8","text":"The purpose of this page is to provide a guided reading list to anyone who wants to get up to speed on the basics of linked data within the Islandora community. Those who make their way through the readings will be able to talk competently about linked data and better understand the design decisions made in Islandora 8. The list starts with the fundamentals of linked data (RDF, SPARQL, serializations and ontologies) and moves toward more advanced topics specific to the use cases of a Fedora 4 based digital repository system.","title":"Introduction to Linked Data for Islandora 8"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#basics-of-linked-data","text":"This section seeks to give the reader a foundational understanding of what linked data is, why it is useful, and a very superficial understanding of how it works. Tim Berners-Lee\u2019s description of Linked Data Manu Sporny's \"What is Linked Data?\" YouTube Video Wikipedia article on Linked Data Wikipedia article on Semantic Web Wikipedia article on URIs Wikipedia article on the W3C W3C\u2019s description of Linked Data W3C\u2019s Linked Data Glossary W3C\u2019s Architecture of the World Wide Web","title":"Basics of Linked Data"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#understanding-rdf","text":"This section is all about RDF, the Resource Description Framework, which defines the way linked data is structured. Wikipedia article on RDF D-Lib\u2019s Intro to RDF W3C\u2019s RDF 1.1 Primer W3C\u2019s RDF 1.1 Concepts","title":"Understanding RDF"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#querying-linked-data-with-sparql","text":"This section takes a look at SPARQL, the query language that allows you to ask linked data very specific questions. The queryable nature of linked data is one of the things that makes it so special. Try some SPARQL queries on DBpedia's endpoint to get some hands-on experience. Wikipedia article on SPARQL W3C\u2019s SPARQL 1.1 Overview W3C\u2019s SPARQL 1.1 Query Language DBpedia's SPARQL Endpoint","title":"Querying Linked Data with SPARQL"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#rdf-serialization-formats","text":"RDF data can be translated into many different formats. RDF/XML is the original way that RDF data was shared, but there are much more human-friendly serialization formats like Turtle which is great for beginners. JSON-LD is the easiest format for applications to use, and is the serialization format that Islandora 8 uses internally. Make sure to check out the JSON-LD Playground for an interactive learning experience. Wikipedia article on Serialization W3C\u2019s RDF/XML Syntax Specification W3C\u2019s RDF 1.1 Turtle W3C\u2019s JSON-LD 1.0 JSON-LD Website JSON-LD Playground","title":"RDF Serialization Formats"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#ontology-vocabulary-basics","text":"Ontologies & vocabularies are created by communities of people to describe things, and once created, anyone can use an ontology or vocabulary to describe their resources. This section goes over some of the more popular ontologies & vocabularies in use. Wikipedia article on Ontologies W3C\u2019s description of Ontologies/Vocabularies (sameish thing) Wikipedia article on Friend of a Friend (FOAF) ontology FOAF 0.99 Vocabulary Specification Socially Interconnected Online Communities Ontology (SIOC) Dublin Core in RDF","title":"Ontology &amp; Vocabulary Basics"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#building-ontologies","text":"One isn't limited to the ontologies & vocabularies that already exist in the world, anyone is free to create their own. This section goes over ontologies that exist to help those trying to create their own ontologies. Wikipedia article on RDF Schema (RDFS) W3C\u2019s RDF Schema (RDFS) 1.1 Wikipedia article on Simple Knowledge Organization System (SKOS) ALA\u2019s SKOS: A Guide for Information Professionals Wikipedia article on Web Ontology Language (OWL) W3C\u2019s OWL 2 Primer W3C\u2019s OWL 2 Quick Reference","title":"Building Ontologies"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#repository-specific-ontologies","text":"Most ontologies are very specific to certain use cases, and digital repository systems are no different. This section covers ontologies that are of specific interest to users of Islandora 8, or any Fedora 4 based digital repository system. MODS RDF Namespace Document MODS RDF Ontology Primer MODS RDF Ontology Primer 2: MODS XML to RDF Conversion PREMIS RDF Namespace Document Linked Data Platform (LDP) 1.0 Primer LDP 1.0 Specification Portland Common Data Model (PCDM) wiki) PCDM ontologies list PCDM Models ontology (defines Collections, Objects & Files) Fedora ontologies","title":"Repository-Specific Ontologies"},{"location":"user-documentation/media/","text":"Drupal 8 recognizes files (such as images, audio files, video files, etc.) but wraps each file in an intermediate structure called a \"media\" to allow us to attach fields to files. Drupal uses a media's fields to store information about the media's file, such as file size, width and height (for images), alt text (for images), creation date, and so on. Compared to Islandora 7 In Islandora 7, this sort of technical metadata would have been stored as datastream properties or as additional metadata-specific datastreams. In Islandora 8, each datastream holds its technical metadata using an associated media entity. Fedora will store the media's file as a binary resource and use the media's properties as the binary resource's description. For example, creating a media with a file named test.jpg (in November 2019) will create a Fedora binary resource of the file accessible at /fcrepo/rest/2019-11/test.jpg with the media's fields accessible at /fcrepo/rest/2019-11/test.jpg/fcr:metadata . Media revisions The metadata associated with a file can be updated by clicking the Edit tab while on the media's page and clicking Save . The Create new revision checkbox is selected by default which will prompt Fedora to make a new version of the media's metadata before updating its resource record. A message can be added to the revision which is stored in Drupal but is not currently saved in Fedora. Using the Media form to replace an existing file does not behave as expected. The media edit form allows a user to remove a file and replace it with a new one. However, because of the relationship Islandora creates between a file and its media, the effects of removing a file and uploading a new one are not intuitive. First, the remove button removes the file's reference on the media but does not delete the file, which, if in Fedora, will remain in Fedora. Second, because Drupal does not want users to reuse a file path uploading a file, even with the same name in the same month, Drupal will rename the file for you. This will result in a new binary resource in Fedora, rather than replacing the existing resource, so the file's URI in Fedora will change Third, the metadata synced from the Media into Fedora at [old Fedora URI]/fcr:metadata will remain in Fedora, but the metadata in the Media will also be synced into Fedora at [new Fedora URI]/fcr:metadata. There will be no way for the metadata in Fedora describing the file at the old Fedora URI to be edited. Removing Media with Actions To completely delete a file and its metadata from Fedora and Drupal, run the \"Delete media and file(s) action\" after selecting the Media in the general media list (/admin/content/media). This will cause the paths to the file and its metadata in Fedora to return 404s. Replacing Media via REST It is possible to use Islandora's REST interface to replace Media and Files. Media Ownership Islandora 8 objects can have any number of media associated with them. Media store a reference to the resource node they belong to using a special field, \"Media Of\". By changing this field's value, you can change which resource node owns the media, and therefore, where it gets displayed or managed. Compared to Islandora 7 The direction of the relationship between objects and datastreams is reversed when compared to Islandora 7. Generally speaking, objects are unaware of their datastreams, and it's a Drupal view that lists datastreams for an object. Media Use Islandora 8 media express their intended use with a special \"Media Use\" field, which accepts taxonomy terms from the \"Media Usage\" vocabulary. Because the Media Usage vocabulary is an ordinary Drupal vocabulary, Islandora 8 site administrators can create additional terms, and in turn, these local terms can be used to identify media that have some custom local purpose. However, most of the default set of \"Media Use\" terms are taken from the PCDM Use Extension vocabulary: Compared to Islandora 7 Terms from the Media Usage vocabulary are very similar to DSIDs in Islandora 7. The only difference is that a DSID is immutable, but a media's usage can be changed at any time through the media's edit form. Derivatives Islandora generates derivatives based on the Media Use term selected for a Media and the Model of the node that owns it. All of this is configurable using Context. By default, derivatives are generated from Media with the \"Original Files\" term selected. When an Original File is uploaded, if the node that owns it has an \"Image\" model, image derivatives are created. If it's a \"Video\", then video derivatives are generated, etc... By default, derivatives are created with a path determined by the current year, current month, the associated resource node' identifier assigned by Drupal, and the type of derivative. For example, a resource node found at node/2 with a service file media generated in October 2019 will have the path \"2019-10/2-Service File.jpg\". Naming conventions can be configured by editing each derivative action's File path settings. Within a node's media tab, you can see all of its media, including derivatives, listed along with their usage. For example, from the Original File, a lower quality \"Service File\" and a smaller \"Thumbnail Image\" file were generated. For more information on how to configure derivatives, see the section on Context .","title":"Media"},{"location":"user-documentation/media/#media-revisions","text":"The metadata associated with a file can be updated by clicking the Edit tab while on the media's page and clicking Save . The Create new revision checkbox is selected by default which will prompt Fedora to make a new version of the media's metadata before updating its resource record. A message can be added to the revision which is stored in Drupal but is not currently saved in Fedora.","title":"Media revisions"},{"location":"user-documentation/media/#using-the-media-form-to-replace-an-existing-file-does-not-behave-as-expected","text":"The media edit form allows a user to remove a file and replace it with a new one. However, because of the relationship Islandora creates between a file and its media, the effects of removing a file and uploading a new one are not intuitive. First, the remove button removes the file's reference on the media but does not delete the file, which, if in Fedora, will remain in Fedora. Second, because Drupal does not want users to reuse a file path uploading a file, even with the same name in the same month, Drupal will rename the file for you. This will result in a new binary resource in Fedora, rather than replacing the existing resource, so the file's URI in Fedora will change Third, the metadata synced from the Media into Fedora at [old Fedora URI]/fcr:metadata will remain in Fedora, but the metadata in the Media will also be synced into Fedora at [new Fedora URI]/fcr:metadata. There will be no way for the metadata in Fedora describing the file at the old Fedora URI to be edited. Removing Media with Actions To completely delete a file and its metadata from Fedora and Drupal, run the \"Delete media and file(s) action\" after selecting the Media in the general media list (/admin/content/media). This will cause the paths to the file and its metadata in Fedora to return 404s. Replacing Media via REST It is possible to use Islandora's REST interface to replace Media and Files.","title":"Using the Media form to replace an existing file does not behave as expected."},{"location":"user-documentation/media/#media-ownership","text":"Islandora 8 objects can have any number of media associated with them. Media store a reference to the resource node they belong to using a special field, \"Media Of\". By changing this field's value, you can change which resource node owns the media, and therefore, where it gets displayed or managed. Compared to Islandora 7 The direction of the relationship between objects and datastreams is reversed when compared to Islandora 7. Generally speaking, objects are unaware of their datastreams, and it's a Drupal view that lists datastreams for an object.","title":"Media Ownership"},{"location":"user-documentation/media/#media-use","text":"Islandora 8 media express their intended use with a special \"Media Use\" field, which accepts taxonomy terms from the \"Media Usage\" vocabulary. Because the Media Usage vocabulary is an ordinary Drupal vocabulary, Islandora 8 site administrators can create additional terms, and in turn, these local terms can be used to identify media that have some custom local purpose. However, most of the default set of \"Media Use\" terms are taken from the PCDM Use Extension vocabulary: Compared to Islandora 7 Terms from the Media Usage vocabulary are very similar to DSIDs in Islandora 7. The only difference is that a DSID is immutable, but a media's usage can be changed at any time through the media's edit form.","title":"Media Use"},{"location":"user-documentation/media/#derivatives","text":"Islandora generates derivatives based on the Media Use term selected for a Media and the Model of the node that owns it. All of this is configurable using Context. By default, derivatives are generated from Media with the \"Original Files\" term selected. When an Original File is uploaded, if the node that owns it has an \"Image\" model, image derivatives are created. If it's a \"Video\", then video derivatives are generated, etc... By default, derivatives are created with a path determined by the current year, current month, the associated resource node' identifier assigned by Drupal, and the type of derivative. For example, a resource node found at node/2 with a service file media generated in October 2019 will have the path \"2019-10/2-Service File.jpg\". Naming conventions can be configured by editing each derivative action's File path settings. Within a node's media tab, you can see all of its media, including derivatives, listed along with their usage. For example, from the Original File, a lower quality \"Service File\" and a smaller \"Thumbnail Image\" file were generated. For more information on how to configure derivatives, see the section on Context .","title":"Derivatives"},{"location":"user-documentation/metadata/","text":"Metadata in Islandora 8 TL;DR: In Islandora 8, metadata is stored in Drupal, in fields attached to entities (nodes or media). This allows us to interact with metadata (add, edit, remove, display, index in a search engine...) almost entirely using standard Drupal processes. If exporting this metadata to Fedora and/or a triplestore, the values are serialized to RDF using mappings that can be set for each bundle. Drupal 8 Terminology In Drupal 8, Fields can be attached to bundles (sometimes called entity sub-types -- e.g. Content types, Media types, Vocabularies) or entities (e.g. Users). For more on Fields, see \"2.3 Content Entities and Fields\" and \"6.3 Adding Basic Fields to a Content Type\" in the Official Drupal Guide. As described in the resource nodes section , Islandora 8 digital objects are comprised of Drupal nodes for descriptive metadata, Drupal media for technical metadata, and Drupal files for the binary objects. This section describes how Islandora 8 uses and extends Drupal fields to manage descriptive metadata. Content Types In Drupal, Nodes come in different sub-types called Content Types (e.g. Article, Basic page, Repository item). Content types contain fields, and configurations for how those fields can be edited or displayed. Each content type is essentially a metadata profile that can be used for a piece of web content, or to describe a digital resource. For each field in a content type, an administrator can configure how data is entered, how it can be displayed, how many values can be stored, and how long the value can be. Some configurations, such as data entry and display, can be changed at any time. Others, such as how long a value can be or what options are available in a select list, cannot be changed once content has been created without first deleting all content of that type. However, fields can be added to existing content types with no consequence. For example, the 'islandora_defaults' module provides a Repository Item content type that defines many fields including \"Alternative Title\" and \"Date Issued\". Under the management menu for Repository Item you can see a list of the fields it includes (\"Manage fields\") as well as tabs for changing the input forms (\"Manage form display\") and display modes (\"Manage display\"). See the \" Create / Update a Content Type \" section for more details on creating and configuring fields. Titles aren't fields. Note that the \"Title\" field does not appear in this list. It is a built-in part of every content type. You can edit the label of this \"field\" if you want it called something other than \"Title\" under the \"Edit\" tab for that content type. This built-in title \"field\" is limited to 255 characters; if your content has longer titles it is encouraged to create a separate long_title field to store the full title and reserve the default title field for a display title. There is a contributed module called Node Title Length , which allows an administrator to configure the length of the title field in the core node table. However, this only works on nodes (not media or other entities) and involves meddling in a core Drupal database schema, which makes some people uneasy. 7.x Migration Note: What about my XML? In 7.x, metadata were usually stored using an XML schema such as MODS or DC, as datastreams attached to an object. In Islandora 8, metadata is stored as fields. This means we are breaking out individual elements from a hierarchical structure to being individual independent values. Where some hierarchy or field grouping is necessary, this can be done in Drupal using Paragraphs , a widely-used Drupal contrib module. At the moment (Nov 2019) we are working on the technical challenge of mapping data from paragraphs into RDF in Fedora. The Metadata Interest Group has developed a default mapping ( spreadsheet , guidance document ) which provides a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Defaults. It is suggested that individual institutions customize the mapping to meet their unique needs. That said, if keeping the \"legacy\" XML metadata from 7.x is important to you, it can be attached to an Islandora 8 resource node as a Media entity. However, there is no mechanism in Islandora 8 for editing XML in a user-friendly way. When you create a node (i.e. an instantiation of a content type, such as by using Drupal's \"Add Content\" workflow), the fields defined by its content type become available. Once a node is created, its content type cannot be changed. To \"switch\" a node to a different content type, a repository manager would need to create a new node of the target content type, map the field values (programmatically or by copy-paste), and update any Media or children that refer to the old node to refer to the new one. Not all content types in your Drupal site need be Islandora \"resource nodes\". A \"resource node\" content type will likely have behaviours (such as syncing to Fedora or causing derivatives to be generated) associated with it. This configuration, and the communication to the user of which content types are and are not considered to be Islandora resource nodes is left to the discretion of the site manager. In Islandora, a \"resource node\" is usually considered a descriptive record for \"a thing\", and is conceptually similar to an \"Islandora Object\" in 7.x, i.e. a \"Fedora Object\" in Fedora 3.x and below. Vocabularies In Drupal, Taxonomy Vocabularies (or simply Vocabularies ) are also entity sub-types that define a set of fields and their configurations. Whereas instances of content types are called nodes , items in a vocabulary are called taxonomy terms (or simply terms ). Traditionally, taxonomy terms are used to classify content in Drupal. For instance, the Article content type includes a field field_tags that can refer to terms in the Tags vocabulary. There are two ways that users can interact with taxonomies: they can be \"closed,\" e.g. a fixed list to pick from in a dropdown, or \"open,\" e.g. field_tags where users can enter new terms, which are created on the fly. This is not set on the vocabulary itself, but in the configuration of the field (typically on a node). Terms within vocabularies have an ordering, and can have hierarchical structure, but do not need to. Islandora (through the Islandora Core Feature) creates the 'Islandora Models' vocabulary which includes the terms 'Audio', 'Binary', 'Collection', 'Digital Document', 'Image', 'Page', 'Paged Content', 'Publication Issue', and 'Video'. Islandora Defaults provides contexts that cause certain actions (e.g. derivatives to happen, or blocks to appear) based on which term is used. The Controlled Access Terms module provides additional vocabularies: - Corporate Body - Country - Family - Form - Genre - Geographic Location - Language - Person - Resource Types - Subject Each of these vocabularies has its own set of fields allowing repositories to further describe them. The Repository Item content type has fields that can reference terms in these vocabularies. See 'Entity Reference fields' in the 'Field Types' section below. The vocabularies provided by default are a starting point, and a repository administrator can create whatever vocabularies are desired. Field Types Fields are where Drupal entities store their data. There are different types of fields including boolean, datetime, entity reference, integer, string, text, and text_with_summary. These field types also have widgets (controlling how data is entered) and formatters (controlling how data is displayed). The Drupal 8 documentation on FieldTypes, FieldWidgets, and FieldFormatters includes a list of the core field types. Modules can provide their own field types, formatters, and widgets. The Controlled Access Terms module provides two additional types for use with Islandora: ETDF, and Typed Relation. These are described below. Entity Reference fields are a special type of field built into Drupal that creates a relationship between two entities. The field's configuration options include which kind of entities can be referenced. The 'Repository Item' content type, provided by islandora_defaults, includes several entity reference fields that reference vocabularies defined by the islandora and controlled_access_terms modules. The 'Member Of' field is an entity reference field, defined by Islandora, which is the Islandora way of imposing a hierarchical order on resource nodes. This can be used to show membership in a collection, for pages that are members of a paged item, and for members of a complex object. EDTF The EDTF field type is for recording dates in Extended Date Time Format , which is a format based off of the hyphenated form of ISO 8601 (e.g. 1991-02-03 or 1991-02-03T10:00:00), but also allows expressions of different granularity and uncertainty. The Default EDTF widget has a validator that only allows strings that conform to the EDTF standard. The Default EDTF formatter allows these date string to be displayed in a variety of human readable ways, including big- or little-endian, and presenting months as numbers, abbreviations, or spelling month names out in full. When configuring the EDTF widget for a field in a content type, you can choose to allow date intervals, but doing this prevents the widget from accepting values that include times. (The EDTF standard states that date intervals cannot contain times, but the field should be able to accept either a valid EDTF range or a valid EDTF datetime, so this is a bug.) Example of valid inputs in a multi-valued EDTF Date field: Example of the same EDTF dates displayed using little-endian format: Example of a valid EDTF value ('1943-05') and an invalid value ('1943 May') with the corresponding error message: The configuration for the Default EDTF Widget (including options for extra strict date validation, and allowing date intervals and date sets). Example of how the EDTF formatter settings can change the display of an EDTF value: Typed Relation A Typed Relation field is an extension of Drupal's Entity Reference field, which allows the user to qualify the relation. It was created for describing a resource's contributors (modelled as taxonomy terms or some other Drupal entities) as well as their roles in this resource node (such as 'author', 'illustrator', or 'architect'). With only Drupal's Entity Reference fields, we would need individual fields for 'author', 'illustrator', 'architect', and any other roles that may need to be made available. Using a Typed Relation field, we can have one field for \"Contributors\" and let the user pick the role from a dropdown list. Nerd note: The parts of a field are called properties, so 'entity reference' and 'relation type' are properties of the Typed Relation field type. Islandora Defaults provides a 'Linked Agent' field as part of the Repository Item content type, and populates the available relationships from the MARC relators list. The list of available relations for this field is configurable at '/admin/structure/types/manage/islandora_object/fields/node.islandora_object.field_linked_agent'. If you re-use this existing field on another content type, you can define different available relations for that instance of the field. Relations are defined in the format key|value , and the key is used in the RDF mapping (see below). Typed Relation fields and mapping to RDF: Unlike other fields, which can be assigned RDF predicates in RDF Mapping yaml files, a typed relation field uses a different predicate depending on the chosen \"type\". These predicates are assigned using the 'keys' in the key|value configuration. The key must be formated namespace:predicate , e.g. relators:act . The namespace ('relators') must be pre-defined in code, using a hook. See the RDF Mapping section of Create / Update a Content Type for more details, including a list of available pre-defined namespaces. Getting Metadata into Fedora and a Triple-store The above sections described how Drupal manages and stores metadata, but Islandora 8 provides for pushing that metadata into a Fedora 4+ repository and a triple-store. Islandora does this by using Drupal's serialization capabilities to provide a JSON-LD serialization that can be ingested by Fedora 4+ repository and triple-stores. In response to actions taken as a result of if-then configurations in Contexts , Islandora sends notifications to the repository and triple-store that an entity available to ingest. The JSON-LD module (written for Islandora) takes an entity and its corresponding RDF mapping (a structure defined by the contributed RDF module) to create a JSON-LD serialization. An RDF mapping for a content type, media type, or vocabulary lists its fields and the RDF predicates that should be used for them. The JSON-LD serialization for an entity is available by appending ?_format=jsonld to the entity's URL. This particular syntax takes advantage of the REST API module. Below is an example JSONLD document representing the RDF serialization of a Repository item node created in a standard islandora-playbook based vagrant VM: { \"@graph\":[ { \"@id\":\"http://localhost:8000/node/1\", \"@type\":[ \"http://pcdm.org/models#Object\" ], \"http://purl.org/dc/terms/title\":[ { \"@value\":\"New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\", \"@language\":\"en\" } ], \"http://schema.org/author\":[ { \"@id\":\"http://localhost:8000/user/1\" } ], \"http://schema.org/dateCreated\":[ { \"@value\":\"2019-03-14T19:05:24+00:00\", \"@type\":\"http://www.w3.org/2001/XMLSchema#dateTime\" } ], \"http://schema.org/dateModified\":[ { \"@value\":\"2019-03-14T19:20:51+00:00\", \"@type\":\"http://www.w3.org/2001/XMLSchema#dateTime\" } ], \"http://purl.org/dc/terms/date\":[ { \"@value\":\"1943-05\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" }, { \"@value\":\"1943-05\", \"@type\":\"http://www.w3.org/2001/XMLSchema#gYearMonth\" } ], \"http://purl.org/dc/terms/extent\":[ { \"@value\":\"1 negative\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" } ], \"http://purl.org/dc/terms/identifier\":[ { \"@value\":\"D 630714\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" } ], \"http://purl.org/dc/terms/type\":[ { \"@id\":\"http://localhost:8000/taxonomy/term/11\" } ], \"http://purl.org/dc/terms/rights\":[ { \"@value\":\"No known restrictions. For information, see U.S. Farm Security Administration/Office of War Information Black & White Photographs(http://www.loc.gov/rr/print/res/071_fsab.html)\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" } ], \"http://purl.org/dc/terms/subject\":[ { \"@id\":\"http://localhost:8000/taxonomy/term/26\" } ], \"http://schema.org/sameAs\":[ { \"@value\":\"http://localhost:8000/node/1\" } ] }, { \"@id\":\"http://localhost:8000/user/1\", \"@type\":[ \"http://schema.org/Person\" ] }, { \"@id\":\"http://localhost:8000/taxonomy/term/11\", \"@type\":[ \"http://schema.org/Thing\" ] }, { \"@id\":\"http://localhost:8000/taxonomy/term/26\", \"@type\":[ \"http://schema.org/Thing\" ] } ] } Because the Repository item's title field is mapped to 'dc:title' in the RDF mapping, the node's title value appears like this in the JSON-LD output: \"http://purl.org/dc/terms/title\":[ { \"@value\":\"New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\", \"@language\":\"en\" } ], Also note that the URI ( @id ) value is 'http://localhost:8000/node/1' (without the ?_format=jsonld ). Old versions of Islandora 8 included the ?_format=jsonld , and dealing with discrepancies is described at \" Adding back ?_format=jsonld \".","title":"Metadata"},{"location":"user-documentation/metadata/#metadata-in-islandora-8","text":"TL;DR: In Islandora 8, metadata is stored in Drupal, in fields attached to entities (nodes or media). This allows us to interact with metadata (add, edit, remove, display, index in a search engine...) almost entirely using standard Drupal processes. If exporting this metadata to Fedora and/or a triplestore, the values are serialized to RDF using mappings that can be set for each bundle. Drupal 8 Terminology In Drupal 8, Fields can be attached to bundles (sometimes called entity sub-types -- e.g. Content types, Media types, Vocabularies) or entities (e.g. Users). For more on Fields, see \"2.3 Content Entities and Fields\" and \"6.3 Adding Basic Fields to a Content Type\" in the Official Drupal Guide. As described in the resource nodes section , Islandora 8 digital objects are comprised of Drupal nodes for descriptive metadata, Drupal media for technical metadata, and Drupal files for the binary objects. This section describes how Islandora 8 uses and extends Drupal fields to manage descriptive metadata.","title":"Metadata in Islandora 8"},{"location":"user-documentation/metadata/#content-types","text":"In Drupal, Nodes come in different sub-types called Content Types (e.g. Article, Basic page, Repository item). Content types contain fields, and configurations for how those fields can be edited or displayed. Each content type is essentially a metadata profile that can be used for a piece of web content, or to describe a digital resource. For each field in a content type, an administrator can configure how data is entered, how it can be displayed, how many values can be stored, and how long the value can be. Some configurations, such as data entry and display, can be changed at any time. Others, such as how long a value can be or what options are available in a select list, cannot be changed once content has been created without first deleting all content of that type. However, fields can be added to existing content types with no consequence. For example, the 'islandora_defaults' module provides a Repository Item content type that defines many fields including \"Alternative Title\" and \"Date Issued\". Under the management menu for Repository Item you can see a list of the fields it includes (\"Manage fields\") as well as tabs for changing the input forms (\"Manage form display\") and display modes (\"Manage display\"). See the \" Create / Update a Content Type \" section for more details on creating and configuring fields. Titles aren't fields. Note that the \"Title\" field does not appear in this list. It is a built-in part of every content type. You can edit the label of this \"field\" if you want it called something other than \"Title\" under the \"Edit\" tab for that content type. This built-in title \"field\" is limited to 255 characters; if your content has longer titles it is encouraged to create a separate long_title field to store the full title and reserve the default title field for a display title. There is a contributed module called Node Title Length , which allows an administrator to configure the length of the title field in the core node table. However, this only works on nodes (not media or other entities) and involves meddling in a core Drupal database schema, which makes some people uneasy. 7.x Migration Note: What about my XML? In 7.x, metadata were usually stored using an XML schema such as MODS or DC, as datastreams attached to an object. In Islandora 8, metadata is stored as fields. This means we are breaking out individual elements from a hierarchical structure to being individual independent values. Where some hierarchy or field grouping is necessary, this can be done in Drupal using Paragraphs , a widely-used Drupal contrib module. At the moment (Nov 2019) we are working on the technical challenge of mapping data from paragraphs into RDF in Fedora. The Metadata Interest Group has developed a default mapping ( spreadsheet , guidance document ) which provides a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Defaults. It is suggested that individual institutions customize the mapping to meet their unique needs. That said, if keeping the \"legacy\" XML metadata from 7.x is important to you, it can be attached to an Islandora 8 resource node as a Media entity. However, there is no mechanism in Islandora 8 for editing XML in a user-friendly way. When you create a node (i.e. an instantiation of a content type, such as by using Drupal's \"Add Content\" workflow), the fields defined by its content type become available. Once a node is created, its content type cannot be changed. To \"switch\" a node to a different content type, a repository manager would need to create a new node of the target content type, map the field values (programmatically or by copy-paste), and update any Media or children that refer to the old node to refer to the new one. Not all content types in your Drupal site need be Islandora \"resource nodes\". A \"resource node\" content type will likely have behaviours (such as syncing to Fedora or causing derivatives to be generated) associated with it. This configuration, and the communication to the user of which content types are and are not considered to be Islandora resource nodes is left to the discretion of the site manager. In Islandora, a \"resource node\" is usually considered a descriptive record for \"a thing\", and is conceptually similar to an \"Islandora Object\" in 7.x, i.e. a \"Fedora Object\" in Fedora 3.x and below.","title":"Content Types"},{"location":"user-documentation/metadata/#vocabularies","text":"In Drupal, Taxonomy Vocabularies (or simply Vocabularies ) are also entity sub-types that define a set of fields and their configurations. Whereas instances of content types are called nodes , items in a vocabulary are called taxonomy terms (or simply terms ). Traditionally, taxonomy terms are used to classify content in Drupal. For instance, the Article content type includes a field field_tags that can refer to terms in the Tags vocabulary. There are two ways that users can interact with taxonomies: they can be \"closed,\" e.g. a fixed list to pick from in a dropdown, or \"open,\" e.g. field_tags where users can enter new terms, which are created on the fly. This is not set on the vocabulary itself, but in the configuration of the field (typically on a node). Terms within vocabularies have an ordering, and can have hierarchical structure, but do not need to. Islandora (through the Islandora Core Feature) creates the 'Islandora Models' vocabulary which includes the terms 'Audio', 'Binary', 'Collection', 'Digital Document', 'Image', 'Page', 'Paged Content', 'Publication Issue', and 'Video'. Islandora Defaults provides contexts that cause certain actions (e.g. derivatives to happen, or blocks to appear) based on which term is used. The Controlled Access Terms module provides additional vocabularies: - Corporate Body - Country - Family - Form - Genre - Geographic Location - Language - Person - Resource Types - Subject Each of these vocabularies has its own set of fields allowing repositories to further describe them. The Repository Item content type has fields that can reference terms in these vocabularies. See 'Entity Reference fields' in the 'Field Types' section below. The vocabularies provided by default are a starting point, and a repository administrator can create whatever vocabularies are desired.","title":"Vocabularies"},{"location":"user-documentation/metadata/#field-types","text":"Fields are where Drupal entities store their data. There are different types of fields including boolean, datetime, entity reference, integer, string, text, and text_with_summary. These field types also have widgets (controlling how data is entered) and formatters (controlling how data is displayed). The Drupal 8 documentation on FieldTypes, FieldWidgets, and FieldFormatters includes a list of the core field types. Modules can provide their own field types, formatters, and widgets. The Controlled Access Terms module provides two additional types for use with Islandora: ETDF, and Typed Relation. These are described below. Entity Reference fields are a special type of field built into Drupal that creates a relationship between two entities. The field's configuration options include which kind of entities can be referenced. The 'Repository Item' content type, provided by islandora_defaults, includes several entity reference fields that reference vocabularies defined by the islandora and controlled_access_terms modules. The 'Member Of' field is an entity reference field, defined by Islandora, which is the Islandora way of imposing a hierarchical order on resource nodes. This can be used to show membership in a collection, for pages that are members of a paged item, and for members of a complex object.","title":"Field Types"},{"location":"user-documentation/metadata/#edtf","text":"The EDTF field type is for recording dates in Extended Date Time Format , which is a format based off of the hyphenated form of ISO 8601 (e.g. 1991-02-03 or 1991-02-03T10:00:00), but also allows expressions of different granularity and uncertainty. The Default EDTF widget has a validator that only allows strings that conform to the EDTF standard. The Default EDTF formatter allows these date string to be displayed in a variety of human readable ways, including big- or little-endian, and presenting months as numbers, abbreviations, or spelling month names out in full. When configuring the EDTF widget for a field in a content type, you can choose to allow date intervals, but doing this prevents the widget from accepting values that include times. (The EDTF standard states that date intervals cannot contain times, but the field should be able to accept either a valid EDTF range or a valid EDTF datetime, so this is a bug.) Example of valid inputs in a multi-valued EDTF Date field: Example of the same EDTF dates displayed using little-endian format: Example of a valid EDTF value ('1943-05') and an invalid value ('1943 May') with the corresponding error message: The configuration for the Default EDTF Widget (including options for extra strict date validation, and allowing date intervals and date sets). Example of how the EDTF formatter settings can change the display of an EDTF value:","title":"EDTF"},{"location":"user-documentation/metadata/#typed-relation","text":"A Typed Relation field is an extension of Drupal's Entity Reference field, which allows the user to qualify the relation. It was created for describing a resource's contributors (modelled as taxonomy terms or some other Drupal entities) as well as their roles in this resource node (such as 'author', 'illustrator', or 'architect'). With only Drupal's Entity Reference fields, we would need individual fields for 'author', 'illustrator', 'architect', and any other roles that may need to be made available. Using a Typed Relation field, we can have one field for \"Contributors\" and let the user pick the role from a dropdown list. Nerd note: The parts of a field are called properties, so 'entity reference' and 'relation type' are properties of the Typed Relation field type. Islandora Defaults provides a 'Linked Agent' field as part of the Repository Item content type, and populates the available relationships from the MARC relators list. The list of available relations for this field is configurable at '/admin/structure/types/manage/islandora_object/fields/node.islandora_object.field_linked_agent'. If you re-use this existing field on another content type, you can define different available relations for that instance of the field. Relations are defined in the format key|value , and the key is used in the RDF mapping (see below). Typed Relation fields and mapping to RDF: Unlike other fields, which can be assigned RDF predicates in RDF Mapping yaml files, a typed relation field uses a different predicate depending on the chosen \"type\". These predicates are assigned using the 'keys' in the key|value configuration. The key must be formated namespace:predicate , e.g. relators:act . The namespace ('relators') must be pre-defined in code, using a hook. See the RDF Mapping section of Create / Update a Content Type for more details, including a list of available pre-defined namespaces.","title":"Typed Relation"},{"location":"user-documentation/metadata/#getting-metadata-into-fedora-and-a-triple-store","text":"The above sections described how Drupal manages and stores metadata, but Islandora 8 provides for pushing that metadata into a Fedora 4+ repository and a triple-store. Islandora does this by using Drupal's serialization capabilities to provide a JSON-LD serialization that can be ingested by Fedora 4+ repository and triple-stores. In response to actions taken as a result of if-then configurations in Contexts , Islandora sends notifications to the repository and triple-store that an entity available to ingest. The JSON-LD module (written for Islandora) takes an entity and its corresponding RDF mapping (a structure defined by the contributed RDF module) to create a JSON-LD serialization. An RDF mapping for a content type, media type, or vocabulary lists its fields and the RDF predicates that should be used for them. The JSON-LD serialization for an entity is available by appending ?_format=jsonld to the entity's URL. This particular syntax takes advantage of the REST API module. Below is an example JSONLD document representing the RDF serialization of a Repository item node created in a standard islandora-playbook based vagrant VM: { \"@graph\":[ { \"@id\":\"http://localhost:8000/node/1\", \"@type\":[ \"http://pcdm.org/models#Object\" ], \"http://purl.org/dc/terms/title\":[ { \"@value\":\"New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\", \"@language\":\"en\" } ], \"http://schema.org/author\":[ { \"@id\":\"http://localhost:8000/user/1\" } ], \"http://schema.org/dateCreated\":[ { \"@value\":\"2019-03-14T19:05:24+00:00\", \"@type\":\"http://www.w3.org/2001/XMLSchema#dateTime\" } ], \"http://schema.org/dateModified\":[ { \"@value\":\"2019-03-14T19:20:51+00:00\", \"@type\":\"http://www.w3.org/2001/XMLSchema#dateTime\" } ], \"http://purl.org/dc/terms/date\":[ { \"@value\":\"1943-05\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" }, { \"@value\":\"1943-05\", \"@type\":\"http://www.w3.org/2001/XMLSchema#gYearMonth\" } ], \"http://purl.org/dc/terms/extent\":[ { \"@value\":\"1 negative\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" } ], \"http://purl.org/dc/terms/identifier\":[ { \"@value\":\"D 630714\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" } ], \"http://purl.org/dc/terms/type\":[ { \"@id\":\"http://localhost:8000/taxonomy/term/11\" } ], \"http://purl.org/dc/terms/rights\":[ { \"@value\":\"No known restrictions. For information, see U.S. Farm Security Administration/Office of War Information Black & White Photographs(http://www.loc.gov/rr/print/res/071_fsab.html)\", \"@type\":\"http://www.w3.org/2001/XMLSchema#string\" } ], \"http://purl.org/dc/terms/subject\":[ { \"@id\":\"http://localhost:8000/taxonomy/term/26\" } ], \"http://schema.org/sameAs\":[ { \"@value\":\"http://localhost:8000/node/1\" } ] }, { \"@id\":\"http://localhost:8000/user/1\", \"@type\":[ \"http://schema.org/Person\" ] }, { \"@id\":\"http://localhost:8000/taxonomy/term/11\", \"@type\":[ \"http://schema.org/Thing\" ] }, { \"@id\":\"http://localhost:8000/taxonomy/term/26\", \"@type\":[ \"http://schema.org/Thing\" ] } ] } Because the Repository item's title field is mapped to 'dc:title' in the RDF mapping, the node's title value appears like this in the JSON-LD output: \"http://purl.org/dc/terms/title\":[ { \"@value\":\"New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\", \"@language\":\"en\" } ], Also note that the URI ( @id ) value is 'http://localhost:8000/node/1' (without the ?_format=jsonld ). Old versions of Islandora 8 included the ?_format=jsonld , and dealing with discrepancies is described at \" Adding back ?_format=jsonld \".","title":"Getting Metadata into Fedora and a Triple-store"},{"location":"user-documentation/multilingual/","text":"Islandora 8 enables you to build full fledged multilingual repositories leveraging the multilingual support provided by Drupal core modules. The multilingual content gets indexed into Fedora repository as well as the Triplestore (Blazegraph), and can be queried using the SPARQL endpoint. In this guide, we will describe the steps needed to setup a basic multilingual Islandora 8 site. Drupal 8 Configurations Drupal 8 comes with four modules for multilingual support . Islandora 8 enables Language and Content Translation modules by default. Adding Languages From the top menu, go to Configuration >> Regional and language >> Languages ( http://localhost:8000/admin/config/regional/language ). Add a language. You can place the default language selector block to switch between languages. To create the language switcher block go to Structure >> Block layout. Click Place block in a region of your choice. Search for Language switcher block and click Place block . Adding Multilingual Menus From the top menu, go to Configuration >> Regional and language >> Content language and translation. Check Custom menu link under Custom language settings . Scroll down to Custom menu link section and check all the relevant fields and Save the configurations. Clear the cache (Configuration >> Development >> Performance). From the top menu, go to Structure >> Menu. Edit \"Main navigation\" menu. Default home menu item cannot be translated due to this issue . Disable that menu item. Click Add link to create a new menu item. Provide a menu title (i.e Home) and input <front> for the link field. Save. Right click on the Operations beside the new menu link and click the Translate button. Translate the menu link title for the language added above and save. Go back to home. The language switcher will enable you to switch the language/content of the menu and content. Adding a Multilingual Repository Item From the top menu, go to Content >> Add content >> Repository item. Provide the required fields and save the object. Click the Translate tab of the object, provide a title in the second language and fill any translatable fields (i.e description). Add the media for the object. Media object can be translated similar to the repository item node. Go back to home, you should be able to view content in the language selected in the language switcher. Field Label Translations If you need the field labels of the repository Item displayed in a different language, additional configuration is needed. Configuration translation module in the core needs to be enabled. Note that this will enable User Interface translation as well. Each field label needs to be translated. Alternatively, you can import existing translations. For instance, go to Interface translation import at http://localhost:8000/admin/config/regional/translate/import , select islandora translations from https://github.com/Islandora/islandora_defaults/tree/8.x-1.x/translations , set the Treat imported strings as custom translations option and import. This will provide translation for Islandora 8 repository item field labels. Cache should be cleared to see the changes. An example second language display is shown below. Fedora Representation Islandora 8 indexes the multilingual values using language tags. An example representation is shown below. Triplestore Representation Islandora 8 indexes the multilingual content using language tags to Fedora repository. An example representation is shown below. You can query the result and filter the results by a specific language. For example, to get all titles and filter by language, the following query can be used: PREFIX dcterm: <http://purl.org/dc/terms/> select ?s ?o { ?s dcterm:title ?o FILTER (lang(?o) = 'ta') } Further Reading Multilingual guide","title":"Multilingual"},{"location":"user-documentation/multilingual/#drupal-8-configurations","text":"Drupal 8 comes with four modules for multilingual support . Islandora 8 enables Language and Content Translation modules by default.","title":"Drupal 8 Configurations"},{"location":"user-documentation/multilingual/#adding-languages","text":"From the top menu, go to Configuration >> Regional and language >> Languages ( http://localhost:8000/admin/config/regional/language ). Add a language. You can place the default language selector block to switch between languages. To create the language switcher block go to Structure >> Block layout. Click Place block in a region of your choice. Search for Language switcher block and click Place block .","title":"Adding Languages"},{"location":"user-documentation/multilingual/#adding-multilingual-menus","text":"From the top menu, go to Configuration >> Regional and language >> Content language and translation. Check Custom menu link under Custom language settings . Scroll down to Custom menu link section and check all the relevant fields and Save the configurations. Clear the cache (Configuration >> Development >> Performance). From the top menu, go to Structure >> Menu. Edit \"Main navigation\" menu. Default home menu item cannot be translated due to this issue . Disable that menu item. Click Add link to create a new menu item. Provide a menu title (i.e Home) and input <front> for the link field. Save. Right click on the Operations beside the new menu link and click the Translate button. Translate the menu link title for the language added above and save. Go back to home. The language switcher will enable you to switch the language/content of the menu and content.","title":"Adding Multilingual Menus"},{"location":"user-documentation/multilingual/#adding-a-multilingual-repository-item","text":"From the top menu, go to Content >> Add content >> Repository item. Provide the required fields and save the object. Click the Translate tab of the object, provide a title in the second language and fill any translatable fields (i.e description). Add the media for the object. Media object can be translated similar to the repository item node. Go back to home, you should be able to view content in the language selected in the language switcher.","title":"Adding a Multilingual Repository Item"},{"location":"user-documentation/multilingual/#field-label-translations","text":"If you need the field labels of the repository Item displayed in a different language, additional configuration is needed. Configuration translation module in the core needs to be enabled. Note that this will enable User Interface translation as well. Each field label needs to be translated. Alternatively, you can import existing translations. For instance, go to Interface translation import at http://localhost:8000/admin/config/regional/translate/import , select islandora translations from https://github.com/Islandora/islandora_defaults/tree/8.x-1.x/translations , set the Treat imported strings as custom translations option and import. This will provide translation for Islandora 8 repository item field labels. Cache should be cleared to see the changes. An example second language display is shown below.","title":"Field Label Translations"},{"location":"user-documentation/multilingual/#fedora-representation","text":"Islandora 8 indexes the multilingual values using language tags. An example representation is shown below.","title":"Fedora Representation"},{"location":"user-documentation/multilingual/#triplestore-representation","text":"Islandora 8 indexes the multilingual content using language tags to Fedora repository. An example representation is shown below. You can query the result and filter the results by a specific language. For example, to get all titles and filter by language, the following query can be used: PREFIX dcterm: <http://purl.org/dc/terms/> select ?s ?o { ?s dcterm:title ?o FILTER (lang(?o) = 'ta') }","title":"Triplestore Representation"},{"location":"user-documentation/multilingual/#further-reading","text":"Multilingual guide","title":"Further Reading"},{"location":"user-documentation/oai/","text":"OAI-PMH The Open Archives Initiative Protocol for Metadata Harvesting , commonly referred to as OAI-PMH is a specification for exposing repository metadata. Repositories can expose or harvest metadata, or both. OAI-PMH specifies six services which can be invoked over HTTP(s). The full specification details the services: Identify: http://localhost:8000/oai/request?verb=Identify ListMetadataFormats: http://localhost:8000/oai/request?verb=ListMetadataFormats ListSets: http://localhost:8000/oai/request?verb=ListSets GetRecord: http://localhost:8000/oai/request?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:localhost:node-1 ListIdentifiers: http://localhost:8000/oai/request?verb=ListIdentifiers&metadataPrefix=oai_dc ListRecords: http://localhost:8000/oai/request?verb=ListRecords&metadataPrefix=oai_dc The Drupal module islandora_defaults includes the islandora_oaipmh module. It depends on the Drupal REST OAI-PMH module . The combination of these modules will allow your repository content (which are not modelled as 'Collection') to be harvested. Enabling Islandora OAI-PMH provides: an oai_dc endpoint of all objects available as one set ( \"oai_pmh:all_repository_items\" ) which is built using a configurable View . default configuration to connect this view with the REST OAI-PMH module. the ability to define additional sets by building additional views. Additional sets can be created by making views with the Entity Reference view display mode and enabling them on the rest_oai_pmh configuration page: /admin/config/services/rest/oai-pmh. The OAI-DC metadata format is aided by the Islandora OAI-PMH module to include the RDF Mapping for the linked agent field (from Islandora Defaults). Including agent links in the OAI-PMH metadata currently requires updating the RDF mapping to include a Dublin Core predicate for that field or any other additional fields. Alternatively, the rest_oai_pmh module also supports defining mappings with the metatag module or creating a custom metadata profile using the Twig templating system. The rest_oai_pmh module indexes set membership, so repository items may not appear immediately in their respective sets. Indexing will happen automatically during cron runs but can be triggered manually at /admin/config/services/rest/oai-pmh/queue .","title":"OAI-PMH"},{"location":"user-documentation/oai/#oai-pmh","text":"The Open Archives Initiative Protocol for Metadata Harvesting , commonly referred to as OAI-PMH is a specification for exposing repository metadata. Repositories can expose or harvest metadata, or both. OAI-PMH specifies six services which can be invoked over HTTP(s). The full specification details the services: Identify: http://localhost:8000/oai/request?verb=Identify ListMetadataFormats: http://localhost:8000/oai/request?verb=ListMetadataFormats ListSets: http://localhost:8000/oai/request?verb=ListSets GetRecord: http://localhost:8000/oai/request?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:localhost:node-1 ListIdentifiers: http://localhost:8000/oai/request?verb=ListIdentifiers&metadataPrefix=oai_dc ListRecords: http://localhost:8000/oai/request?verb=ListRecords&metadataPrefix=oai_dc The Drupal module islandora_defaults includes the islandora_oaipmh module. It depends on the Drupal REST OAI-PMH module . The combination of these modules will allow your repository content (which are not modelled as 'Collection') to be harvested. Enabling Islandora OAI-PMH provides: an oai_dc endpoint of all objects available as one set ( \"oai_pmh:all_repository_items\" ) which is built using a configurable View . default configuration to connect this view with the REST OAI-PMH module. the ability to define additional sets by building additional views. Additional sets can be created by making views with the Entity Reference view display mode and enabling them on the rest_oai_pmh configuration page: /admin/config/services/rest/oai-pmh. The OAI-DC metadata format is aided by the Islandora OAI-PMH module to include the RDF Mapping for the linked agent field (from Islandora Defaults). Including agent links in the OAI-PMH metadata currently requires updating the RDF mapping to include a Dublin Core predicate for that field or any other additional fields. Alternatively, the rest_oai_pmh module also supports defining mappings with the metatag module or creating a custom metadata profile using the Twig templating system. The rest_oai_pmh module indexes set membership, so repository items may not appear immediately in their respective sets. Indexing will happen automatically during cron runs but can be triggered manually at /admin/config/services/rest/oai-pmh/queue .","title":"OAI-PMH"},{"location":"user-documentation/objects_to_resource_nodes/","text":"From Objects to Resource Nodes: Shifting Concepts from Islandora 7 to 8 This document attempts to show the shift in how objects work from Islandora version 7 to version 8, from a non-developer perspective. Building resources in Islandora 8 Islandora 8 represents a fundamental shift forward from Islandora 7. Islandora 8 turns what are known as traditional Islandora objects into Drupal nodes. It is possible to manipulate all aspects of objects through the Drupal user interface. Non-developers can configure and set up a myriad of content and functions in Islandora that enhance the discovery of and support access to objects in the repository. Improving the discovery of and access to objects is a significant theme in Islandora. Another difference between Islandora 7 and 8 are Islandora objects. In Islandora 7, objects (video files, audio files, PDFs, etc.) are loaded through the user interface, and Datastreams are generated automatically. These consist of access and display copies, the metadata, OCH/HOCR, technical metadata, and more. All of these Datastreams are directly connected to the object and accessed through the admin interface. In Islandora 8, the traditional Islandora 7 objects (video files, audio files, etc.) are now Drupal nodes . Islandora object nodes are a special kind of Drupal node, distinct from nodes that exist for other content types such as a blog post, an article, a page (like the About page on a site), and others. These Islandora objects are still loaded through the interface and described with the data entry form and derivatives are still generated. However, the Datastreams are no longer connected to the original object in the same immutable way. Each of these Datastreams can be manipulated through Drupal by non-developers. You can create a variety of ways to view this metadata and information related to the objects. Doing so requires knowledge of Drupal 8, but this essentially means that there are many ways to view the metadata and access the related objects in Islandora 8. Traditional objects become resource nodes Until now we have thought of objects in Islandora 8 in the conventional Islandora 7 way: A file loaded in the repository with associated derivatives. It can be helpful to move away from this when learning about Islandora 8. One way to do this is to think of objects in Islandora 8 as resource nodes . While using the term \u201cobject\u201d is traditional with Islandora it can get in the way of understanding the differences and possibilities in Islandora 8. Using the term \u201cresource node\u201d reflects the fact that files such as JPEGs, MP3s, .zip, etc. that get loaded through the data entry (formerly ingest) form are now fully integrated within Drupal and can take advantage of everything that represents. The term resource node does not just refer to the individual files, however. The term reflects the new nature of objects in Islandora 8. A resource node encompasses multiple elements that all relate to each other, even if they are no longer directly connected like objects in Islandora 7. The typical elements of a resource node: Content types (one or more) Media files (the actual files of JPEGs, MP3s, .zip, etc.) that get loaded through the form Metadata fields submitted in the data entry, for example: A field denoting the 'type' of thing you're persisting (image, book, newspaper, etc...) A field that creates the familiar collection hierarchy Descriptive custom fields Derivative files (thumbnails, web-friendly service files, technical metadata, and more) It is possible to configure all elements of a resource node in Islandora 8. This fact allows full control over how one accesses the node and how nodes are displayed and discovered online. It also allows a repository to take full advantage of all third-party Drupal modules, themes, and distributions available. Islandora 8: Empowering resource nodes through Drupal These resource nodes are what the librarian, student, archivist, technician, or general non-developer creates through the data entry form. It is a lot more than just the file (JPEG, .MP3, etc.). This user is creating the node and elements that make it possible to access, manage, and preserve the resource. Islandora 8 is all about empowering this access to repository resources. It makes it possible to touch and manipulate the file itself and the elements that make it a wholly preserved and shareable digital object. This shift is actually at the core of Digital Asset Management (DAM) and librarianship \u2013 making things accessible. Islandora 8 is about doing that through Drupal 8 and the web, making it that much more available, flexible, and viable for the future. It does this by making more elements of what was a traditional DAM object configurable and manageable by more users \u2013 non-developers . Work is ongoing by the community to increase the ease of use of the admin user interface to make this even more feasible. Concept: Resource node discovery attributes Discovery attributes would include metadata fields, fields that define the collection hierarchy/structure, and any custom fields. They are any attributes of the resource node element that help manage how the resource node can be discovered through the interface and accessed by the public online. For example, the following are discovery attributes: Concept: Resource node management attributes Management attributes of the resource node help to clarify and manage its relationship within the repository and to other content. Management attributes define if a node is a resource node, which collection it belongs to, the type of resource a node is (image, book, newspaper, etc.), and similar actions. When looking at Drupal functions, the following are examples of management attributes: Content types Default content types available include article, basic page, repository item, video Ability to add any content type needed to help define the resource node Drupal Views Manages the display of all aspects of the resource node More Information The following pages expand on the concepts discussed above: Resource Nodes Media Make an Image Content Types Copyright and Usage This document was originally developed by Alex Kent and has been adapted for general use by the Islandora community.","title":"From Objects to Resource Nodes"},{"location":"user-documentation/objects_to_resource_nodes/#from-objects-to-resource-nodes-shifting-concepts-from-islandora-7-to-8","text":"This document attempts to show the shift in how objects work from Islandora version 7 to version 8, from a non-developer perspective.","title":"From Objects to Resource Nodes: Shifting Concepts from Islandora 7 to 8"},{"location":"user-documentation/objects_to_resource_nodes/#building-resources-in-islandora-8","text":"Islandora 8 represents a fundamental shift forward from Islandora 7. Islandora 8 turns what are known as traditional Islandora objects into Drupal nodes. It is possible to manipulate all aspects of objects through the Drupal user interface. Non-developers can configure and set up a myriad of content and functions in Islandora that enhance the discovery of and support access to objects in the repository. Improving the discovery of and access to objects is a significant theme in Islandora. Another difference between Islandora 7 and 8 are Islandora objects. In Islandora 7, objects (video files, audio files, PDFs, etc.) are loaded through the user interface, and Datastreams are generated automatically. These consist of access and display copies, the metadata, OCH/HOCR, technical metadata, and more. All of these Datastreams are directly connected to the object and accessed through the admin interface. In Islandora 8, the traditional Islandora 7 objects (video files, audio files, etc.) are now Drupal nodes . Islandora object nodes are a special kind of Drupal node, distinct from nodes that exist for other content types such as a blog post, an article, a page (like the About page on a site), and others. These Islandora objects are still loaded through the interface and described with the data entry form and derivatives are still generated. However, the Datastreams are no longer connected to the original object in the same immutable way. Each of these Datastreams can be manipulated through Drupal by non-developers. You can create a variety of ways to view this metadata and information related to the objects. Doing so requires knowledge of Drupal 8, but this essentially means that there are many ways to view the metadata and access the related objects in Islandora 8.","title":"Building resources in Islandora 8"},{"location":"user-documentation/objects_to_resource_nodes/#traditional-objects-become-resource-nodes","text":"Until now we have thought of objects in Islandora 8 in the conventional Islandora 7 way: A file loaded in the repository with associated derivatives. It can be helpful to move away from this when learning about Islandora 8. One way to do this is to think of objects in Islandora 8 as resource nodes . While using the term \u201cobject\u201d is traditional with Islandora it can get in the way of understanding the differences and possibilities in Islandora 8. Using the term \u201cresource node\u201d reflects the fact that files such as JPEGs, MP3s, .zip, etc. that get loaded through the data entry (formerly ingest) form are now fully integrated within Drupal and can take advantage of everything that represents. The term resource node does not just refer to the individual files, however. The term reflects the new nature of objects in Islandora 8. A resource node encompasses multiple elements that all relate to each other, even if they are no longer directly connected like objects in Islandora 7. The typical elements of a resource node: Content types (one or more) Media files (the actual files of JPEGs, MP3s, .zip, etc.) that get loaded through the form Metadata fields submitted in the data entry, for example: A field denoting the 'type' of thing you're persisting (image, book, newspaper, etc...) A field that creates the familiar collection hierarchy Descriptive custom fields Derivative files (thumbnails, web-friendly service files, technical metadata, and more) It is possible to configure all elements of a resource node in Islandora 8. This fact allows full control over how one accesses the node and how nodes are displayed and discovered online. It also allows a repository to take full advantage of all third-party Drupal modules, themes, and distributions available.","title":"Traditional objects become resource nodes"},{"location":"user-documentation/objects_to_resource_nodes/#islandora-8-empowering-resource-nodes-through-drupal","text":"These resource nodes are what the librarian, student, archivist, technician, or general non-developer creates through the data entry form. It is a lot more than just the file (JPEG, .MP3, etc.). This user is creating the node and elements that make it possible to access, manage, and preserve the resource. Islandora 8 is all about empowering this access to repository resources. It makes it possible to touch and manipulate the file itself and the elements that make it a wholly preserved and shareable digital object. This shift is actually at the core of Digital Asset Management (DAM) and librarianship \u2013 making things accessible. Islandora 8 is about doing that through Drupal 8 and the web, making it that much more available, flexible, and viable for the future. It does this by making more elements of what was a traditional DAM object configurable and manageable by more users \u2013 non-developers . Work is ongoing by the community to increase the ease of use of the admin user interface to make this even more feasible.","title":"Islandora 8: Empowering resource nodes through Drupal"},{"location":"user-documentation/objects_to_resource_nodes/#concept-resource-node-discovery-attributes","text":"Discovery attributes would include metadata fields, fields that define the collection hierarchy/structure, and any custom fields. They are any attributes of the resource node element that help manage how the resource node can be discovered through the interface and accessed by the public online. For example, the following are discovery attributes:","title":"Concept: Resource node discovery attributes"},{"location":"user-documentation/objects_to_resource_nodes/#concept-resource-node-management-attributes","text":"Management attributes of the resource node help to clarify and manage its relationship within the repository and to other content. Management attributes define if a node is a resource node, which collection it belongs to, the type of resource a node is (image, book, newspaper, etc.), and similar actions. When looking at Drupal functions, the following are examples of management attributes: Content types Default content types available include article, basic page, repository item, video Ability to add any content type needed to help define the resource node Drupal Views Manages the display of all aspects of the resource node","title":"Concept: Resource node management attributes"},{"location":"user-documentation/objects_to_resource_nodes/#more-information","text":"The following pages expand on the concepts discussed above: Resource Nodes Media Make an Image Content Types","title":"More Information"},{"location":"user-documentation/objects_to_resource_nodes/#copyright-and-usage","text":"This document was originally developed by Alex Kent and has been adapted for general use by the Islandora community.","title":"Copyright and Usage"},{"location":"user-documentation/paged-content/","text":"Paged content, books, periodicals, photographs with the front and back, etcetera, can use the members structure. (See the section describing resource node membership .) This involves creating a resource node for the root record (e.g. the book or the photograph) and child resource nodes for each sub-component (e.g. \"Page 1\" and \"Page 2\" or \"recto\" and \"verso\") with their corresponding media. Each \"child\" resource node contains a reference to their \"parent\" resource node using the field_member_of property. Child v. Member Islandora 8 uses the \"child\" and \"member\" descriptor for resource nodes that store a reference to another resource node in the \"Member Of\" field interchangeably. Administrators will more often see the \"member\" terminology more often while front-end users will usually see \"child\" terminology. Similar to the collection view showing members of a collection, Islandora provides an Islandora Model terms, Paged Content and Page , that can be used to trigger paged content behaviors. Islandora Defaults provides a Context for Paged Content resource nodes to trigger displaying an OpenSeadragon viewer showing the child resource nodes' service files. To enable this, use the Paged Content for the Islandora Model of the parent resource node and Page for the Islandora Model of the child resource node. After the child resource nodes have services file Media (either generated via the built-in derivative creation or added manually), they will be included in the OpenSeadragon paginated viewer displayed on the parent resource node's page. (See the IIIF Documentation for more details on controlling the viewer's behavior.) However, repository managers can use any method they like, such as a view-based list of teasers, a gallery, or a slide-show to display child resource nodes. By default child resource nodes are un-ordered. To order the sub-components of a paged content resource node, Islandora provides a Weight field to store a integer value on child resource nodes. Children resource nodes with smaller weight values will come before child resource nodes with larger weight values. This follows the usual ordering pattern of 1 (smaller) coming before 2 (larger). Weight values do not need to be sequential, just ordered from smallest to largest. For example, the first child resource node can have a value of 10 and the next could have a value of 20 and they will be ordered accordingly. Should a new child be added with the weight value of 15 it will automatically be sorted after the child with the weight value 10 and before the child with the weight value 20 . Child resource nodes can be reordered using a drag-and-drop interface by clicking on the Re-order Children button on the Children tab of the parent resource node. Re-ordering children resource nodes on this page and clicking Save will cause each child resource node's weight value to be updated using sequential values. Why not Drupal's book or weight modules? Drupal provides the book module in core for creating multi-level ordered content, such as books and manuals. However, this module stores structure and pagination separately from the nodes making serializing these relationships as RDF we can provide to Fedora more difficult than simply using field_member_of with an RDF mapping. Support for the book module may be added in the future. Drupal also has a weight module that provides a weight field and a drag-and-drop reordering user-interface. However, this module requires users to set a specified range of values which includes their negative corresponding value. E.g. a range setting of '20' will require all children to have a value between '-20' to '20'. This presumes a repository manager can predict how many pages the largest paged content item in their repository will be beforehand. Also, these weight values are serialized into RDF using the Collections Ontology 'index' predicate which assumes positive integer values which cannot be guaranteed using the weight module.","title":"Paged Content"},{"location":"user-documentation/resource-nodes/","text":"As we learned in the introduction , objects in an Islandora repository are represented as a combination of resource nodes, media, and files in Drupal. Because of this, their metadata profile, display, form (and much more) are configurable through the Drupal UI. This gives repository administrators a huge degree of control over their repository without any need for coding. Much more so than ever before. And since we're using a core Drupal solution for modeling our resource nodes and media, compatibility with third-party modules is virtually guaranteed. This opens up a plethora of solutions from the Drupal community that will save you untold time and effort when implementing your repository with Islandora. Properties Resource nodes have some basic properties that are common to all nodes, regardless of its content type. These properties are not fields. This means that they cannot be removed and have limited configurability. Their name, what type of data they hold, etc... are all baked in. Here's an example of the basic properties on nodes: nid: 1 uid: 1 title: \"I am an Islandora 8 object\" created: 1550703004 changed: 1550703512 uuid: 02932f2c-e4c2-4b7e-95e1-4aceab78c638 type: islandora_object status: 1 As you can see, it's all system data used at the Drupal level to track the basics. Property Value nid The local ID for the node uuid The global ID for any entity title The title for the node created Timestamp of when the node was created changed Timestamp of when the node was last updated type Content type (e.g. which group of fields are present on the node) status Published, unpublished, etc... Compared to Islandora 7 These node properties directly correspond to following Islandora 7.x object properties: Islandora 7 Islandora 8 owner uid dc.title title PID uuid status status The small amount of configurability available for these properties is found on the content type editing form where a user can choose to change the label of the title field, whether or not to display author information on the node's page, etcetera. These settings will only apply to nodes of that particular content type. To view all of a node's property and field values administrators can use the 'Devel' tab's 'Load' section: Fields In addition to the basic node properties identified above, resource nodes (like all Drupal nodes) can have fields. Most of what we would think of as descriptive metadata is stored as fields. Resource nodes use 'content types' to define a specific set of required and optional fields it has; we can think of content types as metadata profiles for our objects. For example, you might have a content type for a set of repository objects that have very specialized metadata requirements but another content type for generic repository objects that share a more general set of metadata fields. A resource node's content type is set on its creation and is immutable. The section on metadata describes in more detail how fields on Islandora objects work. Islandora has a notion of a content model , which is used to identify what type of content is being represented by a node (e.g. an image, a video, a collection of other items, etc...). This is done using a special field, Model , which accepts taxonomy terms from the Islandora Models vocabulary. By applying a term from the Islandora Models vocabulary to a node, Islandora will become aware of how to handle the node in response to certain events, like choosing a viewer or generating derivatives. Compared to Islandora 7 Content models in Islandora 7 were immutable and contained restrictions as to what types of datastreams could be associated with an object. Islandora 8 imposes no such restrictions. Content models can be changed at any time, and they in no way dictate what types of media can be associated with a node. Media All resource nodes can be linked to any number of media. The media associated with a resource node can be managed using the \"Media\" tab when viewing a node. Much like the \"Members\" tab, Actions can be performed in bulk using the checkboxes and Actions dropdown. See the media section for more details. Display Hints Drupal uses \"View Modes\" to provide alternative ways to present content to users. You may be familiar with the \"full\" and \"teaser\" versions of nodes, which are rendered using two corresponding kinds of View modes. Islandora also uses view modes to control how media content is displayed. Islandora provides two view modes for Media, one which renders the OpenSeadragon viewer and the other which renders the PDFjs viewer. These two View modes can be set explicitly in the node edit form or you can configure Islandora to use a specific View mode for all media with a specific Mime type using Contexts . To set it explicitly on the resource node's edit form, simply check the View mode you want to use for that node in the Display hints field: The selected View mode will then be used when the resource node's page is rendered. At a global level, there are a couple of ways to tell Drupal to use the PDFjs viewer to render the content of the media field whenever the media has a Mime type of application/pdf . The first way is to edit the \"PDFjs\" Context. By default, this Context tells Drupal to use the PDFjs viewer if the node has the term \"PDFjs\" (yes, that's a taxonomy term): If you add the Condition \"Node has Media with Mime type\" and configure it to use application/pdf as the Mime type, like this: Context will use whichever Condition applies (as long as you don't check \"Require all conditions\"). That is, if the \"PDFjs\" display hint option in the node edit form is checked, or if the node's media has a Mime type of application/pdf , the media content will be rendered using the PDFjs viewer. The second way to use the media's Mime type to render its content with the PDFjs viewer is to create a separate Context that will detect the media's Mime type and use the configured View mode automatically. To do this, create a new Context. Add a \"Node has Media with Mime type\" condition and specify the Mime type, and then add a \"Change View mode\" Reaction that selects the desired view mode: Finally, save your Context. From that point on, whenever the media for a node has the configured Mime type, Drupal will render the media using the corresponding view mode. The node-level and global approaches are not exclusive to one another. One Context can override another depending on the order of execution. Whichever Condition applies last between the node-level Condition (which in this case is the \"Node has term\" condition) the global Condition (which is \"Node has Media with Mime type\"), that one will override the other. An example of having the View mode specified in the node edit form intentionally override the View mode based on Mime type is to have media with the image/jp2 mime-type configured to use to use the OpenSeadragon viewer, but to manually select the OpenSeadragon view mode for nodes with JPEG media (for example, a very large JPEG image of a map, where the OpenSeadragon's pan and zoom features would be useful). Members Islandora has a notion of membership , which is used to create a parent/child relationship between two resource nodes. Membership is denoted using another special field, \"Member Of\". The \"Member Of\" field can hold multiple references, so it is possible for a single child to belong to multiple parents, but may also complicate the creation of breadcrumbs. Any two nodes can be related in this way, though typically, the parent node has a content model of Collection or Paged Content (see their respective pages for more details). Compared to Islandora 7 In Islandora 7, there was a distinction between belonging to a collection and belonging to a compound object. In Islandora 8, this distinction is not present, essentially allowing every resource node to be part of a compound object. Child v. Member Islandora 8 uses the \"child\" and \"member\" descriptor for resource nodes that store a reference to another resource node in the \"Member Of\" field interchangeably. Administrators will more often see the \"member\" terminology more often while front-end users will usually see \"child\" terminology. For any node, its Children tab can be used to see all its members. You can also perform Actions in bulk on members using the checkboxes and the Actions dropdown as well as clicking on the Re-order Children tab to adjust the order in which they display.","title":"Resource Nodes"},{"location":"user-documentation/resource-nodes/#properties","text":"Resource nodes have some basic properties that are common to all nodes, regardless of its content type. These properties are not fields. This means that they cannot be removed and have limited configurability. Their name, what type of data they hold, etc... are all baked in. Here's an example of the basic properties on nodes: nid: 1 uid: 1 title: \"I am an Islandora 8 object\" created: 1550703004 changed: 1550703512 uuid: 02932f2c-e4c2-4b7e-95e1-4aceab78c638 type: islandora_object status: 1 As you can see, it's all system data used at the Drupal level to track the basics. Property Value nid The local ID for the node uuid The global ID for any entity title The title for the node created Timestamp of when the node was created changed Timestamp of when the node was last updated type Content type (e.g. which group of fields are present on the node) status Published, unpublished, etc... Compared to Islandora 7 These node properties directly correspond to following Islandora 7.x object properties: Islandora 7 Islandora 8 owner uid dc.title title PID uuid status status The small amount of configurability available for these properties is found on the content type editing form where a user can choose to change the label of the title field, whether or not to display author information on the node's page, etcetera. These settings will only apply to nodes of that particular content type. To view all of a node's property and field values administrators can use the 'Devel' tab's 'Load' section:","title":"Properties"},{"location":"user-documentation/resource-nodes/#fields","text":"In addition to the basic node properties identified above, resource nodes (like all Drupal nodes) can have fields. Most of what we would think of as descriptive metadata is stored as fields. Resource nodes use 'content types' to define a specific set of required and optional fields it has; we can think of content types as metadata profiles for our objects. For example, you might have a content type for a set of repository objects that have very specialized metadata requirements but another content type for generic repository objects that share a more general set of metadata fields. A resource node's content type is set on its creation and is immutable. The section on metadata describes in more detail how fields on Islandora objects work. Islandora has a notion of a content model , which is used to identify what type of content is being represented by a node (e.g. an image, a video, a collection of other items, etc...). This is done using a special field, Model , which accepts taxonomy terms from the Islandora Models vocabulary. By applying a term from the Islandora Models vocabulary to a node, Islandora will become aware of how to handle the node in response to certain events, like choosing a viewer or generating derivatives. Compared to Islandora 7 Content models in Islandora 7 were immutable and contained restrictions as to what types of datastreams could be associated with an object. Islandora 8 imposes no such restrictions. Content models can be changed at any time, and they in no way dictate what types of media can be associated with a node.","title":"Fields"},{"location":"user-documentation/resource-nodes/#media","text":"All resource nodes can be linked to any number of media. The media associated with a resource node can be managed using the \"Media\" tab when viewing a node. Much like the \"Members\" tab, Actions can be performed in bulk using the checkboxes and Actions dropdown. See the media section for more details.","title":"Media"},{"location":"user-documentation/resource-nodes/#display-hints","text":"Drupal uses \"View Modes\" to provide alternative ways to present content to users. You may be familiar with the \"full\" and \"teaser\" versions of nodes, which are rendered using two corresponding kinds of View modes. Islandora also uses view modes to control how media content is displayed. Islandora provides two view modes for Media, one which renders the OpenSeadragon viewer and the other which renders the PDFjs viewer. These two View modes can be set explicitly in the node edit form or you can configure Islandora to use a specific View mode for all media with a specific Mime type using Contexts . To set it explicitly on the resource node's edit form, simply check the View mode you want to use for that node in the Display hints field: The selected View mode will then be used when the resource node's page is rendered. At a global level, there are a couple of ways to tell Drupal to use the PDFjs viewer to render the content of the media field whenever the media has a Mime type of application/pdf . The first way is to edit the \"PDFjs\" Context. By default, this Context tells Drupal to use the PDFjs viewer if the node has the term \"PDFjs\" (yes, that's a taxonomy term): If you add the Condition \"Node has Media with Mime type\" and configure it to use application/pdf as the Mime type, like this: Context will use whichever Condition applies (as long as you don't check \"Require all conditions\"). That is, if the \"PDFjs\" display hint option in the node edit form is checked, or if the node's media has a Mime type of application/pdf , the media content will be rendered using the PDFjs viewer. The second way to use the media's Mime type to render its content with the PDFjs viewer is to create a separate Context that will detect the media's Mime type and use the configured View mode automatically. To do this, create a new Context. Add a \"Node has Media with Mime type\" condition and specify the Mime type, and then add a \"Change View mode\" Reaction that selects the desired view mode: Finally, save your Context. From that point on, whenever the media for a node has the configured Mime type, Drupal will render the media using the corresponding view mode. The node-level and global approaches are not exclusive to one another. One Context can override another depending on the order of execution. Whichever Condition applies last between the node-level Condition (which in this case is the \"Node has term\" condition) the global Condition (which is \"Node has Media with Mime type\"), that one will override the other. An example of having the View mode specified in the node edit form intentionally override the View mode based on Mime type is to have media with the image/jp2 mime-type configured to use to use the OpenSeadragon viewer, but to manually select the OpenSeadragon view mode for nodes with JPEG media (for example, a very large JPEG image of a map, where the OpenSeadragon's pan and zoom features would be useful).","title":"Display Hints"},{"location":"user-documentation/resource-nodes/#members","text":"Islandora has a notion of membership , which is used to create a parent/child relationship between two resource nodes. Membership is denoted using another special field, \"Member Of\". The \"Member Of\" field can hold multiple references, so it is possible for a single child to belong to multiple parents, but may also complicate the creation of breadcrumbs. Any two nodes can be related in this way, though typically, the parent node has a content model of Collection or Paged Content (see their respective pages for more details). Compared to Islandora 7 In Islandora 7, there was a distinction between belonging to a collection and belonging to a compound object. In Islandora 8, this distinction is not present, essentially allowing every resource node to be part of a compound object. Child v. Member Islandora 8 uses the \"child\" and \"member\" descriptor for resource nodes that store a reference to another resource node in the \"Member Of\" field interchangeably. Administrators will more often see the \"member\" terminology more often while front-end users will usually see \"child\" terminology. For any node, its Children tab can be used to see all its members. You can also perform Actions in bulk on members using the checkboxes and the Actions dropdown as well as clicking on the Re-order Children tab to adjust the order in which they display.","title":"Members"},{"location":"user-documentation/searching/","text":"Setup and Configure Search Islandora 8 comes with the Drupal 8 Search API and SOLR modules enabled with a corresponding SOLR instance. This guide gives an overview to the setup provided by the islandora-playbook. Much more detail is available in the Search API documentation . Another helpful resource is Adam Fuch's \"Drupal 8 Custom Site Search with Search API\" (https://www.electriccitizen.com, 2018-01-10; last accessed 2019-03-08). Indexing Islandora 8 with SOLR To access the search indexing settings, log in as an administrator and navigate to '/admin/config/search/search-api' or click Configuration and then Search API . SOLR Server Configuration On the Search API page, Use the Solr Server link to view the SOLR server's configuration and the Default Solr content index link to view or update the index settings. In most cases, where the site was built using Ansible, the Solr Server settings that were configured during installation should be left alone. SOLR Index Configuration The Default Solr content index user interface is divided into four tabs: View , Edit , Fields , and Processors . View Tab The 'View' tab gives an overview of the index and its status: Index status is a progress bar that indicates how many items have been indexed. Status allows you to enable/disable the index from being used. Datasource indicates what types of entities are being indexed and how many have. Tracker states which item tracker is being used. Server provides a link to the SOLR server's configuration page. Server index status is a count of the total number of items returned from an unfiltered empty search. Generally speaking, this should match the total number of items indexed. See the Drupal 8 Search API FAQ for more details. Cron batch size displays how many items will be indexed when Drupal's cron runs. The View tab also provides links to some common actions. Start Indexing Now allows you to start a indexing job for a specified number of items (default is 'all'). You can also specify how many items should be indexed in each batch (default is '50'). The other links allow a repository manager to queue all objects for reindexing, clear the index, or rebuild tracking information. Edit Tab The Edit tab allows repository managers to configure how the index works as a whole, including the Index name, the data sources \u2014 entity types \u2014 it can index (including which specific content types or taxonomies will be indexed), which server it is connected to, and other SOLR-specific options. Content (types) is the only data source enabled by default. Selecting Taxonomy term will enable searching taxonomies which is recommended if the repository uses taxonomies for subjects or other discovery points. Once the data sources are enabled a configuration box for each of them will appear in a section just below the list of data sources. This allows repository managers to select which content types (or taxonomy vocabularies) will be included in the index. By default all the content types, and vocabularies if the taxonomy data source is enabled, are indexed. Defaults The defaults assume a repository is adding content using the web interface. If a repository manager plans on bulk-loading content they should disable the Index items immediately option in the expandable Index Options box and increase the 'Cron batch size' option. Fields Tab The Fields tab allows repository managers to select which fields will be indexed. The default set of fields enabled come from a standard Drupal installation and do not reflect the fields Islandora adds for 'Repository Item'. Repository managers need to add the fields necessary for their Islandora instance. To add a field, click the + Add fields button. A shadow-box will appear with a list of the fields available for the index. Some fields, such as the Body ('body') field provided by Drupal, have multiple properties which can be completely different values or variations on the same value. Click on the plus-sign next to the field to show the properties available to index. In most cases repository managers can ignore the properties list and click the Add button by the field to index the default property ('value'). Only select a different field property if you understand how it will impact user searching. Entity reference fields, such as Tags ('field_tags'), allow you to select fields or their properties from the referenced entity for indexing, such as a referenced taxonomy term's name field. Once the fields are added they can be configured further on the Fields tab, although the label, machine name, and type usually don't need to be changed. The 'Type' dropdown has several different Full-text processing options available, which may be of interest. Each is described in the expandable Data Types box at the bottom of the page. The Boost setting allows repository managers to increase the weight of particular fields when calculating search relevancy. Processors Tab The Processors tab allows repository managers to adjust how data and search queries are processed to adjust results. The defaults are acceptable in most cases. Searching Islandora 8 The Search API SOLR module comes with a search page pre-configured (accessible at '/solr-search/content'). To edit the search page, navigate to '/admin/structure/views/view/solr_search_content'. Repository managers may want to change the URL used to access the page, add it to the site navigation, or add a search box. In the 'Page Settings' box in the middle of the page, click on the existing path to open a shadow-box with an edit field. Change the URL as desired, for example, to 'search' and click Apply . Then, click the No menu link just below it to open the menu settings shadow-box. Selecting 'Normal menu entry' will allow a repository manager to add a menu link text, description, and place it within the site menu tree (the default, <Main navigation> works for most sites). A search box can be added by expanding the Advanced options and changing the Exposed form in block setting and then use the Block Layout interface (found at '/admin/structure/block') to place the block where desired. After making changes to the View's settings, click the Save button to ensure the changes are not lost. Islandora's Repository Items are displayed in the search results as a fully rendered entity by default. Repository managers can choose which view mode should be used for each search datasource by clicking the Settings link next to the Show: setting under the Format section of the search view configuration page (shown in a red box in the screenshot below). The Teaser and Search result highlighting input are the two most likely options. Alternatively, repository managers can select specific fields to display instead by clicking the Rendered Entity link and changing it to Fields and then choosing which fields will be displayed in the Fields section underneath. Thumbnails thumbnails will not immediately be available using the Fields display option without more advanced configurations.","title":"Searching"},{"location":"user-documentation/searching/#setup-and-configure-search","text":"Islandora 8 comes with the Drupal 8 Search API and SOLR modules enabled with a corresponding SOLR instance. This guide gives an overview to the setup provided by the islandora-playbook. Much more detail is available in the Search API documentation . Another helpful resource is Adam Fuch's \"Drupal 8 Custom Site Search with Search API\" (https://www.electriccitizen.com, 2018-01-10; last accessed 2019-03-08).","title":"Setup and Configure Search"},{"location":"user-documentation/searching/#indexing-islandora-8-with-solr","text":"To access the search indexing settings, log in as an administrator and navigate to '/admin/config/search/search-api' or click Configuration and then Search API .","title":"Indexing Islandora 8 with SOLR"},{"location":"user-documentation/searching/#solr-server-configuration","text":"On the Search API page, Use the Solr Server link to view the SOLR server's configuration and the Default Solr content index link to view or update the index settings. In most cases, where the site was built using Ansible, the Solr Server settings that were configured during installation should be left alone.","title":"SOLR Server Configuration"},{"location":"user-documentation/searching/#solr-index-configuration","text":"The Default Solr content index user interface is divided into four tabs: View , Edit , Fields , and Processors .","title":"SOLR Index Configuration"},{"location":"user-documentation/searching/#view-tab","text":"The 'View' tab gives an overview of the index and its status: Index status is a progress bar that indicates how many items have been indexed. Status allows you to enable/disable the index from being used. Datasource indicates what types of entities are being indexed and how many have. Tracker states which item tracker is being used. Server provides a link to the SOLR server's configuration page. Server index status is a count of the total number of items returned from an unfiltered empty search. Generally speaking, this should match the total number of items indexed. See the Drupal 8 Search API FAQ for more details. Cron batch size displays how many items will be indexed when Drupal's cron runs. The View tab also provides links to some common actions. Start Indexing Now allows you to start a indexing job for a specified number of items (default is 'all'). You can also specify how many items should be indexed in each batch (default is '50'). The other links allow a repository manager to queue all objects for reindexing, clear the index, or rebuild tracking information.","title":"View Tab"},{"location":"user-documentation/searching/#edit-tab","text":"The Edit tab allows repository managers to configure how the index works as a whole, including the Index name, the data sources \u2014 entity types \u2014 it can index (including which specific content types or taxonomies will be indexed), which server it is connected to, and other SOLR-specific options. Content (types) is the only data source enabled by default. Selecting Taxonomy term will enable searching taxonomies which is recommended if the repository uses taxonomies for subjects or other discovery points. Once the data sources are enabled a configuration box for each of them will appear in a section just below the list of data sources. This allows repository managers to select which content types (or taxonomy vocabularies) will be included in the index. By default all the content types, and vocabularies if the taxonomy data source is enabled, are indexed. Defaults The defaults assume a repository is adding content using the web interface. If a repository manager plans on bulk-loading content they should disable the Index items immediately option in the expandable Index Options box and increase the 'Cron batch size' option.","title":"Edit Tab"},{"location":"user-documentation/searching/#fields-tab","text":"The Fields tab allows repository managers to select which fields will be indexed. The default set of fields enabled come from a standard Drupal installation and do not reflect the fields Islandora adds for 'Repository Item'. Repository managers need to add the fields necessary for their Islandora instance. To add a field, click the + Add fields button. A shadow-box will appear with a list of the fields available for the index. Some fields, such as the Body ('body') field provided by Drupal, have multiple properties which can be completely different values or variations on the same value. Click on the plus-sign next to the field to show the properties available to index. In most cases repository managers can ignore the properties list and click the Add button by the field to index the default property ('value'). Only select a different field property if you understand how it will impact user searching. Entity reference fields, such as Tags ('field_tags'), allow you to select fields or their properties from the referenced entity for indexing, such as a referenced taxonomy term's name field. Once the fields are added they can be configured further on the Fields tab, although the label, machine name, and type usually don't need to be changed. The 'Type' dropdown has several different Full-text processing options available, which may be of interest. Each is described in the expandable Data Types box at the bottom of the page. The Boost setting allows repository managers to increase the weight of particular fields when calculating search relevancy.","title":"Fields Tab"},{"location":"user-documentation/searching/#processors-tab","text":"The Processors tab allows repository managers to adjust how data and search queries are processed to adjust results. The defaults are acceptable in most cases.","title":"Processors Tab"},{"location":"user-documentation/searching/#searching-islandora-8","text":"The Search API SOLR module comes with a search page pre-configured (accessible at '/solr-search/content'). To edit the search page, navigate to '/admin/structure/views/view/solr_search_content'. Repository managers may want to change the URL used to access the page, add it to the site navigation, or add a search box. In the 'Page Settings' box in the middle of the page, click on the existing path to open a shadow-box with an edit field. Change the URL as desired, for example, to 'search' and click Apply . Then, click the No menu link just below it to open the menu settings shadow-box. Selecting 'Normal menu entry' will allow a repository manager to add a menu link text, description, and place it within the site menu tree (the default, <Main navigation> works for most sites). A search box can be added by expanding the Advanced options and changing the Exposed form in block setting and then use the Block Layout interface (found at '/admin/structure/block') to place the block where desired. After making changes to the View's settings, click the Save button to ensure the changes are not lost. Islandora's Repository Items are displayed in the search results as a fully rendered entity by default. Repository managers can choose which view mode should be used for each search datasource by clicking the Settings link next to the Show: setting under the Format section of the search view configuration page (shown in a red box in the screenshot below). The Teaser and Search result highlighting input are the two most likely options. Alternatively, repository managers can select specific fields to display instead by clicking the Rendered Entity link and changing it to Fields and then choosing which fields will be displayed in the Fields section underneath. Thumbnails thumbnails will not immediately be available using the Fields display option without more advanced configurations.","title":"Searching Islandora 8"},{"location":"user-documentation/usage-stats/","text":"Drupal 8 supports various web analytics integrations such as google analytics and Matomo . For privacy reasons, Islandora 8 integrates Matomo web analytics platforms by default. The Matomo server is installed here: http://localhost:8000/matomo. The default configurations can be found in http://localhost:8000/admin/config/system/matomo . You can login to the Matomo server using username admin and password islandora . The dashboard will look like this: To see page views, login to Matomo and go to Behaviour >> Pages. Further Reading Matomo User Guides","title":"Usage Stats"},{"location":"user-documentation/usage-stats/#further-reading","text":"Matomo User Guides","title":"Further Reading"},{"location":"user-documentation/user-intro/","text":"This User Documentation section is aimed at site admins and repository managers who need to understand and configure their Islandora. It will go in depth on how Islandora allows you to use the various features of Drupal to construct and display repository items. Islandora, like Drupal, provides tools to create a site, but does not force you to conform to any specific site structure, organization, or navigation. There is a hope that we can provide something useful out of the box, while also allowing the full suite of Drupal configuration options. This out-of-the-box configuration is the Islandora Demo module. It is recommended to be familiar with the basics of Drupal, including content types, fields, users, and views. The Official Drupal 8 User Guide and the Community Guide to Drupal 8 are a good place to start. Object Modeling In Islandora, when we say object , we mean a collection of properties describing something. And when we say datastream , we mean a file that is a digital representation of an object. Content in our repositories is stored as an object that is associated with any number of datastreams. In Drupal terms, that makes everything an entity , where An object is a node (a.k.a. content ). Nodes have properties that can be configured called fields . Fields for nodes are grouped together as content types . Datastreams are media , which are files that can have their own fields and media types . Metadata used to categorize entities are taxonomy terms , which also have their own fields and vocabularies . They can represent everything from simple labels to more complex concepts such as people, places, and subjects. Fedora Islandora 7.x basically inherits its object model from Fedora 3.x. In 7.x, Fedora stores all properties and content associated with an object - not only its owner, dc.title, status, PID, and status, but also any content files such as OBJ, DC, MODS, and RELS-EXT. In Islandora 7.x, Fedora is the authoritative, primary source for all aspects of an object. Fedora 3.x is not an optional component of an Islandora 7.x repository, it is the primary datastore. In Islandora 8, using Fedora is optional. That's right, optional. Drupal, and not Fedora, is the primary source of all aspects of an Islandora 8 object, and, with some variations, Drupal, not Fedora, is the primary datastore in an Islandora repository. If Fedora is present in an Islandora 8 repository, content in it is a tightly synchronized copy of object properties and files managed by Drupal. Even though Fedora is optional in Islandora 8, most repositories will use it since it provides its own set of services that are worth taking advantage of, such as: flexible, and configurable, disk storage architecture fixity digest generation Memento versioning integration with RDF/Linked Data triplestores Integration with Microservices via API-X WebAC Policies for access control (not currently leveraged by default) In Islandora repositories that use Fedora, all properties about Drupal nodes are mirrored in Fedora as RDF properties. But, even if an Islandora instance does not use Fedora, Drupal can provide an object's properties as RDF (again, Drupal is the primary source of data in Islandora 8). In addition, the Drupal media associated with Islandora 8 objects are persisted to Fedora, although exactly which media is configurable within the Islandora 8 admin interface. Just as Drupal out of the box has a public and private filesystem, Islandora adds a third filesystem to Drupal called, not surprisingly, \"fedora\", and it is to this filesystem that media are persisted. We will provide more information about Fedora's role in an Islandora 8 repository in the metadata and media sections. Architecture Conceptual Diagram Many users of Islandora may be familiar with the metaphorical diagram of Islandora 7 as a cheeseburger, which provides a memorable approximation of how the different parts of the software stack interact in a vertically-integrated, relatively customizable fashion (ie, Drupal, Solr, Islandora, and Fedora are stable layers, and the \"toppings\" stand in for Solution Packs and other utilities that can be added or removed to customize Islandora): For a similar conceptual approach to Islandora 8, we present it as a bento box: a very modular platform, in which each piece may be removed and replaced with something different, without disrupting other parts of the stack: For a true diagram of how the various parts of Islandora 8 interact, please see the full Architecture Diagram","title":"Introduction"},{"location":"user-documentation/user-intro/#object-modeling","text":"In Islandora, when we say object , we mean a collection of properties describing something. And when we say datastream , we mean a file that is a digital representation of an object. Content in our repositories is stored as an object that is associated with any number of datastreams. In Drupal terms, that makes everything an entity , where An object is a node (a.k.a. content ). Nodes have properties that can be configured called fields . Fields for nodes are grouped together as content types . Datastreams are media , which are files that can have their own fields and media types . Metadata used to categorize entities are taxonomy terms , which also have their own fields and vocabularies . They can represent everything from simple labels to more complex concepts such as people, places, and subjects.","title":"Object Modeling"},{"location":"user-documentation/user-intro/#fedora","text":"Islandora 7.x basically inherits its object model from Fedora 3.x. In 7.x, Fedora stores all properties and content associated with an object - not only its owner, dc.title, status, PID, and status, but also any content files such as OBJ, DC, MODS, and RELS-EXT. In Islandora 7.x, Fedora is the authoritative, primary source for all aspects of an object. Fedora 3.x is not an optional component of an Islandora 7.x repository, it is the primary datastore. In Islandora 8, using Fedora is optional. That's right, optional. Drupal, and not Fedora, is the primary source of all aspects of an Islandora 8 object, and, with some variations, Drupal, not Fedora, is the primary datastore in an Islandora repository. If Fedora is present in an Islandora 8 repository, content in it is a tightly synchronized copy of object properties and files managed by Drupal. Even though Fedora is optional in Islandora 8, most repositories will use it since it provides its own set of services that are worth taking advantage of, such as: flexible, and configurable, disk storage architecture fixity digest generation Memento versioning integration with RDF/Linked Data triplestores Integration with Microservices via API-X WebAC Policies for access control (not currently leveraged by default) In Islandora repositories that use Fedora, all properties about Drupal nodes are mirrored in Fedora as RDF properties. But, even if an Islandora instance does not use Fedora, Drupal can provide an object's properties as RDF (again, Drupal is the primary source of data in Islandora 8). In addition, the Drupal media associated with Islandora 8 objects are persisted to Fedora, although exactly which media is configurable within the Islandora 8 admin interface. Just as Drupal out of the box has a public and private filesystem, Islandora adds a third filesystem to Drupal called, not surprisingly, \"fedora\", and it is to this filesystem that media are persisted. We will provide more information about Fedora's role in an Islandora 8 repository in the metadata and media sections.","title":"Fedora"},{"location":"user-documentation/user-intro/#architecture","text":"","title":"Architecture"},{"location":"user-documentation/user-intro/#conceptual-diagram","text":"Many users of Islandora may be familiar with the metaphorical diagram of Islandora 7 as a cheeseburger, which provides a memorable approximation of how the different parts of the software stack interact in a vertically-integrated, relatively customizable fashion (ie, Drupal, Solr, Islandora, and Fedora are stable layers, and the \"toppings\" stand in for Solution Packs and other utilities that can be added or removed to customize Islandora): For a similar conceptual approach to Islandora 8, we present it as a bento box: a very modular platform, in which each piece may be removed and replaced with something different, without disrupting other parts of the stack: For a true diagram of how the various parts of Islandora 8 interact, please see the full Architecture Diagram","title":"Conceptual Diagram"},{"location":"user-documentation/users/","text":"Managing Users How to Add a User Log in to Drupal. You will need the Administrator role to Manage Users. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu to bring up the People page. Click the blue Add user button to bring up the Add user page. Enter all required fields, as indicated by red asterisks, in the Add user page. In the Roles section, click on the roles that the new user will need. Click on \"Administrator\" if the new user will need to be able to run administrative tasks in Drupal or Islandora 8. Click on \"fedoraAdmin\" if the new user will need to be able to write to Fedora. This is required by the WebAC authentication so Islandora 8 and Fedora can communicate. Review other settings available for a new user such as: Site language English selected by default. Contact Settings section Personal contact form selected by default. Click on the Create New Account button at the bottom of the Add user page to finish adding a new user. To review/edit the permission for each role, in the People page click the Permissions tab in the set of tabs above the Add user button. How to Create a New User Role Log in to Drupal. You will need the Administrator role to edit or add roles. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. Click the blue Add role button to bring up the Add role page. Name the role in a way that it can be disambiguated from related activities or similar groups. For example: use the course code for a particular class of students working on a particular collection. Click the blue Save button. How to Edit Role Permissions Log in to Drupal. You will need the Administrator role to edit permissions. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. To edit the permissions for a role click the Edit dropdown menu to the right of a role and select Edit Permissions to bring up the Edit role page. Scroll down or search for options that have an Islandora prefix or contain the word Islandora . For example, Islandora Access: Create terms . Islandora Quick Lessons Learn more with this video on how to Add a User . Further Reading on Managing Users in Drupal For more information on managing users in Drupal visit the section Managing User Accounts of Drupal.org.","title":"Add a New User"},{"location":"user-documentation/users/#managing-users","text":"","title":"Managing Users"},{"location":"user-documentation/users/#how-to-add-a-user","text":"Log in to Drupal. You will need the Administrator role to Manage Users. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu to bring up the People page. Click the blue Add user button to bring up the Add user page. Enter all required fields, as indicated by red asterisks, in the Add user page. In the Roles section, click on the roles that the new user will need. Click on \"Administrator\" if the new user will need to be able to run administrative tasks in Drupal or Islandora 8. Click on \"fedoraAdmin\" if the new user will need to be able to write to Fedora. This is required by the WebAC authentication so Islandora 8 and Fedora can communicate. Review other settings available for a new user such as: Site language English selected by default. Contact Settings section Personal contact form selected by default. Click on the Create New Account button at the bottom of the Add user page to finish adding a new user. To review/edit the permission for each role, in the People page click the Permissions tab in the set of tabs above the Add user button.","title":"How to Add a User"},{"location":"user-documentation/users/#how-to-create-a-new-user-role","text":"Log in to Drupal. You will need the Administrator role to edit or add roles. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. Click the blue Add role button to bring up the Add role page. Name the role in a way that it can be disambiguated from related activities or similar groups. For example: use the course code for a particular class of students working on a particular collection. Click the blue Save button.","title":"How to Create a New User Role"},{"location":"user-documentation/users/#how-to-edit-role-permissions","text":"Log in to Drupal. You will need the Administrator role to edit permissions. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. To edit the permissions for a role click the Edit dropdown menu to the right of a role and select Edit Permissions to bring up the Edit role page. Scroll down or search for options that have an Islandora prefix or contain the word Islandora . For example, Islandora Access: Create terms . Islandora Quick Lessons Learn more with this video on how to Add a User .","title":"How to Edit Role Permissions"},{"location":"user-documentation/users/#further-reading-on-managing-users-in-drupal","text":"For more information on managing users in Drupal visit the section Managing User Accounts of Drupal.org.","title":"Further Reading on Managing Users in Drupal"},{"location":"user-documentation/versioning/","text":"Versioning As a user of an Islandora repository, you may be wondering - Is this content being versioned? Could I restore from a previous version if I needed to? Can I see a list of versions for an object? The answer to these questions is two-fold, and largely yes. The architecture of Islandora provides users with a Drupal implementation and a Fedora implementation which are connected as of the 8.x-1.1 release of Islandora. Drupal Revisioning Drupal provides a concept of revisions which allows you to track the differences between multiple versions of your content and revert to older ones. The list of revisions for a node are available at http://localhost:8000/node/1/revisions . There are Drupal docs on revisioning. Media objects are also versioned in Drupal but there is not a UI component for this - see related issue . Fedora and Memento Fedora implements the Memento specification for versioning resources, which is a time-based HTTP framework. Fedora provides documentation as well as an API implementation . Basic Data Flow A node or media object is created or updated in Drupal. When an entity is revisionable and it isn't the initial creation, it adds a flag to the event object that gets passed to Alpaca. The islandora-indexing-fcrepo module of Alpaca looks for that flag and fires a call to the versioning endpoint of Milliner . Milliner uses the Chullo library to create a version in Fedora.","title":"Versioning"},{"location":"user-documentation/versioning/#versioning","text":"As a user of an Islandora repository, you may be wondering - Is this content being versioned? Could I restore from a previous version if I needed to? Can I see a list of versions for an object? The answer to these questions is two-fold, and largely yes. The architecture of Islandora provides users with a Drupal implementation and a Fedora implementation which are connected as of the 8.x-1.1 release of Islandora.","title":"Versioning"},{"location":"user-documentation/versioning/#drupal-revisioning","text":"Drupal provides a concept of revisions which allows you to track the differences between multiple versions of your content and revert to older ones. The list of revisions for a node are available at http://localhost:8000/node/1/revisions . There are Drupal docs on revisioning. Media objects are also versioned in Drupal but there is not a UI component for this - see related issue .","title":"Drupal Revisioning"},{"location":"user-documentation/versioning/#fedora-and-memento","text":"Fedora implements the Memento specification for versioning resources, which is a time-based HTTP framework. Fedora provides documentation as well as an API implementation .","title":"Fedora and Memento"},{"location":"user-documentation/versioning/#basic-data-flow","text":"A node or media object is created or updated in Drupal. When an entity is revisionable and it isn't the initial creation, it adds a flag to the event object that gets passed to Alpaca. The islandora-indexing-fcrepo module of Alpaca looks for that flag and fires a call to the versioning endpoint of Milliner . Milliner uses the Chullo library to create a version in Fedora.","title":"Basic Data Flow"},{"location":"user-documentation/video-docs/","text":"Video Documentation Islandora Quick Lessons are a series of short videos demonstrating how to do common tasks in Islandora 8. New videos are added to the playlist regularly. General Information What is Islandora? : A quick overview of what Islandora is and why people use it. Installation & Virtual Machines Building a Virtual Machine : How to build a new VM using the Islandora ansible playbook . Importing a Virtual Machine : How to import a VM from a downloaded .ova. Using an FTP Client on a VM : How to configure an Islandora VM to work with an FTP client like Cyberduck or WinSCP . Composer Module Install : How to use Composer to install new Drupal modules in your VM. Site Building Basics Add a User : How to make a new user who can add Islandora content. Creating a Basic Page : How to create a regular Drupal page. Creating a Custom Block : How to create a custom content Block and place it on your site. Adding a Menu Item : How to add a new entry in your site's navigation. Setting a Home Page : How to assign a particular Drupal node as the Home Page for your site. Working with Islandora Content Add Content : How to add items to your Islandora repository. Making a Collection : How to create a new Islandora collection. Adding a Taxonomy Term : How to add a new term to an existing Taxonomy in Islandora. Regerating a Derivative : How to force Islandora to re-create a derivative for a node. Customizing a Form : How to modify fields, modify the ingest form, and modify the metadata display for Islandora content. Adding a New Context : How to add a new Context, causing a site Action to be performed based on conditions. Changing an Action : How to change how an existing Action behaves, to be performed based on a Context. Batch Ingest with Migrate : How to use Drupal Migrate to bulk-load Islandora content with metadata, without using the command line. Working with Views Basic Views : How to make a very basic View filtered by a taxonomy term. Advanced Views : How to bring together several settings and tools to make a more advanced image view. Batch Editing : How to use Views Bulk Edit to create a batch editing view for Islandora. Export and Import a View : How to copy a custom View from one Islandora site to another.","title":"Video Documentation"},{"location":"user-documentation/video-docs/#video-documentation","text":"Islandora Quick Lessons are a series of short videos demonstrating how to do common tasks in Islandora 8. New videos are added to the playlist regularly.","title":"Video Documentation"},{"location":"user-documentation/video-docs/#general-information","text":"What is Islandora? : A quick overview of what Islandora is and why people use it.","title":"General Information"},{"location":"user-documentation/video-docs/#installation-virtual-machines","text":"Building a Virtual Machine : How to build a new VM using the Islandora ansible playbook . Importing a Virtual Machine : How to import a VM from a downloaded .ova. Using an FTP Client on a VM : How to configure an Islandora VM to work with an FTP client like Cyberduck or WinSCP . Composer Module Install : How to use Composer to install new Drupal modules in your VM.","title":"Installation &amp; Virtual Machines"},{"location":"user-documentation/video-docs/#site-building-basics","text":"Add a User : How to make a new user who can add Islandora content. Creating a Basic Page : How to create a regular Drupal page. Creating a Custom Block : How to create a custom content Block and place it on your site. Adding a Menu Item : How to add a new entry in your site's navigation. Setting a Home Page : How to assign a particular Drupal node as the Home Page for your site.","title":"Site Building Basics"},{"location":"user-documentation/video-docs/#working-with-islandora-content","text":"Add Content : How to add items to your Islandora repository. Making a Collection : How to create a new Islandora collection. Adding a Taxonomy Term : How to add a new term to an existing Taxonomy in Islandora. Regerating a Derivative : How to force Islandora to re-create a derivative for a node. Customizing a Form : How to modify fields, modify the ingest form, and modify the metadata display for Islandora content. Adding a New Context : How to add a new Context, causing a site Action to be performed based on conditions. Changing an Action : How to change how an existing Action behaves, to be performed based on a Context. Batch Ingest with Migrate : How to use Drupal Migrate to bulk-load Islandora content with metadata, without using the command line.","title":"Working with Islandora Content"},{"location":"user-documentation/video-docs/#working-with-views","text":"Basic Views : How to make a very basic View filtered by a taxonomy term. Advanced Views : How to bring together several settings and tools to make a more advanced image view. Batch Editing : How to use Views Bulk Edit to create a batch editing view for Islandora. Export and Import a View : How to copy a custom View from one Islandora site to another.","title":"Working with Views"}]}